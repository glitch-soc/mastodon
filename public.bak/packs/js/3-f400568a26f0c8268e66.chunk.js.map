{"version":3,"sources":["webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/components/admin/Counter.js"],"names":["Counter","React","PureComponent","state","loading","data","componentDidMount","measure","start_at","end_at","params","this","props","api","post","keys","then","res","setState","catch","err","console","error","render","label","href","target","content","Fragment","className","width","percentChange","previous_total","a","b","percent","percIncrease","total","human_value","value","classNames","positive","negative","style","inner","height","map","x"],"mappings":"sNA0Be,MAAMA,UAAgBC,IAAMC,cAAe,cAAD,yBAYvDC,MAAQ,CACNC,SAAS,EACTC,KAAM,MAGRC,oBACE,MAAM,QAAEC,EAAO,SAAEC,EAAQ,OAAEC,EAAM,OAAEC,GAAWC,KAAKC,MAEnDC,cAAMC,KAAK,yBAA0B,CAAEC,KAAM,CAACR,GAAUC,WAAUC,SAAQ,CAACF,GAAUG,IAAUM,MAAKC,IAClGN,KAAKO,SAAS,CACZd,SAAS,EACTC,KAAMY,EAAIZ,UAEXc,OAAMC,IACPC,QAAQC,MAAMF,MAIlBG,SACE,MAAM,MAAEC,EAAK,KAAEC,EAAI,OAAEC,GAAWf,KAAKC,OAC/B,QAAER,EAAO,KAAEC,GAASM,KAAKR,MAE/B,IAAIwB,EAEJ,GAAIvB,EACFuB,EACE,YAAC,IAAMC,SAAQ,UACb,oBAAMC,UAAU,gCAAyB,EAAC,YAAC,IAAQ,CAACC,MAAO,MAC3D,oBAAMD,UAAU,iCAA0B,EAAC,YAAC,IAAQ,CAACC,MAAO,WAG3D,CACL,MAAMvB,EAAUF,EAAK,GACf0B,EAAgBxB,EAAQyB,gBA/Df,EAACC,EAAGC,KACvB,IAAIC,EAcJ,OAVIA,EAFM,IAAND,EACQ,IAAND,GACSC,EAAID,GAAKA,EAEV,EAEG,IAANC,GAAiB,IAAND,EACV,GAEE,EAGPE,GAgD6CC,CAAsC,EAAzB7B,EAAQyB,eAAoC,EAAhBzB,EAAQ8B,OAEjGV,EACE,YAAC,IAAMC,SAAQ,UACb,oBAAMC,UAAU,gCAAyB,EAAEtB,EAAQ+B,aAAe,YAAC,IAAe,CAACC,MAAOhC,EAAQ8B,SACjG9B,EAAQyB,gBAAmB,oBAAMH,UAAWW,IAAW,2BAA4B,CAAEC,SAAUV,EAAgB,EAAGW,SAAUX,EAAgB,UAAK,EAAEA,EAAgB,GAAK,IAAI,YAAC,IAAe,CAACQ,MAAOR,EAAeY,MAAM,cAKhO,MAAMC,EACJ,YAAC,IAAMhB,SAAQ,UACb,mBAAKC,UAAU,yBAAkB,EAC9BF,GAGH,mBAAKE,UAAU,yBAAkB,EAC9BL,GAGH,mBAAKK,UAAU,yBAAkB,GAC7BzB,GACA,YAAC,aAAU,CAAC0B,MAAO,IAAKe,OAAQ,GAAIxC,KAAMA,EAAK,GAAGA,KAAKyC,KAAIC,GAAe,EAAVA,EAAER,cAAW,EAC3E,YAAC,kBAAe,OAO1B,OAAId,EAEA,iBAAGA,KAAMA,EAAMI,UAAU,YAAYH,OAAQA,QAAO,EACjDkB,GAKH,mBAAKf,UAAU,kBAAW,EACvBe","file":"js/3-f400568a26f0c8268e66.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport api from 'flavours/glitch/api';\nimport { FormattedNumber } from 'react-intl';\nimport { Sparklines, SparklinesCurve } from 'react-sparklines';\nimport classNames from 'classnames';\nimport Skeleton from 'flavours/glitch/components/skeleton';\n\nconst percIncrease = (a, b) => {\n  let percent;\n\n  if (b !== 0) {\n    if (a !== 0) {\n      percent = (b - a) / a;\n    } else {\n      percent = 1;\n    }\n  } else if (b === 0 && a === 0) {\n    percent = 0;\n  } else {\n    percent = - 1;\n  }\n\n  return percent;\n};\n\nexport default class Counter extends React.PureComponent {\n\n  static propTypes = {\n    measure: PropTypes.string.isRequired,\n    start_at: PropTypes.string.isRequired,\n    end_at: PropTypes.string.isRequired,\n    label: PropTypes.string.isRequired,\n    href: PropTypes.string,\n    params: PropTypes.object,\n    target: PropTypes.string,\n  };\n\n  state = {\n    loading: true,\n    data: null,\n  };\n\n  componentDidMount () {\n    const { measure, start_at, end_at, params } = this.props;\n\n    api().post('/api/v1/admin/measures', { keys: [measure], start_at, end_at, [measure]: params }).then(res => {\n      this.setState({\n        loading: false,\n        data: res.data,\n      });\n    }).catch(err => {\n      console.error(err);\n    });\n  }\n\n  render () {\n    const { label, href, target } = this.props;\n    const { loading, data } = this.state;\n\n    let content;\n\n    if (loading) {\n      content = (\n        <React.Fragment>\n          <span className='sparkline__value__total'><Skeleton width={43} /></span>\n          <span className='sparkline__value__change'><Skeleton width={43} /></span>\n        </React.Fragment>\n      );\n    } else {\n      const measure = data[0];\n      const percentChange = measure.previous_total && percIncrease(measure.previous_total * 1, measure.total * 1);\n\n      content = (\n        <React.Fragment>\n          <span className='sparkline__value__total'>{measure.human_value || <FormattedNumber value={measure.total} />}</span>\n          {measure.previous_total && (<span className={classNames('sparkline__value__change', { positive: percentChange > 0, negative: percentChange < 0 })}>{percentChange > 0 && '+'}<FormattedNumber value={percentChange} style='percent' /></span>)}\n        </React.Fragment>\n      );\n    }\n\n    const inner = (\n      <React.Fragment>\n        <div className='sparkline__value'>\n          {content}\n        </div>\n\n        <div className='sparkline__label'>\n          {label}\n        </div>\n\n        <div className='sparkline__graph'>\n          {!loading && (\n            <Sparklines width={259} height={55} data={data[0].data.map(x => x.value * 1)}>\n              <SparklinesCurve />\n            </Sparklines>\n          )}\n        </div>\n      </React.Fragment>\n    );\n\n    if (href) {\n      return (\n        <a href={href} className='sparkline' target={target}>\n          {inner}\n        </a>\n      );\n    } else {\n      return (\n        <div className='sparkline'>\n          {inner}\n        </div>\n      );\n    }\n  }\n\n}\n"],"sourceRoot":""}