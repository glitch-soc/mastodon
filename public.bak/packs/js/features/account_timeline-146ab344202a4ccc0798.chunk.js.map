{"version":3,"sources":["webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/account_timeline/index.jsx"],"names":["emptyList","ImmutableList","RemoteHint","_ref2","url","_jsx","TimelineHint","resource","FormattedMessage","id","defaultMessage","AccountTimeline","connect","mapStateToProps","state","_ref","params","acct","tagged","withReplies","accountId","getIn","normalizeForLookup","isLoading","isAccount","statusIds","path","remote","remoteUrl","featuredStatusIds","hasMore","suspended","hidden","getAccountHidden","blockedBy","_dec","_class2","ImmutablePureComponent","constructor","arguments","handleLoadMore","maxId","this","props","dispatch","expandAccountTimeline","_load","fetchAccount","expandAccountFeaturedTimeline","fetchFeaturedTags","me","connectTimeline","componentDidMount","lookupAccount","componentDidUpdate","prevProps","disconnectTimeline","componentWillUnmount","render","multiColumn","isEmpty","Column","LoadingIndicator","ColumnBackButton","MissingIndicator","emptyMessage","forceEmptyState","LimitedAccountHint","remoteMessage","StatusList","prepend","HeaderContainer","hideTabs","alwaysPrepend","append","scrollKey","onLoadMore","bindToDocument","timelineId","propTypes","PropTypes","shape","string","isRequired","func","ImmutablePropTypes","list","bool","_class"],"mappings":"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","file":"js/features/account_timeline-146ab344202a4ccc0798.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport { lookupAccount, fetchAccount } from '../../actions/accounts';\nimport { expandAccountFeaturedTimeline, expandAccountTimeline } from '../../actions/timelines';\nimport StatusList from '../../components/status_list';\nimport LoadingIndicator from '../../components/loading_indicator';\nimport Column from '../ui/components/column';\nimport HeaderContainer from './containers/header_container';\nimport ColumnBackButton from '../../components/column_back_button';\nimport { List as ImmutableList } from 'immutable';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { FormattedMessage } from 'react-intl';\nimport MissingIndicator from 'mastodon/components/missing_indicator';\nimport TimelineHint from 'mastodon/components/timeline_hint';\nimport { me } from 'mastodon/initial_state';\nimport { connectTimeline, disconnectTimeline } from 'mastodon/actions/timelines';\nimport LimitedAccountHint from './components/limited_account_hint';\nimport { getAccountHidden } from 'mastodon/selectors';\nimport { fetchFeaturedTags } from '../../actions/featured_tags';\nimport { normalizeForLookup } from 'mastodon/reducers/accounts_map';\n\nconst emptyList = ImmutableList();\n\nconst mapStateToProps = (state, { params: { acct, id, tagged }, withReplies = false }) => {\n  const accountId = id || state.getIn(['accounts_map', normalizeForLookup(acct)]);\n\n  if (accountId === null) {\n    return {\n      isLoading: false,\n      isAccount: false,\n      statusIds: emptyList,\n    };\n  } else if (!accountId) {\n    return {\n      isLoading: true,\n      statusIds: emptyList,\n    };\n  }\n\n  const path = withReplies ? `${accountId}:with_replies` : `${accountId}${tagged ? `:${tagged}` : ''}`;\n\n  return {\n    accountId,\n    remote: !!(state.getIn(['accounts', accountId, 'acct']) !== state.getIn(['accounts', accountId, 'username'])),\n    remoteUrl: state.getIn(['accounts', accountId, 'url']),\n    isAccount: !!state.getIn(['accounts', accountId]),\n    statusIds: state.getIn(['timelines', `account:${path}`, 'items'], emptyList),\n    featuredStatusIds: withReplies ? ImmutableList() : state.getIn(['timelines', `account:${accountId}:pinned${tagged ? `:${tagged}` : ''}`, 'items'], emptyList),\n    isLoading: state.getIn(['timelines', `account:${path}`, 'isLoading']),\n    hasMore: state.getIn(['timelines', `account:${path}`, 'hasMore']),\n    suspended: state.getIn(['accounts', accountId, 'suspended'], false),\n    hidden: getAccountHidden(state, accountId),\n    blockedBy: state.getIn(['relationships', accountId, 'blocked_by'], false),\n  };\n};\n\nconst RemoteHint = ({ url }) => (\n  <TimelineHint url={url} resource={<FormattedMessage id='timeline_hint.resources.statuses' defaultMessage='Older posts' />} />\n);\n\nRemoteHint.propTypes = {\n  url: PropTypes.string.isRequired,\n};\n\nexport default @connect(mapStateToProps)\nclass AccountTimeline extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.shape({\n      acct: PropTypes.string,\n      id: PropTypes.string,\n      tagged: PropTypes.string,\n    }).isRequired,\n    accountId: PropTypes.string,\n    dispatch: PropTypes.func.isRequired,\n    statusIds: ImmutablePropTypes.list,\n    featuredStatusIds: ImmutablePropTypes.list,\n    isLoading: PropTypes.bool,\n    hasMore: PropTypes.bool,\n    withReplies: PropTypes.bool,\n    blockedBy: PropTypes.bool,\n    isAccount: PropTypes.bool,\n    suspended: PropTypes.bool,\n    hidden: PropTypes.bool,\n    remote: PropTypes.bool,\n    remoteUrl: PropTypes.string,\n    multiColumn: PropTypes.bool,\n  };\n\n  _load () {\n    const { accountId, withReplies, params: { tagged }, dispatch } = this.props;\n\n    dispatch(fetchAccount(accountId));\n\n    if (!withReplies) {\n      dispatch(expandAccountFeaturedTimeline(accountId, { tagged }));\n    }\n\n    dispatch(fetchFeaturedTags(accountId));\n    dispatch(expandAccountTimeline(accountId, { withReplies, tagged }));\n\n    if (accountId === me) {\n      dispatch(connectTimeline(`account:${me}`));\n    }\n  }\n\n  componentDidMount () {\n    const { params: { acct }, accountId, dispatch } = this.props;\n\n    if (accountId) {\n      this._load();\n    } else {\n      dispatch(lookupAccount(acct));\n    }\n  }\n\n  componentDidUpdate (prevProps) {\n    const { params: { acct, tagged }, accountId, withReplies, dispatch } = this.props;\n\n    if (prevProps.accountId !== accountId && accountId) {\n      this._load();\n    } else if (prevProps.params.acct !== acct) {\n      dispatch(lookupAccount(acct));\n    } else if (prevProps.params.tagged !== tagged) {\n      if (!withReplies) {\n        dispatch(expandAccountFeaturedTimeline(accountId, { tagged }));\n      }\n      dispatch(expandAccountTimeline(accountId, { withReplies, tagged }));\n    }\n\n    if (prevProps.accountId === me && accountId !== me) {\n      dispatch(disconnectTimeline(`account:${me}`));\n    }\n  }\n\n  componentWillUnmount () {\n    const { dispatch, accountId } = this.props;\n\n    if (accountId === me) {\n      dispatch(disconnectTimeline(`account:${me}`));\n    }\n  }\n\n  handleLoadMore = maxId => {\n    this.props.dispatch(expandAccountTimeline(this.props.accountId, { maxId, withReplies: this.props.withReplies, tagged: this.props.params.tagged }));\n  };\n\n  render () {\n    const { accountId, statusIds, featuredStatusIds, isLoading, hasMore, blockedBy, suspended, isAccount, hidden, multiColumn, remote, remoteUrl } = this.props;\n\n    if (isLoading && statusIds.isEmpty()) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    } else if (!isLoading && !isAccount) {\n      return (\n        <Column>\n          <ColumnBackButton multiColumn={multiColumn} />\n          <MissingIndicator />\n        </Column>\n      );\n    }\n\n    let emptyMessage;\n\n    const forceEmptyState = suspended || blockedBy || hidden;\n\n    if (suspended) {\n      emptyMessage = <FormattedMessage id='empty_column.account_suspended' defaultMessage='Account suspended' />;\n    } else if (hidden) {\n      emptyMessage = <LimitedAccountHint accountId={accountId} />;\n    } else if (blockedBy) {\n      emptyMessage = <FormattedMessage id='empty_column.account_unavailable' defaultMessage='Profile unavailable' />;\n    } else if (remote && statusIds.isEmpty()) {\n      emptyMessage = <RemoteHint url={remoteUrl} />;\n    } else {\n      emptyMessage = <FormattedMessage id='empty_column.account_timeline' defaultMessage='No posts found' />;\n    }\n\n    const remoteMessage = remote ? <RemoteHint url={remoteUrl} /> : null;\n\n    return (\n      <Column>\n        <ColumnBackButton multiColumn={multiColumn} />\n\n        <StatusList\n          prepend={<HeaderContainer accountId={this.props.accountId} hideTabs={forceEmptyState} tagged={this.props.params.tagged} />}\n          alwaysPrepend\n          append={remoteMessage}\n          scrollKey='account_timeline'\n          statusIds={forceEmptyState ? emptyList : statusIds}\n          featuredStatusIds={featuredStatusIds}\n          isLoading={isLoading}\n          hasMore={!forceEmptyState && hasMore}\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n          timelineId='account'\n        />\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}