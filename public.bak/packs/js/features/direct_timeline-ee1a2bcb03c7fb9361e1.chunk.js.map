{"version":3,"sources":["webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/components/avatar_composite.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/direct_timeline/components/conversation.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/direct_timeline/containers/conversation_container.js","webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/direct_timeline/components/conversations_list.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/direct_timeline/containers/conversations_list_container.js","webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/direct_timeline/index.jsx"],"names":["AvatarComposite","React","PureComponent","renderItem","account","size","index","animate","this","props","width","height","top","left","bottom","right","style","_jsx","get","Avatar","render","accounts","className","take","map","i","Math","min","defaultProps","autoPlayGif","messages","defineMessages","more","open","reply","markAsRead","delete","muteConversation","unmuteConversation","Conversation","injectIntl","_class2","ImmutablePureComponent","constructor","arguments","handleMouseEnter","_ref","currentTarget","emojis","querySelectorAll","length","emoji","src","getAttribute","handleMouseLeave","_ref2","handleClick","context","router","lastStatus","unread","markRead","history","push","getIn","handleMarkAsRead","handleReply","handleDelete","handleHotkeyMoveUp","onMoveUp","conversationId","handleHotkeyMoveDown","onMoveDown","handleConversationMute","onMute","handleShowMore","onToggleHidden","scrollKey","intl","menu","text","formatMessage","action","names","a","Link","to","title","dangerouslySetInnerHTML","__html","reduce","prev","cur","handlers","moveUp","moveDown","toggleHidden","HotKeys","classNames","tabIndex","onClick","role","RelativeTimestamp","timestamp","onMouseEnter","onMouseLeave","FormattedMessage","id","defaultMessage","values","StatusContent","status","expanded","onExpandedToggle","collapsable","AttachmentList","compact","media","IconButton","icon","DropdownMenuContainer","items","direction","contextTypes","PropTypes","object","propTypes","string","isRequired","ImmutablePropTypes","list","bool","func","_class","replyConfirm","replyMessage","connect","mapStateToProps","getStatus","makeGetStatus","state","conversation","find","x","lastStatusId","accountId","mapDispatchToProps","dispatch","markConversationRead","_","getState","trim","openModal","message","confirm","onConfirm","replyCompose","deleteConversation","unmuteStatus","muteStatus","revealStatus","hideStatus","ConversationsList","getCurrentIndex","conversations","findIndex","handleMoveUp","elementIndex","_selectChild","handleMoveDown","setRef","c","node","handleLoadOlder","_debounce","last","onLoadMore","leading","align_top","container","element","querySelector","scrollTop","offsetTop","scrollIntoView","clientHeight","offsetHeight","focus","other","createElement","ScrollableList","_extends","ref","item","ConversationContainer","hasMore","isLoading","maxId","expandConversations","DirectTimeline","_dec","handlePin","columnId","removeColumn","addColumn","handleMove","dir","moveColumn","handleHeaderClick","column","handleLoadMore","componentDidMount","mountConversations","disconnect","connectDirectStream","componentWillUnmount","unmountConversations","hasUnread","multiColumn","pinned","Column","bindToDocument","label","ColumnHeader","active","onPin","onMove","ConversationsListContainer","trackScroll","timelineId","prepend","href","target","emptyMessage","Helmet","name","content"],"mappings":"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","file":"js/features/direct_timeline-ee1a2bcb03c7fb9361e1.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { autoPlayGif } from '../initial_state';\nimport Avatar from './avatar';\n\nexport default class AvatarComposite extends React.PureComponent {\n\n  static propTypes = {\n    accounts: ImmutablePropTypes.list.isRequired,\n    animate: PropTypes.bool,\n    size: PropTypes.number.isRequired,\n  };\n\n  static defaultProps = {\n    animate: autoPlayGif,\n  };\n\n  renderItem (account, size, index) {\n    const { animate } = this.props;\n\n    let width  = 50;\n    let height = 100;\n    let top    = 'auto';\n    let left   = 'auto';\n    let bottom = 'auto';\n    let right  = 'auto';\n\n    if (size === 1) {\n      width = 100;\n    }\n\n    if (size === 4 || (size === 3 && index > 0)) {\n      height = 50;\n    }\n\n    if (size === 2) {\n      if (index === 0) {\n        right = '1px';\n      } else {\n        left = '1px';\n      }\n    } else if (size === 3) {\n      if (index === 0) {\n        right = '1px';\n      } else if (index > 0) {\n        left = '1px';\n      }\n\n      if (index === 1) {\n        bottom = '1px';\n      } else if (index > 1) {\n        top = '1px';\n      }\n    } else if (size === 4) {\n      if (index === 0 || index === 2) {\n        right = '1px';\n      }\n\n      if (index === 1 || index === 3) {\n        left = '1px';\n      }\n\n      if (index < 2) {\n        bottom = '1px';\n      } else {\n        top = '1px';\n      }\n    }\n\n    const style = {\n      left: left,\n      top: top,\n      right: right,\n      bottom: bottom,\n      width: `${width}%`,\n      height: `${height}%`,\n    };\n\n    return (\n      <div key={account.get('id')} style={style}>\n        <Avatar account={account} animate={animate} />\n      </div>\n    );\n  }\n\n  render() {\n    const { accounts, size } = this.props;\n\n    return (\n      <div className='account__avatar-composite' style={{ width: `${size}px`, height: `${size}px` }}>\n        {accounts.take(4).map((account, i) => this.renderItem(account, Math.min(accounts.size, 4), i))}\n\n        {accounts.size > 4 && (\n          <span className='account__avatar-composite__label'>\n            +{accounts.size - 4}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport StatusContent from 'mastodon/components/status_content';\nimport AttachmentList from 'mastodon/components/attachment_list';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport DropdownMenuContainer from 'mastodon/containers/dropdown_menu_container';\nimport AvatarComposite from 'mastodon/components/avatar_composite';\nimport { Link } from 'react-router-dom';\nimport IconButton from 'mastodon/components/icon_button';\nimport RelativeTimestamp from 'mastodon/components/relative_timestamp';\nimport { HotKeys } from 'react-hotkeys';\nimport { autoPlayGif } from 'mastodon/initial_state';\nimport classNames from 'classnames';\n\nconst messages = defineMessages({\n  more: { id: 'status.more', defaultMessage: 'More' },\n  open: { id: 'conversation.open', defaultMessage: 'View conversation' },\n  reply: { id: 'status.reply', defaultMessage: 'Reply' },\n  markAsRead: { id: 'conversation.mark_as_read', defaultMessage: 'Mark as read' },\n  delete: { id: 'conversation.delete', defaultMessage: 'Delete conversation' },\n  muteConversation: { id: 'status.mute_conversation', defaultMessage: 'Mute conversation' },\n  unmuteConversation: { id: 'status.unmute_conversation', defaultMessage: 'Unmute conversation' },\n});\n\nexport default @injectIntl\nclass Conversation extends ImmutablePureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    conversationId: PropTypes.string.isRequired,\n    accounts: ImmutablePropTypes.list.isRequired,\n    lastStatus: ImmutablePropTypes.map,\n    unread:PropTypes.bool.isRequired,\n    scrollKey: PropTypes.string,\n    onMoveUp: PropTypes.func,\n    onMoveDown: PropTypes.func,\n    markRead: PropTypes.func.isRequired,\n    delete: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  handleMouseEnter = ({ currentTarget }) => {\n    if (autoPlayGif) {\n      return;\n    }\n\n    const emojis = currentTarget.querySelectorAll('.custom-emoji');\n\n    for (var i = 0; i < emojis.length; i++) {\n      let emoji = emojis[i];\n      emoji.src = emoji.getAttribute('data-original');\n    }\n  };\n\n  handleMouseLeave = ({ currentTarget }) => {\n    if (autoPlayGif) {\n      return;\n    }\n\n    const emojis = currentTarget.querySelectorAll('.custom-emoji');\n\n    for (var i = 0; i < emojis.length; i++) {\n      let emoji = emojis[i];\n      emoji.src = emoji.getAttribute('data-static');\n    }\n  };\n\n  handleClick = () => {\n    if (!this.context.router) {\n      return;\n    }\n\n    const { lastStatus, unread, markRead } = this.props;\n\n    if (unread) {\n      markRead();\n    }\n\n    this.context.router.history.push(`/@${lastStatus.getIn(['account', 'acct'])}/${lastStatus.get('id')}`);\n  };\n\n  handleMarkAsRead = () => {\n    this.props.markRead();\n  };\n\n  handleReply = () => {\n    this.props.reply(this.props.lastStatus, this.context.router.history);\n  };\n\n  handleDelete = () => {\n    this.props.delete();\n  };\n\n  handleHotkeyMoveUp = () => {\n    this.props.onMoveUp(this.props.conversationId);\n  };\n\n  handleHotkeyMoveDown = () => {\n    this.props.onMoveDown(this.props.conversationId);\n  };\n\n  handleConversationMute = () => {\n    this.props.onMute(this.props.lastStatus);\n  };\n\n  handleShowMore = () => {\n    this.props.onToggleHidden(this.props.lastStatus);\n  };\n\n  render () {\n    const { accounts, lastStatus, unread, scrollKey, intl } = this.props;\n\n    if (lastStatus === null) {\n      return null;\n    }\n\n    const menu = [\n      { text: intl.formatMessage(messages.open), action: this.handleClick },\n      null,\n    ];\n\n    menu.push({ text: intl.formatMessage(lastStatus.get('muted') ? messages.unmuteConversation : messages.muteConversation), action: this.handleConversationMute });\n\n    if (unread) {\n      menu.push({ text: intl.formatMessage(messages.markAsRead), action: this.handleMarkAsRead });\n      menu.push(null);\n    }\n\n    menu.push({ text: intl.formatMessage(messages.delete), action: this.handleDelete });\n\n    const names = accounts.map(a => <Link to={`/@${a.get('acct')}`} key={a.get('id')} title={a.get('acct')}><bdi><strong className='display-name__html' dangerouslySetInnerHTML={{ __html: a.get('display_name_html') }} /></bdi></Link>).reduce((prev, cur) => [prev, ', ', cur]);\n\n    const handlers = {\n      reply: this.handleReply,\n      open: this.handleClick,\n      moveUp: this.handleHotkeyMoveUp,\n      moveDown: this.handleHotkeyMoveDown,\n      toggleHidden: this.handleShowMore,\n    };\n\n    return (\n      <HotKeys handlers={handlers}>\n        <div className={classNames('conversation focusable muted', { 'conversation--unread': unread })} tabIndex='0'>\n          <div className='conversation__avatar' onClick={this.handleClick} role='presentation'>\n            <AvatarComposite accounts={accounts} size={48} />\n          </div>\n\n          <div className='conversation__content'>\n            <div className='conversation__content__info'>\n              <div className='conversation__content__relative-time'>\n                {unread && <span className='conversation__unread' />} <RelativeTimestamp timestamp={lastStatus.get('created_at')} />\n              </div>\n\n              <div className='conversation__content__names' onMouseEnter={this.handleMouseEnter} onMouseLeave={this.handleMouseLeave}>\n                <FormattedMessage id='conversation.with' defaultMessage='With {names}' values={{ names: <span>{names}</span> }} />\n              </div>\n            </div>\n\n            <StatusContent\n              status={lastStatus}\n              onClick={this.handleClick}\n              expanded={!lastStatus.get('hidden')}\n              onExpandedToggle={this.handleShowMore}\n              collapsable\n            />\n\n            {lastStatus.get('media_attachments').size > 0 && (\n              <AttachmentList\n                compact\n                media={lastStatus.get('media_attachments')}\n              />\n            )}\n\n            <div className='status__action-bar'>\n              <IconButton className='status__action-bar-button' title={intl.formatMessage(messages.reply)} icon='reply' onClick={this.handleReply} />\n\n              <div className='status__action-bar-dropdown'>\n                <DropdownMenuContainer\n                  scrollKey={scrollKey}\n                  status={lastStatus}\n                  items={menu}\n                  icon='ellipsis-h'\n                  size={18}\n                  direction='right'\n                  title={intl.formatMessage(messages.more)}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </HotKeys>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport Conversation from '../components/conversation';\nimport { markConversationRead, deleteConversation } from 'mastodon/actions/conversations';\nimport { makeGetStatus } from 'mastodon/selectors';\nimport { replyCompose } from 'mastodon/actions/compose';\nimport { openModal } from 'mastodon/actions/modal';\nimport { muteStatus, unmuteStatus, hideStatus, revealStatus } from 'mastodon/actions/statuses';\nimport { defineMessages, injectIntl } from 'react-intl';\n\nconst messages = defineMessages({\n  replyConfirm: { id: 'confirmations.reply.confirm', defaultMessage: 'Reply' },\n  replyMessage: { id: 'confirmations.reply.message', defaultMessage: 'Replying now will overwrite the message you are currently composing. Are you sure you want to proceed?' },\n});\n\nconst mapStateToProps = () => {\n  const getStatus = makeGetStatus();\n\n  return (state, { conversationId }) => {\n    const conversation = state.getIn(['conversations', 'items']).find(x => x.get('id') === conversationId);\n    const lastStatusId = conversation.get('last_status', null);\n\n    return {\n      accounts: conversation.get('accounts').map(accountId => state.getIn(['accounts', accountId], null)),\n      unread: conversation.get('unread'),\n      lastStatus: lastStatusId && getStatus(state, { id: lastStatusId }),\n    };\n  };\n};\n\nconst mapDispatchToProps = (dispatch, { intl, conversationId }) => ({\n\n  markRead () {\n    dispatch(markConversationRead(conversationId));\n  },\n\n  reply (status, router) {\n    dispatch((_, getState) => {\n      let state = getState();\n\n      if (state.getIn(['compose', 'text']).trim().length !== 0) {\n        dispatch(openModal('CONFIRM', {\n          message: intl.formatMessage(messages.replyMessage),\n          confirm: intl.formatMessage(messages.replyConfirm),\n          onConfirm: () => dispatch(replyCompose(status, router)),\n        }));\n      } else {\n        dispatch(replyCompose(status, router));\n      }\n    });\n  },\n\n  delete () {\n    dispatch(deleteConversation(conversationId));\n  },\n\n  onMute (status) {\n    if (status.get('muted')) {\n      dispatch(unmuteStatus(status.get('id')));\n    } else {\n      dispatch(muteStatus(status.get('id')));\n    }\n  },\n\n  onToggleHidden (status) {\n    if (status.get('hidden')) {\n      dispatch(revealStatus(status.get('id')));\n    } else {\n      dispatch(hideStatus(status.get('id')));\n    }\n  },\n\n});\n\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(Conversation));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport ConversationContainer from '../containers/conversation_container';\nimport ScrollableList from '../../../components/scrollable_list';\nimport { debounce } from 'lodash';\n\nexport default class ConversationsList extends ImmutablePureComponent {\n\n  static propTypes = {\n    conversations: ImmutablePropTypes.list.isRequired,\n    scrollKey: PropTypes.string.isRequired,\n    hasMore: PropTypes.bool,\n    isLoading: PropTypes.bool,\n    onLoadMore: PropTypes.func,\n  };\n\n  getCurrentIndex = id => this.props.conversations.findIndex(x => x.get('id') === id);\n\n  handleMoveUp = id => {\n    const elementIndex = this.getCurrentIndex(id) - 1;\n    this._selectChild(elementIndex, true);\n  };\n\n  handleMoveDown = id => {\n    const elementIndex = this.getCurrentIndex(id) + 1;\n    this._selectChild(elementIndex, false);\n  };\n\n  _selectChild (index, align_top) {\n    const container = this.node.node;\n    const element = container.querySelector(`article:nth-of-type(${index + 1}) .focusable`);\n\n    if (element) {\n      if (align_top && container.scrollTop > element.offsetTop) {\n        element.scrollIntoView(true);\n      } else if (!align_top && container.scrollTop + container.clientHeight < element.offsetTop + element.offsetHeight) {\n        element.scrollIntoView(false);\n      }\n      element.focus();\n    }\n  }\n\n  setRef = c => {\n    this.node = c;\n  };\n\n  handleLoadOlder = debounce(() => {\n    const last = this.props.conversations.last();\n\n    if (last && last.get('last_status')) {\n      this.props.onLoadMore(last.get('last_status'));\n    }\n  }, 300, { leading: true });\n\n  render () {\n    const { conversations, onLoadMore, ...other } = this.props;\n\n    return (\n      <ScrollableList {...other} onLoadMore={onLoadMore && this.handleLoadOlder} ref={this.setRef}>\n        {conversations.map(item => (\n          <ConversationContainer\n            key={item.get('id')}\n            conversationId={item.get('id')}\n            onMoveUp={this.handleMoveUp}\n            onMoveDown={this.handleMoveDown}\n            scrollKey={this.props.scrollKey}\n          />\n        ))}\n      </ScrollableList>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport ConversationsList from '../components/conversations_list';\nimport { expandConversations } from '../../../actions/conversations';\n\nconst mapStateToProps = state => ({\n  conversations: state.getIn(['conversations', 'items']),\n  isLoading: state.getIn(['conversations', 'isLoading'], true),\n  hasMore: state.getIn(['conversations', 'hasMore'], false),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onLoadMore: maxId => dispatch(expandConversations({ maxId })),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ConversationsList);\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { addColumn, removeColumn, moveColumn } from 'mastodon/actions/columns';\nimport { mountConversations, unmountConversations, expandConversations } from 'mastodon/actions/conversations';\nimport { connectDirectStream } from 'mastodon/actions/streaming';\nimport Column from 'mastodon/components/column';\nimport ColumnHeader from 'mastodon/components/column_header';\nimport ConversationsListContainer from './containers/conversations_list_container';\n\nconst messages = defineMessages({\n  title: { id: 'column.direct', defaultMessage: 'Direct messages' },\n});\n\nexport default @connect()\n@injectIntl\nclass DirectTimeline extends React.PureComponent {\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    columnId: PropTypes.string,\n    intl: PropTypes.object.isRequired,\n    hasUnread: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('DIRECT', {}));\n    }\n  };\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  };\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  };\n\n  componentDidMount () {\n    const { dispatch } = this.props;\n\n    dispatch(mountConversations());\n    dispatch(expandConversations());\n    this.disconnect = dispatch(connectDirectStream());\n  }\n\n  componentWillUnmount () {\n    this.props.dispatch(unmountConversations());\n\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  setRef = c => {\n    this.column = c;\n  };\n\n  handleLoadMore = maxId => {\n    this.props.dispatch(expandConversations({ maxId }));\n  };\n\n  render () {\n    const { intl, hasUnread, columnId, multiColumn } = this.props;\n    const pinned = !!columnId;\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='at'\n          active={hasUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n        />\n\n        <ConversationsListContainer\n          trackScroll={!pinned}\n          scrollKey={`direct_timeline-${columnId}`}\n          timelineId='direct'\n          onLoadMore={this.handleLoadMore}\n          prepend={<div className='follow_requests-unlocked_explanation'><span><FormattedMessage id='compose_form.encryption_warning' defaultMessage='Posts on Mastodon are not end-to-end encrypted. Do not share any dangerous information over Mastodon.' /> <a href='/terms' target='_blank'><FormattedMessage id='compose_form.direct_message_warning_learn_more' defaultMessage='Learn more' /></a></span></div>}\n          emptyMessage={<FormattedMessage id='empty_column.direct' defaultMessage=\"You don't have any direct messages yet. When you send or receive one, it will show up here.\" />}\n        />\n\n        <Helmet>\n          <title>{intl.formatMessage(messages.title)}</title>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}