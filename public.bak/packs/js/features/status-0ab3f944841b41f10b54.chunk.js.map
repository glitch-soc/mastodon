{"version":3,"sources":["webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/components/edited_timestamp/containers/dropdown_menu_container.js","webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/components/edited_timestamp/index.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/status/components/detailed_status.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/status/components/action_bar.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/status/index.jsx"],"names":["connect","mapStateToProps","state","_ref","statusId","openDropdownId","getIn","openedViaKeyboard","items","loading","mapDispatchToProps","dispatch","_ref2","onOpen","id","onItemClick","keyboard","fetchHistory","openDropdownMenu","onClose","closeDropdownMenu","DropdownMenu","EditedTimestamp","index","openModal","_dec","_class","React","PureComponent","constructor","arguments","handleItemClick","item","i","this","props","renderHeader","_jsx","FormattedMessage","defaultMessage","values","count","size","renderItem","onClick","onKeyPress","formattedDate","RelativeTimestamp","timestamp","get","short","formattedName","InlineAccount","accountId","label","name","date","className","render","scrollable","Date","toLocaleString","undefined","hourCycle","month","day","hour","minute","Icon","messages","defineMessages","public_short","unlisted_short","private_short","direct_short","DetailedStatus","injectIntl","_class2","ImmutablePureComponent","height","handleAccountClick","e","button","ctrlKey","metaKey","context","router","preventDefault","history","push","status","stopPropagation","handleOpenVideo","options","onOpenVideo","handleExpandedToggle","onToggleHidden","setRef","c","node","_measureHeight","handleModalLink","href","target","nodeName","parentNode","window","open","handleTranslate","onTranslate","heightJustChanged","measureHeight","scheduleIdleTask","setState","Math","ceil","scrollHeight","onHeightChange","componentDidUpdate","prevProps","prevState","outerStyle","boxSizing","intl","compact","pictureInPicture","media","applicationLink","reblogLink","reblogIcon","favouriteLink","edited","PictureInPicturePlaceholder","attachment","Audio","src","alt","lang","duration","poster","backgroundColor","foregroundColor","accentColor","sensitive","visible","showMedia","blurhash","onToggleVisibility","onToggleMediaVisibility","Video","preview","frameRate","width","inline","MediaGallery","standalone","onOpenMedia","length","Card","card","Fragment","rel","visibilityIcon","icon","text","formatMessage","visibilityLink","title","includes","Link","to","AnimatedNumber","value","style","createElement","ref","classNames","Avatar","account","DisplayName","localDomain","domain","StatusContent","expanded","onExpandedToggle","StatusReactions","reactions","addReaction","onReactionAdd","removeReaction","onReactionRemove","canReact","identity","signedIn","year","contextTypes","PropTypes","object","propTypes","ImmutablePropTypes","map","func","isRequired","bool","string","contains","inUse","available","delete","redraft","edit","direct","mention","reply","reblog","reblog_private","cancel_reblog_private","cannot_reblog","favourite","react","bookmark","more","mute","muteConversation","unmuteConversation","block","report","share","pin","unpin","embed","admin_account","admin_status","admin_domain","copy","blockDomain","unblockDomain","unmute","unblock","openOriginalPage","ActionBar","relationship","handleReplyClick","onReply","handleReblogClick","onReblog","handleFavouriteClick","onFavourite","handleEmojiPick","data","native","replace","handleBookmarkClick","onBookmark","handleDeleteClick","onDelete","handleRedraftClick","handleEditClick","onEdit","handleDirectClick","onDirect","handleMentionClick","onMention","handleMuteClick","onMute","onUnmute","handleBlockClick","onBlock","onUnblock","handleBlockDomain","onBlockDomain","split","handleUnblockDomain","onUnblockDomain","handleConversationMuteClick","onMuteConversation","handleReport","onReport","handlePinClick","onPin","handleShare","navigator","url","handleEmbed","onEmbed","handleCopy","clipboard","writeText","handleNoOp","permissions","publicStatus","pinnableStatus","mutingConversation","writtenByMe","me","isRemote","menu","action","PERMISSION_MANAGE_USERS","PERMISSION_MANAGE_FEDERATION","filter","r","maxReactions","reactButton","IconButton","disabled","shareButton","replyIcon","reblogPrivate","reblogTitle","active","animate","EmojiPickerDropdown","onPickEmoji","DropdownMenuContainer","direction","deleteConfirm","deleteMessage","redraftConfirm","redraftMessage","revealAll","hideAll","detailedStatus","replyConfirm","replyMessage","blockDomainConfirm","Status","makeMapStateToProps","getStatus","makeGetStatus","getPictureInPicture","makeGetPictureInPicture","getAncestorsIds","createSelector","_","inReplyTos","ancestorsIds","Immutable","List","withMutations","mutable","unshift","getDescendantsIds","contextReplies","statuses","descendantsIds","ids","pop","replies","reverse","forEach","insertAt","findIndex","idx","splice","params","isLoading","askReplyConfirmation","trim","emojiMap","makeCustomEmojiMap","_this","fullscreen","defaultMediaVisibility","loadedStatusId","handleToggleMediaVisibility","unfavourite","type","handleReactionAdd","handleReactionRemove","handlePin","message","confirm","onConfirm","replyCompose","handleModalReblog","privacy","unreblog","shiftKey","boostModal","initBoostModal","unbookmark","withRedraft","deleteModal","deleteStatus","editStatus","directCompose","mentionCompose","handleOpenMedia","handleHotkeyOpenMedia","startTime","initMuteModal","unmuteStatus","muteStatus","handleToggleHidden","revealStatus","hideStatus","handleToggleAll","statusIds","concat","toJS","undoStatusTranslation","translateStatus","initBlockModal","initReport","handleUnmuteClick","unmuteAccount","handleUnblockClick","unblockAccount","handleBlockDomainClick","handleUnblockDomainClick","handleHotkeyMoveUp","handleMoveUp","handleHotkeyMoveDown","handleMoveDown","handleHotkeyReply","handleHotkeyFavourite","handleHotkeyBoost","handleHotkeyMention","handleHotkeyOpenProfile","handleHotkeyToggleHidden","handleHotkeyToggleSensitive","_selectChild","indexOf","onFullScreenChange","isFullscreen","componentWillMount","fetchStatus","componentDidMount","attachFullscreenListener","componentWillReceiveProps","nextProps","_scrolledIntoView","align_top","container","element","querySelectorAll","scrollTop","offsetTop","scrollIntoView","clientHeight","offsetHeight","focus","renderChildren","list","StatusContainer","onMoveUp","onMoveDown","contextType","requestAnimationFrame","componentWillUnmount","detachFullscreenListener","ancestors","descendants","multiColumn","Column","LoadingIndicator","ColumnBackButton","MissingIndicator","isLocal","isIndexable","handlers","moveUp","moveDown","boost","openProfile","toggleHidden","toggleSensitive","openMedia","bindToDocument","ColumnHeader","showBackButton","extraButton","ScrollContainer","scrollKey","HotKeys","tabIndex","textForScreenReader","Helmet","displayName","username","prefix","str","num","slice","truncate","titleFromStatus","content"],"mappings":"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","file":"js/features/status-0ab3f944841b41f10b54.chunk.js","sourcesContent":["import { connect } from 'react-redux';\nimport { openDropdownMenu, closeDropdownMenu } from 'mastodon/actions/dropdown_menu';\nimport { fetchHistory } from 'mastodon/actions/history';\nimport DropdownMenu from 'mastodon/components/dropdown_menu';\n\nconst mapStateToProps = (state, { statusId }) => ({\n  openDropdownId: state.getIn(['dropdown_menu', 'openId']),\n  openedViaKeyboard: state.getIn(['dropdown_menu', 'keyboard']),\n  items: state.getIn(['history', statusId, 'items']),\n  loading: state.getIn(['history', statusId, 'loading']),\n});\n\nconst mapDispatchToProps = (dispatch, { statusId }) => ({\n\n  onOpen (id, onItemClick, keyboard) {\n    dispatch(fetchHistory(statusId));\n    dispatch(openDropdownMenu(id, keyboard));\n  },\n\n  onClose (id) {\n    dispatch(closeDropdownMenu(id));\n  },\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DropdownMenu);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport Icon from 'mastodon/components/icon';\nimport DropdownMenu from './containers/dropdown_menu_container';\nimport { connect } from 'react-redux';\nimport { openModal } from 'mastodon/actions/modal';\nimport RelativeTimestamp from 'mastodon/components/relative_timestamp';\nimport InlineAccount from 'mastodon/components/inline_account';\n\nconst mapDispatchToProps = (dispatch, { statusId }) => ({\n\n  onItemClick (index) {\n    dispatch(openModal('COMPARE_HISTORY', { index, statusId }));\n  },\n\n});\n\nexport default @connect(null, mapDispatchToProps)\nclass EditedTimestamp extends React.PureComponent {\n\n  static propTypes = {\n    statusId: PropTypes.string.isRequired,\n    timestamp: PropTypes.string.isRequired,\n    intl: PropTypes.object.isRequired,\n    onItemClick: PropTypes.func.isRequired,\n  };\n\n  handleItemClick = (item, i) => {\n    const { onItemClick } = this.props;\n    onItemClick(i);\n  };\n\n  renderHeader = items => {\n    return (\n      <FormattedMessage id='status.edited_x_times' defaultMessage='Edited {count, plural, one {{count} time} other {{count} times}}' values={{ count: items.size - 1 }} />\n    );\n  };\n\n  renderItem = (item, index, { onClick, onKeyPress }) => {\n    const formattedDate = <RelativeTimestamp timestamp={item.get('created_at')} short={false} />;\n    const formattedName = <InlineAccount accountId={item.get('account')} />;\n\n    const label = item.get('original') ? (\n      <FormattedMessage id='status.history.created' defaultMessage='{name} created {date}' values={{ name: formattedName, date: formattedDate }} />\n    ) : (\n      <FormattedMessage id='status.history.edited' defaultMessage='{name} edited {date}' values={{ name: formattedName, date: formattedDate }} />\n    );\n\n    return (\n      <li className='dropdown-menu__item edited-timestamp__history__item' key={item.get('created_at')}>\n        <button data-index={index} onClick={onClick} onKeyPress={onKeyPress}>{label}</button>\n      </li>\n    );\n  };\n\n  render () {\n    const { timestamp, statusId } = this.props;\n\n    return (\n      <DropdownMenu statusId={statusId} renderItem={this.renderItem} scrollable renderHeader={this.renderHeader} onItemClick={this.handleItemClick}>\n        <button className='dropdown-menu__text-button'>\n          <FormattedMessage id='status.edited' defaultMessage='Edited {date}' values={{ date: new Date(timestamp).toLocaleString(undefined, { hourCycle: 'h23', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }) }} /> <Icon id='caret-down' />\n        </button>\n      </DropdownMenu>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport Avatar from '../../../components/avatar';\nimport DisplayName from '../../../components/display_name';\nimport StatusContent from '../../../components/status_content';\nimport MediaGallery from '../../../components/media_gallery';\nimport { Link } from 'react-router-dom';\nimport { injectIntl, defineMessages, FormattedDate } from 'react-intl';\nimport Card from './card';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport Video from '../../video';\nimport Audio from '../../audio';\nimport scheduleIdleTask from '../../ui/util/schedule_idle_task';\nimport classNames from 'classnames';\nimport Icon from 'mastodon/components/icon';\nimport AnimatedNumber from 'mastodon/components/animated_number';\nimport PictureInPicturePlaceholder from 'mastodon/components/picture_in_picture_placeholder';\nimport EditedTimestamp from 'mastodon/components/edited_timestamp';\nimport StatusReactions from 'mastodon/components/status_reactions';\n\nconst messages = defineMessages({\n  public_short: { id: 'privacy.public.short', defaultMessage: 'Public' },\n  unlisted_short: { id: 'privacy.unlisted.short', defaultMessage: 'Unlisted' },\n  private_short: { id: 'privacy.private.short', defaultMessage: 'Followers-only' },\n  direct_short: { id: 'privacy.direct.short', defaultMessage: 'Direct' },\n});\n\nexport default  @injectIntl\nclass DetailedStatus extends ImmutablePureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n    identity: PropTypes.object,\n  };\n\n  static propTypes = {\n    status: ImmutablePropTypes.map,\n    onOpenMedia: PropTypes.func.isRequired,\n    onOpenVideo: PropTypes.func.isRequired,\n    onToggleHidden: PropTypes.func.isRequired,\n    onTranslate: PropTypes.func.isRequired,\n    measureHeight: PropTypes.bool,\n    onHeightChange: PropTypes.func,\n    domain: PropTypes.string.isRequired,\n    compact: PropTypes.bool,\n    showMedia: PropTypes.bool,\n    pictureInPicture: ImmutablePropTypes.contains({\n      inUse: PropTypes.bool,\n      available: PropTypes.bool,\n    }),\n    onToggleMediaVisibility: PropTypes.func,\n    onReactionAdd: PropTypes.func.isRequired,\n    onReactionRemove: PropTypes.func.isRequired,\n  };\n\n  state = {\n    height: null,\n  };\n\n  handleAccountClick = (e) => {\n    if (e.button === 0 && !(e.ctrlKey || e.metaKey) && this.context.router) {\n      e.preventDefault();\n      this.context.router.history.push(`/@${this.props.status.getIn(['account', 'acct'])}`);\n    }\n\n    e.stopPropagation();\n  };\n\n  handleOpenVideo = (options) => {\n    this.props.onOpenVideo(this.props.status.getIn(['media_attachments', 0]), options);\n  };\n\n  handleExpandedToggle = () => {\n    this.props.onToggleHidden(this.props.status);\n  };\n\n  _measureHeight (heightJustChanged) {\n    if (this.props.measureHeight && this.node) {\n      scheduleIdleTask(() => this.node && this.setState({ height: Math.ceil(this.node.scrollHeight) + 1 }));\n\n      if (this.props.onHeightChange && heightJustChanged) {\n        this.props.onHeightChange();\n      }\n    }\n  }\n\n  setRef = c => {\n    this.node = c;\n    this._measureHeight();\n  };\n\n  componentDidUpdate (prevProps, prevState) {\n    this._measureHeight(prevState.height !== this.state.height);\n  }\n\n  handleModalLink = e => {\n    e.preventDefault();\n\n    let href;\n\n    if (e.target.nodeName !== 'A') {\n      href = e.target.parentNode.href;\n    } else {\n      href = e.target.href;\n    }\n\n    window.open(href, 'mastodon-intent', 'width=445,height=600,resizable=no,menubar=no,status=no,scrollbars=yes');\n  };\n\n  handleTranslate = () => {\n    const { onTranslate, status } = this.props;\n    onTranslate(status);\n  };\n\n  render () {\n    const status = (this.props.status && this.props.status.get('reblog')) ? this.props.status.get('reblog') : this.props.status;\n    const outerStyle = { boxSizing: 'border-box' };\n    const { intl, compact, pictureInPicture } = this.props;\n\n    if (!status) {\n      return null;\n    }\n\n    let media           = '';\n    let applicationLink = '';\n    let reblogLink = '';\n    let reblogIcon = 'retweet';\n    let favouriteLink = '';\n    let edited = '';\n\n    if (this.props.measureHeight) {\n      outerStyle.height = `${this.state.height}px`;\n    }\n\n    if (pictureInPicture.get('inUse')) {\n      media = <PictureInPicturePlaceholder />;\n    } else if (status.get('media_attachments').size > 0) {\n      if (status.getIn(['media_attachments', 0, 'type']) === 'audio') {\n        const attachment = status.getIn(['media_attachments', 0]);\n\n        media = (\n          <Audio\n            src={attachment.get('url')}\n            alt={attachment.get('description')}\n            lang={status.get('language')}\n            duration={attachment.getIn(['meta', 'original', 'duration'], 0)}\n            poster={attachment.get('preview_url') || status.getIn(['account', 'avatar_static'])}\n            backgroundColor={attachment.getIn(['meta', 'colors', 'background'])}\n            foregroundColor={attachment.getIn(['meta', 'colors', 'foreground'])}\n            accentColor={attachment.getIn(['meta', 'colors', 'accent'])}\n            sensitive={status.get('sensitive')}\n            visible={this.props.showMedia}\n            blurhash={attachment.get('blurhash')}\n            height={150}\n            onToggleVisibility={this.props.onToggleMediaVisibility}\n          />\n        );\n      } else if (status.getIn(['media_attachments', 0, 'type']) === 'video') {\n        const attachment = status.getIn(['media_attachments', 0]);\n\n        media = (\n          <Video\n            preview={attachment.get('preview_url')}\n            frameRate={attachment.getIn(['meta', 'original', 'frame_rate'])}\n            blurhash={attachment.get('blurhash')}\n            src={attachment.get('url')}\n            alt={attachment.get('description')}\n            lang={status.get('language')}\n            width={300}\n            height={150}\n            inline\n            onOpenVideo={this.handleOpenVideo}\n            sensitive={status.get('sensitive')}\n            visible={this.props.showMedia}\n            onToggleVisibility={this.props.onToggleMediaVisibility}\n          />\n        );\n      } else {\n        media = (\n          <MediaGallery\n            standalone\n            sensitive={status.get('sensitive')}\n            media={status.get('media_attachments')}\n            lang={status.get('language')}\n            height={300}\n            onOpenMedia={this.props.onOpenMedia}\n            visible={this.props.showMedia}\n            onToggleVisibility={this.props.onToggleMediaVisibility}\n          />\n        );\n      }\n    } else if (status.get('spoiler_text').length === 0) {\n      media = <Card sensitive={status.get('sensitive')} onOpenMedia={this.props.onOpenMedia} card={status.get('card', null)} />;\n    }\n\n    if (status.get('application')) {\n      applicationLink = <React.Fragment> · <a className='detailed-status__application' href={status.getIn(['application', 'website'])} target='_blank' rel='noopener noreferrer'>{status.getIn(['application', 'name'])}</a></React.Fragment>;\n    }\n\n    const visibilityIconInfo = {\n      'public': { icon: 'globe', text: intl.formatMessage(messages.public_short) },\n      'unlisted': { icon: 'unlock', text: intl.formatMessage(messages.unlisted_short) },\n      'private': { icon: 'lock', text: intl.formatMessage(messages.private_short) },\n      'direct': { icon: 'at', text: intl.formatMessage(messages.direct_short) },\n    };\n\n    const visibilityIcon = visibilityIconInfo[status.get('visibility')];\n    const visibilityLink = <React.Fragment> · <Icon id={visibilityIcon.icon} title={visibilityIcon.text} /></React.Fragment>;\n\n    if (['private', 'direct'].includes(status.get('visibility'))) {\n      reblogLink = '';\n    } else if (this.context.router) {\n      reblogLink = (\n        <React.Fragment>\n          <React.Fragment> · </React.Fragment>\n          <Link to={`/@${status.getIn(['account', 'acct'])}/${status.get('id')}/reblogs`} className='detailed-status__link'>\n            <Icon id={reblogIcon} />\n            <span className='detailed-status__reblogs'>\n              <AnimatedNumber value={status.get('reblogs_count')} />\n            </span>\n          </Link>\n        </React.Fragment>\n      );\n    } else {\n      reblogLink = (\n        <React.Fragment>\n          <React.Fragment> · </React.Fragment>\n          <a href={`/interact/${status.get('id')}?type=reblog`} className='detailed-status__link' onClick={this.handleModalLink}>\n            <Icon id={reblogIcon} />\n            <span className='detailed-status__reblogs'>\n              <AnimatedNumber value={status.get('reblogs_count')} />\n            </span>\n          </a>\n        </React.Fragment>\n      );\n    }\n\n    if (this.context.router) {\n      favouriteLink = (\n        <Link to={`/@${status.getIn(['account', 'acct'])}/${status.get('id')}/favourites`} className='detailed-status__link'>\n          <Icon id='star' />\n          <span className='detailed-status__favorites'>\n            <AnimatedNumber value={status.get('favourites_count')} />\n          </span>\n        </Link>\n      );\n    } else {\n      favouriteLink = (\n        <a href={`/interact/${status.get('id')}?type=favourite`} className='detailed-status__link' onClick={this.handleModalLink}>\n          <Icon id='star' />\n          <span className='detailed-status__favorites'>\n            <AnimatedNumber value={status.get('favourites_count')} />\n          </span>\n        </a>\n      );\n    }\n\n    if (status.get('edited_at')) {\n      edited = (\n        <React.Fragment>\n          <React.Fragment> · </React.Fragment>\n          <EditedTimestamp statusId={status.get('id')} timestamp={status.get('edited_at')} />\n        </React.Fragment>\n      );\n    }\n\n    return (\n      <div style={outerStyle}>\n        <div ref={this.setRef} className={classNames('detailed-status', `detailed-status-${status.get('visibility')}`, { compact })}>\n          <a href={`/@${status.getIn(['account', 'acct'])}`} onClick={this.handleAccountClick} className='detailed-status__display-name'>\n            <div className='detailed-status__display-avatar'><Avatar account={status.get('account')} size={46} /></div>\n            <DisplayName account={status.get('account')} localDomain={this.props.domain} />\n          </a>\n\n          <StatusContent\n            status={status}\n            expanded={!status.get('hidden')}\n            onExpandedToggle={this.handleExpandedToggle}\n            onTranslate={this.handleTranslate}\n          />\n\n          {media}\n\n          <StatusReactions\n            statusId={status.get('id')}\n            reactions={status.get('reactions')}\n            addReaction={this.props.onReactionAdd}\n            removeReaction={this.props.onReactionRemove}\n            canReact={this.context.identity.signedIn}\n          />\n\n          <div className='detailed-status__meta'>\n            <a className='detailed-status__datetime' href={`/@${status.getIn(['account', 'acct'])}/${status.get('id')}`} target='_blank' rel='noopener noreferrer'>\n              {new Date(status.get('created_at')).toLocaleString(undefined, { hourCycle: 'h23', year: 'numeric', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' })}\n            </a>{edited}{visibilityLink}{applicationLink}{reblogLink} · {favouriteLink}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport IconButton from '../../../components/icon_button';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport DropdownMenuContainer from '../../../containers/dropdown_menu_container';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { me, maxReactions } from '../../../initial_state';\nimport classNames from 'classnames';\nimport { PERMISSION_MANAGE_USERS, PERMISSION_MANAGE_FEDERATION } from 'mastodon/permissions';\nimport EmojiPickerDropdown from '../../compose/containers/emoji_picker_dropdown_container';\n\nconst messages = defineMessages({\n  delete: { id: 'status.delete', defaultMessage: 'Delete' },\n  redraft: { id: 'status.redraft', defaultMessage: 'Delete & re-draft' },\n  edit: { id: 'status.edit', defaultMessage: 'Edit' },\n  direct: { id: 'status.direct', defaultMessage: 'Direct message @{name}' },\n  mention: { id: 'status.mention', defaultMessage: 'Mention @{name}' },\n  reply: { id: 'status.reply', defaultMessage: 'Reply' },\n  reblog: { id: 'status.reblog', defaultMessage: 'Boost' },\n  reblog_private: { id: 'status.reblog_private', defaultMessage: 'Boost with original visibility' },\n  cancel_reblog_private: { id: 'status.cancel_reblog_private', defaultMessage: 'Unboost' },\n  cannot_reblog: { id: 'status.cannot_reblog', defaultMessage: 'This post cannot be boosted' },\n  favourite: { id: 'status.favourite', defaultMessage: 'Favourite' },\n  react: { id: 'status.react', defaultMessage: 'React' },\n  bookmark: { id: 'status.bookmark', defaultMessage: 'Bookmark' },\n  more: { id: 'status.more', defaultMessage: 'More' },\n  mute: { id: 'status.mute', defaultMessage: 'Mute @{name}' },\n  muteConversation: { id: 'status.mute_conversation', defaultMessage: 'Mute conversation' },\n  unmuteConversation: { id: 'status.unmute_conversation', defaultMessage: 'Unmute conversation' },\n  block: { id: 'status.block', defaultMessage: 'Block @{name}' },\n  report: { id: 'status.report', defaultMessage: 'Report @{name}' },\n  share: { id: 'status.share', defaultMessage: 'Share' },\n  pin: { id: 'status.pin', defaultMessage: 'Pin on profile' },\n  unpin: { id: 'status.unpin', defaultMessage: 'Unpin from profile' },\n  embed: { id: 'status.embed', defaultMessage: 'Embed' },\n  admin_account: { id: 'status.admin_account', defaultMessage: 'Open moderation interface for @{name}' },\n  admin_status: { id: 'status.admin_status', defaultMessage: 'Open this status in the moderation interface' },\n  admin_domain: { id: 'status.admin_domain', defaultMessage: 'Open moderation interface for {domain}' },\n  copy: { id: 'status.copy', defaultMessage: 'Copy link to status' },\n  blockDomain: { id: 'account.block_domain', defaultMessage: 'Block domain {domain}' },\n  unblockDomain: { id: 'account.unblock_domain', defaultMessage: 'Unblock domain {domain}' },\n  unmute: { id: 'account.unmute', defaultMessage: 'Unmute @{name}' },\n  unblock: { id: 'account.unblock', defaultMessage: 'Unblock @{name}' },\n  openOriginalPage: { id: 'account.open_original_page', defaultMessage: 'Open original page' },\n});\n\nconst mapStateToProps = (state, { status }) => ({\n  relationship: state.getIn(['relationships', status.getIn(['account', 'id'])]),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass ActionBar extends React.PureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n    identity: PropTypes.object,\n  };\n\n  static propTypes = {\n    status: ImmutablePropTypes.map.isRequired,\n    relationship: ImmutablePropTypes.map,\n    onReply: PropTypes.func.isRequired,\n    onReblog: PropTypes.func.isRequired,\n    onFavourite: PropTypes.func.isRequired,\n    onReactionAdd: PropTypes.func.isRequired,\n    onBookmark: PropTypes.func.isRequired,\n    onDelete: PropTypes.func.isRequired,\n    onEdit: PropTypes.func.isRequired,\n    onDirect: PropTypes.func.isRequired,\n    onMention: PropTypes.func.isRequired,\n    onMute: PropTypes.func,\n    onUnmute: PropTypes.func,\n    onBlock: PropTypes.func,\n    onUnblock: PropTypes.func,\n    onBlockDomain: PropTypes.func,\n    onUnblockDomain: PropTypes.func,\n    onMuteConversation: PropTypes.func,\n    onReport: PropTypes.func,\n    onPin: PropTypes.func,\n    onEmbed: PropTypes.func,\n    intl: PropTypes.object.isRequired,\n  };\n\n  handleReplyClick = () => {\n    this.props.onReply(this.props.status);\n  };\n\n  handleReblogClick = (e) => {\n    this.props.onReblog(this.props.status, e);\n  };\n\n  handleFavouriteClick = () => {\n    this.props.onFavourite(this.props.status);\n  };\n\n  handleEmojiPick = data => {\n    this.props.onReactionAdd(this.props.status.get('id'), data.native.replace(/:/g, ''));\n  }\n\n  handleBookmarkClick = (e) => {\n    this.props.onBookmark(this.props.status, e);\n  };\n\n  handleDeleteClick = () => {\n    this.props.onDelete(this.props.status, this.context.router.history);\n  };\n\n  handleRedraftClick = () => {\n    this.props.onDelete(this.props.status, this.context.router.history, true);\n  };\n\n  handleEditClick = () => {\n    this.props.onEdit(this.props.status, this.context.router.history);\n  };\n\n  handleDirectClick = () => {\n    this.props.onDirect(this.props.status.get('account'), this.context.router.history);\n  };\n\n  handleMentionClick = () => {\n    this.props.onMention(this.props.status.get('account'), this.context.router.history);\n  };\n\n  handleMuteClick = () => {\n    const { status, relationship, onMute, onUnmute } = this.props;\n    const account = status.get('account');\n\n    if (relationship && relationship.get('muting')) {\n      onUnmute(account);\n    } else {\n      onMute(account);\n    }\n  };\n\n  handleBlockClick = () => {\n    const { status, relationship, onBlock, onUnblock } = this.props;\n    const account = status.get('account');\n\n    if (relationship && relationship.get('blocking')) {\n      onUnblock(account);\n    } else {\n      onBlock(status);\n    }\n  };\n\n  handleBlockDomain = () => {\n    const { status, onBlockDomain } = this.props;\n    const account = status.get('account');\n\n    onBlockDomain(account.get('acct').split('@')[1]);\n  };\n\n  handleUnblockDomain = () => {\n    const { status, onUnblockDomain } = this.props;\n    const account = status.get('account');\n\n    onUnblockDomain(account.get('acct').split('@')[1]);\n  };\n\n  handleConversationMuteClick = () => {\n    this.props.onMuteConversation(this.props.status);\n  };\n\n  handleReport = () => {\n    this.props.onReport(this.props.status);\n  };\n\n  handlePinClick = () => {\n    this.props.onPin(this.props.status);\n  };\n\n  handleShare = () => {\n    navigator.share({\n      text: this.props.status.get('search_index'),\n      url: this.props.status.get('url'),\n    });\n  };\n\n  handleEmbed = () => {\n    this.props.onEmbed(this.props.status);\n  };\n\n  handleCopy = () => {\n    const url = this.props.status.get('url');\n    navigator.clipboard.writeText(url);\n  };\n\n  handleNoOp = () => {} // hack for reaction add button\n\n  render () {\n    const { status, relationship, intl } = this.props;\n    const { signedIn, permissions } = this.context.identity;\n\n    const publicStatus       = ['public', 'unlisted'].includes(status.get('visibility'));\n    const pinnableStatus     = ['public', 'unlisted', 'private'].includes(status.get('visibility'));\n    const mutingConversation = status.get('muted');\n    const account            = status.get('account');\n    const writtenByMe        = status.getIn(['account', 'id']) === me;\n    const isRemote           = status.getIn(['account', 'username']) !== status.getIn(['account', 'acct']);\n\n    let menu = [];\n\n    if (publicStatus) {\n      if (isRemote) {\n        menu.push({ text: intl.formatMessage(messages.openOriginalPage), href: status.get('url') });\n      }\n\n      menu.push({ text: intl.formatMessage(messages.copy), action: this.handleCopy });\n      menu.push({ text: intl.formatMessage(messages.embed), action: this.handleEmbed });\n      menu.push(null);\n    }\n\n    if (writtenByMe) {\n      if (pinnableStatus) {\n        menu.push({ text: intl.formatMessage(status.get('pinned') ? messages.unpin : messages.pin), action: this.handlePinClick });\n        menu.push(null);\n      }\n\n      menu.push({ text: intl.formatMessage(mutingConversation ? messages.unmuteConversation : messages.muteConversation), action: this.handleConversationMuteClick });\n      menu.push(null);\n      menu.push({ text: intl.formatMessage(messages.edit), action: this.handleEditClick });\n      menu.push({ text: intl.formatMessage(messages.delete), action: this.handleDeleteClick });\n      menu.push({ text: intl.formatMessage(messages.redraft), action: this.handleRedraftClick });\n    } else {\n      menu.push({ text: intl.formatMessage(messages.mention, { name: status.getIn(['account', 'username']) }), action: this.handleMentionClick });\n      menu.push(null);\n\n      if (relationship && relationship.get('muting')) {\n        menu.push({ text: intl.formatMessage(messages.unmute, { name: account.get('username') }), action: this.handleMuteClick });\n      } else {\n        menu.push({ text: intl.formatMessage(messages.mute, { name: account.get('username') }), action: this.handleMuteClick });\n      }\n\n      if (relationship && relationship.get('blocking')) {\n        menu.push({ text: intl.formatMessage(messages.unblock, { name: account.get('username') }), action: this.handleBlockClick });\n      } else {\n        menu.push({ text: intl.formatMessage(messages.block, { name: account.get('username') }), action: this.handleBlockClick });\n      }\n\n      menu.push({ text: intl.formatMessage(messages.report, { name: status.getIn(['account', 'username']) }), action: this.handleReport });\n\n      if (account.get('acct') !== account.get('username')) {\n        const domain = account.get('acct').split('@')[1];\n\n        menu.push(null);\n\n        if (relationship && relationship.get('domain_blocking')) {\n          menu.push({ text: intl.formatMessage(messages.unblockDomain, { domain }), action: this.handleUnblockDomain });\n        } else {\n          menu.push({ text: intl.formatMessage(messages.blockDomain, { domain }), action: this.handleBlockDomain });\n        }\n      }\n\n      if ((permissions & PERMISSION_MANAGE_USERS) === PERMISSION_MANAGE_USERS || (isRemote && (permissions & PERMISSION_MANAGE_FEDERATION) === PERMISSION_MANAGE_FEDERATION)) {\n        menu.push(null);\n        if ((permissions & PERMISSION_MANAGE_USERS) === PERMISSION_MANAGE_USERS) {\n          menu.push({ text: intl.formatMessage(messages.admin_account, { name: status.getIn(['account', 'username']) }), href: `/admin/accounts/${status.getIn(['account', 'id'])}` });\n          menu.push({ text: intl.formatMessage(messages.admin_status), href: `/admin/accounts/${status.getIn(['account', 'id'])}/statuses/${status.get('id')}` });\n        }\n        if (isRemote && (permissions & PERMISSION_MANAGE_FEDERATION) === PERMISSION_MANAGE_FEDERATION) {\n          const domain = account.get('acct').split('@')[1];\n          menu.push({ text: intl.formatMessage(messages.admin_domain, { domain: domain }), href: `/admin/instances/${domain}` });\n        }\n      }\n    }\n\n    const canReact = signedIn && status.get('reactions').filter(r => r.get('count') > 0 && r.get('me')).size < maxReactions;\n    const reactButton = (\n      <IconButton\n        className='plus-icon'\n        onClick={this.handleNoOp} // EmojiPickerDropdown handles that\n        title={intl.formatMessage(messages.react)}\n        disabled={!canReact}\n        icon='plus'\n      />\n    );\n\n    const shareButton = ('share' in navigator) && publicStatus && (\n      <div className='detailed-status__button'><IconButton title={intl.formatMessage(messages.share)} icon='share-alt' onClick={this.handleShare} /></div>\n    );\n\n    let replyIcon;\n    if (status.get('in_reply_to_id', null) === null) {\n      replyIcon = 'reply';\n    } else {\n      replyIcon = 'reply-all';\n    }\n\n    const reblogPrivate = status.getIn(['account', 'id']) === me && status.get('visibility') === 'private';\n\n    let reblogTitle;\n    if (status.get('reblogged')) {\n      reblogTitle = intl.formatMessage(messages.cancel_reblog_private);\n    } else if (publicStatus) {\n      reblogTitle = intl.formatMessage(messages.reblog);\n    } else if (reblogPrivate) {\n      reblogTitle = intl.formatMessage(messages.reblog_private);\n    } else {\n      reblogTitle = intl.formatMessage(messages.cannot_reblog);\n    }\n\n    return (\n      <div className='detailed-status__action-bar'>\n        <div className='detailed-status__button'><IconButton title={intl.formatMessage(messages.reply)} icon={status.get('in_reply_to_account_id') === status.getIn(['account', 'id']) ? 'reply' : replyIcon} onClick={this.handleReplyClick} /></div>\n        <div className='detailed-status__button' ><IconButton className={classNames({ reblogPrivate })} disabled={!publicStatus && !reblogPrivate} active={status.get('reblogged')} title={reblogTitle} icon='retweet' onClick={this.handleReblogClick} /></div>\n        <div className='detailed-status__button'><IconButton className='star-icon' animate active={status.get('favourited')} title={intl.formatMessage(messages.favourite)} icon='star' onClick={this.handleFavouriteClick} /></div>\n        <div className='detailed-status__button'>\n          {\n            canReact\n              ? <EmojiPickerDropdown onPickEmoji={this.handleEmojiPick} button={reactButton} disabled={!canReact} />\n              : reactButton\n          }\n        </div>\n        <div className='detailed-status__button'><IconButton className='bookmark-icon' disabled={!signedIn} active={status.get('bookmarked')} title={intl.formatMessage(messages.bookmark)} icon='bookmark' onClick={this.handleBookmarkClick} /></div>\n\n        {shareButton}\n\n        <div className='detailed-status__action-bar-dropdown'>\n          <DropdownMenuContainer size={18} icon='ellipsis-h' disabled={!signedIn} status={status} items={menu} direction='left' title={intl.formatMessage(messages.more)} />\n        </div>\n      </div>\n    );\n  }\n\n}\n","import Immutable from 'immutable';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { createSelector } from 'reselect';\nimport {\n  fetchStatus,\n  muteStatus,\n  unmuteStatus,\n  deleteStatus,\n  editStatus,\n  hideStatus,\n  revealStatus,\n  translateStatus,\n  undoStatusTranslation,\n} from '../../actions/statuses';\nimport MissingIndicator from '../../components/missing_indicator';\nimport LoadingIndicator from 'mastodon/components/loading_indicator';\nimport DetailedStatus from './components/detailed_status';\nimport ActionBar from './components/action_bar';\nimport Column from '../ui/components/column';\nimport {\n  favourite,\n  unfavourite,\n  bookmark,\n  unbookmark,\n  reblog,\n  unreblog,\n  pin,\n  unpin,\n  addReaction,\n  removeReaction,\n} from '../../actions/interactions';\nimport {\n  replyCompose,\n  mentionCompose,\n  directCompose,\n} from '../../actions/compose';\nimport {\n  unblockAccount,\n  unmuteAccount,\n} from '../../actions/accounts';\nimport {\n  blockDomain,\n  unblockDomain,\n} from '../../actions/domain_blocks';\nimport { initMuteModal } from '../../actions/mutes';\nimport { initBlockModal } from '../../actions/blocks';\nimport { initBoostModal } from '../../actions/boosts';\nimport { initReport } from '../../actions/reports';\nimport { makeCustomEmojiMap, makeGetStatus, makeGetPictureInPicture } from '../../selectors';\nimport ScrollContainer from 'mastodon/containers/scroll_container';\nimport ColumnBackButton from '../../components/column_back_button';\nimport ColumnHeader from '../../components/column_header';\nimport StatusContainer from '../../containers/status_container';\nimport { openModal } from '../../actions/modal';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { HotKeys } from 'react-hotkeys';\nimport { boostModal, deleteModal } from '../../initial_state';\nimport { attachFullscreenListener, detachFullscreenListener, isFullscreen } from '../ui/util/fullscreen';\nimport { textForScreenReader, defaultMediaVisibility } from '../../components/status';\nimport Icon from 'mastodon/components/icon';\nimport { Helmet } from 'react-helmet';\n\nconst messages = defineMessages({\n  deleteConfirm: { id: 'confirmations.delete.confirm', defaultMessage: 'Delete' },\n  deleteMessage: { id: 'confirmations.delete.message', defaultMessage: 'Are you sure you want to delete this status?' },\n  redraftConfirm: { id: 'confirmations.redraft.confirm', defaultMessage: 'Delete & redraft' },\n  redraftMessage: { id: 'confirmations.redraft.message', defaultMessage: 'Are you sure you want to delete this status and re-draft it? Favourites and boosts will be lost, and replies to the original post will be orphaned.' },\n  revealAll: { id: 'status.show_more_all', defaultMessage: 'Show more for all' },\n  hideAll: { id: 'status.show_less_all', defaultMessage: 'Show less for all' },\n  detailedStatus: { id: 'status.detailed_status', defaultMessage: 'Detailed conversation view' },\n  replyConfirm: { id: 'confirmations.reply.confirm', defaultMessage: 'Reply' },\n  replyMessage: { id: 'confirmations.reply.message', defaultMessage: 'Replying now will overwrite the message you are currently composing. Are you sure you want to proceed?' },\n  blockDomainConfirm: { id: 'confirmations.domain_block.confirm', defaultMessage: 'Hide entire domain' },\n});\n\nconst makeMapStateToProps = () => {\n  const getStatus = makeGetStatus();\n  const getPictureInPicture = makeGetPictureInPicture();\n\n  const getAncestorsIds = createSelector([\n    (_, { id }) => id,\n    state => state.getIn(['contexts', 'inReplyTos']),\n  ], (statusId, inReplyTos) => {\n    let ancestorsIds = Immutable.List();\n    ancestorsIds = ancestorsIds.withMutations(mutable => {\n      let id = statusId;\n\n      while (id && !mutable.includes(id)) {\n        mutable.unshift(id);\n        id = inReplyTos.get(id);\n      }\n    });\n\n    return ancestorsIds;\n  });\n\n  const getDescendantsIds = createSelector([\n    (_, { id }) => id,\n    state => state.getIn(['contexts', 'replies']),\n    state => state.get('statuses'),\n  ], (statusId, contextReplies, statuses) => {\n    let descendantsIds = [];\n    const ids = [statusId];\n\n    while (ids.length > 0) {\n      let id        = ids.pop();\n      const replies = contextReplies.get(id);\n\n      if (statusId !== id) {\n        descendantsIds.push(id);\n      }\n\n      if (replies) {\n        replies.reverse().forEach(reply => {\n          if (!ids.includes(reply) && !descendantsIds.includes(reply) && statusId !== reply) ids.push(reply);\n        });\n      }\n    }\n\n    let insertAt = descendantsIds.findIndex((id) => statuses.get(id).get('in_reply_to_account_id') !== statuses.get(id).get('account'));\n    if (insertAt !== -1) {\n      descendantsIds.forEach((id, idx) => {\n        if (idx > insertAt && statuses.get(id).get('in_reply_to_account_id') === statuses.get(id).get('account')) {\n          descendantsIds.splice(idx, 1);\n          descendantsIds.splice(insertAt, 0, id);\n          insertAt += 1;\n        }\n      });\n    }\n\n    return Immutable.List(descendantsIds);\n  });\n\n  const mapStateToProps = (state, props) => {\n    const status = getStatus(state, { id: props.params.statusId });\n\n    let ancestorsIds   = Immutable.List();\n    let descendantsIds = Immutable.List();\n\n    if (status) {\n      ancestorsIds   = getAncestorsIds(state, { id: status.get('in_reply_to_id') });\n      descendantsIds = getDescendantsIds(state, { id: status.get('id') });\n    }\n\n    return {\n      isLoading: state.getIn(['statuses', props.params.statusId, 'isLoading']),\n      status,\n      ancestorsIds,\n      descendantsIds,\n      askReplyConfirmation: state.getIn(['compose', 'text']).trim().length !== 0,\n      domain: state.getIn(['meta', 'domain']),\n      pictureInPicture: getPictureInPicture(state, { id: props.params.statusId }),\n      emojiMap: makeCustomEmojiMap(state),\n    };\n  };\n\n  return mapStateToProps;\n};\n\nconst truncate = (str, num) => {\n  if (str.length > num) {\n    return str.slice(0, num) + '…';\n  } else {\n    return str;\n  }\n};\n\nconst titleFromStatus = status => {\n  const displayName = status.getIn(['account', 'display_name']);\n  const username = status.getIn(['account', 'username']);\n  const prefix = displayName.trim().length === 0 ? username : displayName;\n  const text = status.get('search_index');\n\n  return `${prefix}: \"${truncate(text, 30)}\"`;\n};\n\nexport default @injectIntl\n@connect(makeMapStateToProps)\nclass Status extends ImmutablePureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n    identity: PropTypes.object,\n  };\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    status: ImmutablePropTypes.map,\n    isLoading: PropTypes.bool,\n    ancestorsIds: ImmutablePropTypes.list,\n    descendantsIds: ImmutablePropTypes.list,\n    intl: PropTypes.object.isRequired,\n    askReplyConfirmation: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    domain: PropTypes.string.isRequired,\n    pictureInPicture: ImmutablePropTypes.contains({\n      inUse: PropTypes.bool,\n      available: PropTypes.bool,\n    }),\n  };\n\n  state = {\n    fullscreen: false,\n    showMedia: defaultMediaVisibility(this.props.status),\n    loadedStatusId: undefined,\n  };\n\n  componentWillMount () {\n    this.props.dispatch(fetchStatus(this.props.params.statusId));\n  }\n\n  componentDidMount () {\n    attachFullscreenListener(this.onFullScreenChange);\n  }\n\n  componentWillReceiveProps (nextProps) {\n    if (nextProps.params.statusId !== this.props.params.statusId && nextProps.params.statusId) {\n      this._scrolledIntoView = false;\n      this.props.dispatch(fetchStatus(nextProps.params.statusId));\n    }\n\n    if (nextProps.params.statusId && nextProps.ancestorsIds.size > this.props.ancestorsIds.size) {\n      this._scrolledIntoView = false;\n    }\n\n    if (nextProps.status && nextProps.status.get('id') !== this.state.loadedStatusId) {\n      this.setState({ showMedia: defaultMediaVisibility(nextProps.status), loadedStatusId: nextProps.status.get('id') });\n    }\n  }\n\n  handleToggleMediaVisibility = () => {\n    this.setState({ showMedia: !this.state.showMedia });\n  };\n\n  handleFavouriteClick = (status) => {\n    const { dispatch } = this.props;\n    const { signedIn } = this.context.identity;\n\n    if (signedIn) {\n      if (status.get('favourited')) {\n        dispatch(unfavourite(status));\n      } else {\n        dispatch(favourite(status));\n      }\n    } else {\n      dispatch(openModal('INTERACTION', {\n        type: 'favourite',\n        accountId: status.getIn(['account', 'id']),\n        url: status.get('url'),\n      }));\n    }\n  };\n\n  handleReactionAdd = (statusId, name, url) => {\n    const { dispatch } = this.props;\n    const { signedIn } = this.context.identity;\n\n    if (signedIn) {\n      dispatch(addReaction(statusId, name, url));\n    }\n  }\n\n  handleReactionRemove = (statusId, name) => {\n    this.props.dispatch(removeReaction(statusId, name));\n  }\n\n  handlePin = (status) => {\n    if (status.get('pinned')) {\n      this.props.dispatch(unpin(status));\n    } else {\n      this.props.dispatch(pin(status));\n    }\n  };\n\n  handleReplyClick = (status) => {\n    const { askReplyConfirmation, dispatch, intl } = this.props;\n    const { signedIn } = this.context.identity;\n\n    if (signedIn) {\n      if (askReplyConfirmation) {\n        dispatch(openModal('CONFIRM', {\n          message: intl.formatMessage(messages.replyMessage),\n          confirm: intl.formatMessage(messages.replyConfirm),\n          onConfirm: () => dispatch(replyCompose(status, this.context.router.history)),\n        }));\n      } else {\n        dispatch(replyCompose(status, this.context.router.history));\n      }\n    } else {\n      dispatch(openModal('INTERACTION', {\n        type: 'reply',\n        accountId: status.getIn(['account', 'id']),\n        url: status.get('url'),\n      }));\n    }\n  };\n\n  handleModalReblog = (status, privacy) => {\n    this.props.dispatch(reblog(status, privacy));\n  };\n\n  handleReblogClick = (status, e) => {\n    const { dispatch } = this.props;\n    const { signedIn } = this.context.identity;\n\n    if (signedIn) {\n      if (status.get('reblogged')) {\n        dispatch(unreblog(status));\n      } else {\n        if ((e && e.shiftKey) || !boostModal) {\n          this.handleModalReblog(status);\n        } else {\n          dispatch(initBoostModal({ status, onReblog: this.handleModalReblog }));\n        }\n      }\n    } else {\n      dispatch(openModal('INTERACTION', {\n        type: 'reblog',\n        accountId: status.getIn(['account', 'id']),\n        url: status.get('url'),\n      }));\n    }\n  };\n\n  handleBookmarkClick = (status) => {\n    if (status.get('bookmarked')) {\n      this.props.dispatch(unbookmark(status));\n    } else {\n      this.props.dispatch(bookmark(status));\n    }\n  };\n\n  handleDeleteClick = (status, history, withRedraft = false) => {\n    const { dispatch, intl } = this.props;\n\n    if (!deleteModal) {\n      dispatch(deleteStatus(status.get('id'), history, withRedraft));\n    } else {\n      dispatch(openModal('CONFIRM', {\n        message: intl.formatMessage(withRedraft ? messages.redraftMessage : messages.deleteMessage),\n        confirm: intl.formatMessage(withRedraft ? messages.redraftConfirm : messages.deleteConfirm),\n        onConfirm: () => dispatch(deleteStatus(status.get('id'), history, withRedraft)),\n      }));\n    }\n  };\n\n  handleEditClick = (status, history) => {\n    this.props.dispatch(editStatus(status.get('id'), history));\n  };\n\n  handleDirectClick = (account, router) => {\n    this.props.dispatch(directCompose(account, router));\n  };\n\n  handleMentionClick = (account, router) => {\n    this.props.dispatch(mentionCompose(account, router));\n  };\n\n  handleOpenMedia = (media, index) => {\n    this.props.dispatch(openModal('MEDIA', { statusId: this.props.status.get('id'), media, index }));\n  };\n\n  handleOpenVideo = (media, options) => {\n    this.props.dispatch(openModal('VIDEO', { statusId: this.props.status.get('id'), media, options }));\n  };\n\n  handleHotkeyOpenMedia = e => {\n    const { status } = this.props;\n\n    e.preventDefault();\n\n    if (status.get('media_attachments').size > 0) {\n      if (status.getIn(['media_attachments', 0, 'type']) === 'video') {\n        this.handleOpenVideo(status.getIn(['media_attachments', 0]), { startTime: 0 });\n      } else {\n        this.handleOpenMedia(status.get('media_attachments'), 0);\n      }\n    }\n  };\n\n  handleMuteClick = (account) => {\n    this.props.dispatch(initMuteModal(account));\n  };\n\n  handleConversationMuteClick = (status) => {\n    if (status.get('muted')) {\n      this.props.dispatch(unmuteStatus(status.get('id')));\n    } else {\n      this.props.dispatch(muteStatus(status.get('id')));\n    }\n  };\n\n  handleToggleHidden = (status) => {\n    if (status.get('hidden')) {\n      this.props.dispatch(revealStatus(status.get('id')));\n    } else {\n      this.props.dispatch(hideStatus(status.get('id')));\n    }\n  };\n\n  handleToggleAll = () => {\n    const { status, ancestorsIds, descendantsIds } = this.props;\n    const statusIds = [status.get('id')].concat(ancestorsIds.toJS(), descendantsIds.toJS());\n\n    if (status.get('hidden')) {\n      this.props.dispatch(revealStatus(statusIds));\n    } else {\n      this.props.dispatch(hideStatus(statusIds));\n    }\n  };\n\n  handleTranslate = status => {\n    const { dispatch } = this.props;\n\n    if (status.get('translation')) {\n      dispatch(undoStatusTranslation(status.get('id')));\n    } else {\n      dispatch(translateStatus(status.get('id')));\n    }\n  };\n\n  handleBlockClick = (status) => {\n    const { dispatch } = this.props;\n    const account = status.get('account');\n    dispatch(initBlockModal(account));\n  };\n\n  handleReport = (status) => {\n    this.props.dispatch(initReport(status.get('account'), status));\n  };\n\n  handleEmbed = (status) => {\n    this.props.dispatch(openModal('EMBED', { url: status.get('url') }));\n  };\n\n  handleUnmuteClick = account => {\n    this.props.dispatch(unmuteAccount(account.get('id')));\n  };\n\n  handleUnblockClick = account => {\n    this.props.dispatch(unblockAccount(account.get('id')));\n  };\n\n  handleBlockDomainClick = domain => {\n    this.props.dispatch(openModal('CONFIRM', {\n      message: <FormattedMessage id='confirmations.domain_block.message' defaultMessage='Are you really, really sure you want to block the entire {domain}? In most cases a few targeted blocks or mutes are sufficient and preferable. You will not see content from that domain in any public timelines or your notifications. Your followers from that domain will be removed.' values={{ domain: <strong>{domain}</strong> }} />,\n      confirm: this.props.intl.formatMessage(messages.blockDomainConfirm),\n      onConfirm: () => this.props.dispatch(blockDomain(domain)),\n    }));\n  };\n\n  handleUnblockDomainClick = domain => {\n    this.props.dispatch(unblockDomain(domain));\n  };\n\n\n  handleHotkeyMoveUp = () => {\n    this.handleMoveUp(this.props.status.get('id'));\n  };\n\n  handleHotkeyMoveDown = () => {\n    this.handleMoveDown(this.props.status.get('id'));\n  };\n\n  handleHotkeyReply = e => {\n    e.preventDefault();\n    this.handleReplyClick(this.props.status);\n  };\n\n  handleHotkeyFavourite = () => {\n    this.handleFavouriteClick(this.props.status);\n  };\n\n  handleHotkeyBoost = () => {\n    this.handleReblogClick(this.props.status);\n  };\n\n  handleHotkeyMention = e => {\n    e.preventDefault();\n    this.handleMentionClick(this.props.status.get('account'));\n  };\n\n  handleHotkeyOpenProfile = () => {\n    this.context.router.history.push(`/@${this.props.status.getIn(['account', 'acct'])}`);\n  };\n\n  handleHotkeyToggleHidden = () => {\n    this.handleToggleHidden(this.props.status);\n  };\n\n  handleHotkeyToggleSensitive = () => {\n    this.handleToggleMediaVisibility();\n  };\n\n  handleMoveUp = id => {\n    const { status, ancestorsIds, descendantsIds } = this.props;\n\n    if (id === status.get('id')) {\n      this._selectChild(ancestorsIds.size - 1, true);\n    } else {\n      let index = ancestorsIds.indexOf(id);\n\n      if (index === -1) {\n        index = descendantsIds.indexOf(id);\n        this._selectChild(ancestorsIds.size + index, true);\n      } else {\n        this._selectChild(index - 1, true);\n      }\n    }\n  };\n\n  handleMoveDown = id => {\n    const { status, ancestorsIds, descendantsIds } = this.props;\n\n    if (id === status.get('id')) {\n      this._selectChild(ancestorsIds.size + 1, false);\n    } else {\n      let index = ancestorsIds.indexOf(id);\n\n      if (index === -1) {\n        index = descendantsIds.indexOf(id);\n        this._selectChild(ancestorsIds.size + index + 2, false);\n      } else {\n        this._selectChild(index + 1, false);\n      }\n    }\n  };\n\n  _selectChild (index, align_top) {\n    const container = this.node;\n    const element = container.querySelectorAll('.focusable')[index];\n\n    if (element) {\n      if (align_top && container.scrollTop > element.offsetTop) {\n        element.scrollIntoView(true);\n      } else if (!align_top && container.scrollTop + container.clientHeight < element.offsetTop + element.offsetHeight) {\n        element.scrollIntoView(false);\n      }\n      element.focus();\n    }\n  }\n\n  renderChildren (list) {\n    return list.map(id => (\n      <StatusContainer\n        key={id}\n        id={id}\n        onMoveUp={this.handleMoveUp}\n        onMoveDown={this.handleMoveDown}\n        contextType='thread'\n      />\n    ));\n  }\n\n  setRef = c => {\n    this.node = c;\n  };\n\n  componentDidUpdate () {\n    if (this._scrolledIntoView) {\n      return;\n    }\n\n    const { status, ancestorsIds } = this.props;\n\n    if (status && ancestorsIds && ancestorsIds.size > 0) {\n      const element = this.node.querySelectorAll('.focusable')[ancestorsIds.size - 1];\n\n      window.requestAnimationFrame(() => {\n        element.scrollIntoView(true);\n      });\n      this._scrolledIntoView = true;\n    }\n  }\n\n  componentWillUnmount () {\n    detachFullscreenListener(this.onFullScreenChange);\n  }\n\n  onFullScreenChange = () => {\n    this.setState({ fullscreen: isFullscreen() });\n  };\n\n  render () {\n    let ancestors, descendants;\n    const { isLoading, status, ancestorsIds, descendantsIds, intl, domain, multiColumn, pictureInPicture } = this.props;\n    const { fullscreen } = this.state;\n\n    if (isLoading) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    if (status === null) {\n      return (\n        <Column>\n          <ColumnBackButton multiColumn={multiColumn} />\n          <MissingIndicator />\n        </Column>\n      );\n    }\n\n    if (ancestorsIds && ancestorsIds.size > 0) {\n      ancestors = <div>{this.renderChildren(ancestorsIds)}</div>;\n    }\n\n    if (descendantsIds && descendantsIds.size > 0) {\n      descendants = <div>{this.renderChildren(descendantsIds)}</div>;\n    }\n\n    const isLocal = status.getIn(['account', 'acct'], '').indexOf('@') === -1;\n    const isIndexable = !status.getIn(['account', 'noindex']);\n\n    const handlers = {\n      moveUp: this.handleHotkeyMoveUp,\n      moveDown: this.handleHotkeyMoveDown,\n      reply: this.handleHotkeyReply,\n      favourite: this.handleHotkeyFavourite,\n      boost: this.handleHotkeyBoost,\n      mention: this.handleHotkeyMention,\n      openProfile: this.handleHotkeyOpenProfile,\n      toggleHidden: this.handleHotkeyToggleHidden,\n      toggleSensitive: this.handleHotkeyToggleSensitive,\n      openMedia: this.handleHotkeyOpenMedia,\n    };\n\n    return (\n      <Column bindToDocument={!multiColumn} label={intl.formatMessage(messages.detailedStatus)}>\n        <ColumnHeader\n          showBackButton\n          multiColumn={multiColumn}\n          extraButton={(\n            <button type='button' className='column-header__button' title={intl.formatMessage(status.get('hidden') ? messages.revealAll : messages.hideAll)} aria-label={intl.formatMessage(status.get('hidden') ? messages.revealAll : messages.hideAll)} onClick={this.handleToggleAll}><Icon id={status.get('hidden') ? 'eye-slash' : 'eye'} /></button>\n          )}\n        />\n\n        <ScrollContainer scrollKey='thread'>\n          <div className={classNames('scrollable', { fullscreen })} ref={this.setRef}>\n            {ancestors}\n\n            <HotKeys handlers={handlers}>\n              <div className={classNames('focusable', 'detailed-status__wrapper')} tabIndex='0' aria-label={textForScreenReader(intl, status, false)}>\n                <DetailedStatus\n                  key={`details-${status.get('id')}`}\n                  status={status}\n                  onOpenVideo={this.handleOpenVideo}\n                  onOpenMedia={this.handleOpenMedia}\n                  onReactionAdd={this.handleReactionAdd}\n                  onReactionRemove={this.handleReactionRemove}\n                  onToggleHidden={this.handleToggleHidden}\n                  onTranslate={this.handleTranslate}\n                  domain={domain}\n                  showMedia={this.state.showMedia}\n                  onToggleMediaVisibility={this.handleToggleMediaVisibility}\n                  pictureInPicture={pictureInPicture}\n                  emojiMap={this.props.emojiMap}\n                />\n\n                <ActionBar\n                  key={`action-bar-${status.get('id')}`}\n                  status={status}\n                  onReply={this.handleReplyClick}\n                  onFavourite={this.handleFavouriteClick}\n                  onReactionAdd={this.handleReactionAdd}\n                  onReblog={this.handleReblogClick}\n                  onBookmark={this.handleBookmarkClick}\n                  onDelete={this.handleDeleteClick}\n                  onEdit={this.handleEditClick}\n                  onDirect={this.handleDirectClick}\n                  onMention={this.handleMentionClick}\n                  onMute={this.handleMuteClick}\n                  onUnmute={this.handleUnmuteClick}\n                  onMuteConversation={this.handleConversationMuteClick}\n                  onBlock={this.handleBlockClick}\n                  onUnblock={this.handleUnblockClick}\n                  onBlockDomain={this.handleBlockDomainClick}\n                  onUnblockDomain={this.handleUnblockDomainClick}\n                  onReport={this.handleReport}\n                  onPin={this.handlePin}\n                  onEmbed={this.handleEmbed}\n                />\n              </div>\n            </HotKeys>\n\n            {descendants}\n          </div>\n        </ScrollContainer>\n\n        <Helmet>\n          <title>{titleFromStatus(status)}</title>\n          <meta name='robots' content={(isLocal && isIndexable) ? 'all' : 'noindex'} />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}