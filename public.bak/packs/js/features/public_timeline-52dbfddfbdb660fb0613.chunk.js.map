{"version":3,"sources":["webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/public_timeline/components/column_settings.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/public_timeline/containers/column_settings_container.js","webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/public_timeline/index.jsx"],"names":["ColumnSettings","injectIntl","_class","React","PureComponent","render","settings","onChange","this","props","_jsx","className","SettingToggle","settingPath","label","FormattedMessage","id","defaultMessage","connect","mapStateToProps","state","_ref","columnId","uuid","columns","getIn","index","findIndex","c","get","mapDispatchToProps","dispatch","_ref2","key","checked","changeColumnParams","changeSetting","messages","defineMessages","title","PublicTimeline","_dec","onlyMedia","onlyRemote","timelineState","hasUnread","_class2","constructor","arguments","handlePin","removeColumn","addColumn","other","handleMove","dir","moveColumn","handleHeaderClick","column","scrollTop","setRef","handleLoadMore","maxId","expandPublicTimeline","componentDidMount","signedIn","context","identity","disconnect","connectPublicStream","componentDidUpdate","prevProps","componentWillUnmount","intl","multiColumn","pinned","createElement","Column","bindToDocument","ref","formatMessage","ColumnHeader","icon","active","onPin","onMove","onClick","ColumnSettingsContainer","DismissableBanner","StatusListContainer","timelineId","onLoadMore","trackScroll","scrollKey","emptyMessage","Helmet","name","content","contextTypes","router","PropTypes","object","defaultProps"],"mappings":"gQAI0E,IAGpEA,EADUC,YAAUC,EAAX,cACcC,IAAMC,cASjCC,SACE,MAAM,SAAEC,EAAQ,SAAEC,GAAaC,KAAKC,MAEpC,OACEC,YAAA,gBACEA,YAAA,OAAKC,UAAU,6BAAsB,EACnCD,YAACE,IAAa,CAACN,SAAUA,EAAUO,YAAa,CAAC,QAAS,aAAcN,SAAUA,EAAUO,MAAOJ,YAACK,IAAgB,CAACC,GAAG,uCAAuCC,eAAe,iBAC9KP,YAACE,IAAa,CAACN,SAAUA,EAAUO,YAAa,CAAC,QAAS,cAAeN,SAAUA,EAAUO,MAAOJ,YAACK,IAAgB,CAACC,GAAG,wCAAwCC,eAAe,wBAMzLf,E,aCFcgB,I,MAAAA,qBAtBSC,CAACC,EAAKC,KAAoB,IAAlB,SAAEC,GAAUD,EAC1C,MAAME,EAAOD,EACPE,EAAUJ,EAAMK,MAAM,CAAC,WAAY,YACnCC,EAAQF,EAAQG,WAAUC,GAAKA,EAAEC,IAAI,UAAYN,IAEvD,MAAO,CACLjB,SAAWiB,GAAQG,GAAS,EAAKF,EAAQK,IAAIH,GAAOG,IAAI,UAAYT,EAAMK,MAAM,CAAC,WAAY,eAItEK,CAACC,EAAQC,KAAoB,IAAlB,SAAEV,GAAUU,EAChD,MAAO,CACLzB,SAAU0B,EAAKC,GAEXH,EADET,EACOa,YAAmBb,EAAUW,EAAKC,GAElCE,YAAc,CAAC,YAAaH,GAAMC,QAMpChB,CAA6ClB,G,6BCb5D,MAAMqC,EAAWC,YAAe,CAC9BC,MAAM,CAAD,0DAgBL,IAIIC,GAAcC,EAFJvB,mBAfQC,CAACC,EAAKC,KAAoB,IAAlB,SAAEC,GAAUD,EAC1C,MAAME,EAAOD,EACPE,EAAUJ,EAAMK,MAAM,CAAC,WAAY,YACnCC,EAAQF,EAAQG,WAAUC,GAAKA,EAAEC,IAAI,UAAYN,IACjDmB,EAAapB,GAAYI,GAAS,EAAKF,EAAQK,IAAIH,GAAOD,MAAM,CAAC,SAAU,QAAS,cAAgBL,EAAMK,MAAM,CAAC,WAAY,SAAU,QAAS,cAChJkB,EAAcrB,GAAYI,GAAS,EAAKF,EAAQK,IAAIH,GAAOD,MAAM,CAAC,SAAU,QAAS,eAAiBL,EAAMK,MAAM,CAAC,WAAY,SAAU,QAAS,eAClJmB,EAAgBxB,EAAMK,MAAM,CAAC,YAAc,UAAQiB,EAAY,SAAW,MAEhF,MAAO,CACLG,YAAaD,GAAiBA,EAAcf,IAAI,UAAY,EAC5Da,YACAC,iBAIoCF,EAAAvC,EACvCD,aAAU6C,EADI,cAEc3C,IAAMC,cAAc2C,cAAA,SAAAC,WAAA,KAqB/CC,UAAY,KACV,MAAM,SAAE3B,EAAQ,SAAES,EAAQ,UAAEW,EAAS,WAAEC,GAAenC,KAAKC,MAGzDsB,EADET,EACO4B,YAAa5B,GAEb6B,YAAUR,EAAa,SAAW,SAAU,CAAES,MAAO,CAAEV,YAAWC,kBAE7E,KAEFU,WAAcC,IACZ,MAAM,SAAEhC,EAAQ,SAAES,GAAavB,KAAKC,MACpCsB,EAASwB,YAAWjC,EAAUgC,KAC9B,KAEFE,kBAAoB,KAClBhD,KAAKiD,OAAOC,aACZ,KAsCFC,OAAS/B,IACPpB,KAAKiD,OAAS7B,GACd,KAEFgC,eAAiBC,IACf,MAAM,SAAE9B,EAAQ,UAAEW,EAAS,WAAEC,GAAenC,KAAKC,MAEjDsB,EAAS+B,YAAqB,CAAED,QAAOnB,YAAWC,iBA3CpDoB,oBACE,MAAM,SAAEhC,EAAQ,UAAEW,EAAS,WAAEC,GAAenC,KAAKC,OAC3C,SAAEuD,GAAaxD,KAAKyD,QAAQC,SAElCnC,EAAS+B,YAAqB,CAAEpB,YAAWC,gBAEvCqB,IACFxD,KAAK2D,WAAapC,EAASqC,YAAoB,CAAE1B,YAAWC,iBAIhE0B,mBAAoBC,GAClB,MAAM,SAAEN,GAAaxD,KAAKyD,QAAQC,SAElC,GAAII,EAAU5B,YAAclC,KAAKC,MAAMiC,WAAa4B,EAAU3B,aAAenC,KAAKC,MAAMkC,WAAY,CAClG,MAAM,SAAEZ,EAAQ,UAAEW,EAAS,WAAEC,GAAenC,KAAKC,MAE7CD,KAAK2D,YACP3D,KAAK2D,aAGPpC,EAAS+B,YAAqB,CAAEpB,YAAWC,gBAEvCqB,IACFxD,KAAK2D,WAAapC,EAASqC,YAAoB,CAAE1B,YAAWC,kBAKlE4B,uBACM/D,KAAK2D,aACP3D,KAAK2D,aACL3D,KAAK2D,WAAa,MActB9D,SACE,MAAM,KAAEmE,EAAI,SAAElD,EAAQ,UAAEuB,EAAS,YAAE4B,EAAW,UAAE/B,EAAS,WAAEC,GAAenC,KAAKC,MACzEiE,IAAWpD,EAEjB,OACEnB,IAAAwE,cAACC,IAAM,CAACC,gBAAiBJ,EAAaK,IAAKtE,KAAKmD,OAAQ7C,MAAO0D,EAAKO,cAAc1C,EAASE,QACzF7B,YAACsE,IAAY,CACXC,KAAK,QACLC,OAAQrC,EACRN,MAAOiC,EAAKO,cAAc1C,EAASE,OACnC4C,MAAO3E,KAAKyC,UACZmC,OAAQ5E,KAAK6C,WACbgC,QAAS7E,KAAKgD,kBACdkB,OAAQA,EACRD,YAAaA,QAAY,EAEzB/D,YAAC4E,EAAuB,CAAChE,SAAUA,KAGrCZ,YAAC6E,IAAiB,CAACvE,GAAG,wBAAiB,EACrCN,YAACK,IAAgB,CAACC,GAAG,qCAAqCC,eAAe,6IAG3EP,YAAC8E,IAAmB,CAClBC,WAAa,SAAQ9C,EAAa,UAAY,KAAKD,EAAY,SAAW,KAC1EgD,WAAYlF,KAAKoD,eACjB+B,aAAcjB,EACdkB,UAAY,mBAAkBtE,IAC9BuE,aAAcnF,YAACK,IAAgB,CAACC,GAAG,sBAAsBC,eAAe,+GACxE4D,gBAAiBJ,IAGnB/D,YAACoF,IAAM,UACLpF,YAAA,kBAAQ8D,EAAKO,cAAc1C,EAASE,QACpC7B,YAAA,QAAMqF,KAAK,SAASC,QAAQ,gBAMrClD,EA5HQmD,aAAe,CACpBC,OAAQC,IAAUC,OAClBlC,SAAUiC,IAAUC,QACrBtD,EAEMuD,aAAe,CACpB3D,WAAW,GATJxC,EAUR4C,KAAA5C","file":"js/features/public_timeline-52dbfddfbdb660fb0613.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport SettingToggle from '../../notifications/components/setting_toggle';\n\nexport default @injectIntl\nclass ColumnSettings extends React.PureComponent {\n\n  static propTypes = {\n    settings: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    columnId: PropTypes.string,\n  };\n\n  render () {\n    const { settings, onChange } = this.props;\n\n    return (\n      <div>\n        <div className='column-settings__row'>\n          <SettingToggle settings={settings} settingPath={['other', 'onlyMedia']} onChange={onChange} label={<FormattedMessage id='community.column_settings.media_only' defaultMessage='Media only' />} />\n          <SettingToggle settings={settings} settingPath={['other', 'onlyRemote']} onChange={onChange} label={<FormattedMessage id='community.column_settings.remote_only' defaultMessage='Remote only' />} />\n        </div>\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport ColumnSettings from '../components/column_settings';\nimport { changeSetting } from '../../../actions/settings';\nimport { changeColumnParams } from '../../../actions/columns';\n\nconst mapStateToProps = (state, { columnId }) => {\n  const uuid = columnId;\n  const columns = state.getIn(['settings', 'columns']);\n  const index = columns.findIndex(c => c.get('uuid') === uuid);\n\n  return {\n    settings: (uuid && index >= 0) ? columns.get(index).get('params') : state.getIn(['settings', 'public']),\n  };\n};\n\nconst mapDispatchToProps = (dispatch, { columnId }) => {\n  return {\n    onChange (key, checked) {\n      if (columnId) {\n        dispatch(changeColumnParams(columnId, key, checked));\n      } else {\n        dispatch(changeSetting(['public', ...key], checked));\n      }\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ColumnSettings);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport StatusListContainer from '../ui/containers/status_list_container';\nimport Column from '../../components/column';\nimport ColumnHeader from '../../components/column_header';\nimport { expandPublicTimeline } from '../../actions/timelines';\nimport { addColumn, removeColumn, moveColumn } from '../../actions/columns';\nimport ColumnSettingsContainer from './containers/column_settings_container';\nimport { connectPublicStream } from '../../actions/streaming';\nimport { Helmet } from 'react-helmet';\nimport DismissableBanner from 'mastodon/components/dismissable_banner';\n\nconst messages = defineMessages({\n  title: { id: 'column.public', defaultMessage: 'Federated timeline' },\n});\n\nconst mapStateToProps = (state, { columnId }) => {\n  const uuid = columnId;\n  const columns = state.getIn(['settings', 'columns']);\n  const index = columns.findIndex(c => c.get('uuid') === uuid);\n  const onlyMedia = (columnId && index >= 0) ? columns.get(index).getIn(['params', 'other', 'onlyMedia']) : state.getIn(['settings', 'public', 'other', 'onlyMedia']);\n  const onlyRemote = (columnId && index >= 0) ? columns.get(index).getIn(['params', 'other', 'onlyRemote']) : state.getIn(['settings', 'public', 'other', 'onlyRemote']);\n  const timelineState = state.getIn(['timelines', `public${onlyMedia ? ':media' : ''}`]);\n\n  return {\n    hasUnread: !!timelineState && timelineState.get('unread') > 0,\n    onlyMedia,\n    onlyRemote,\n  };\n};\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass PublicTimeline extends React.PureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n    identity: PropTypes.object,\n  };\n\n  static defaultProps = {\n    onlyMedia: false,\n  };\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    columnId: PropTypes.string,\n    multiColumn: PropTypes.bool,\n    hasUnread: PropTypes.bool,\n    onlyMedia: PropTypes.bool,\n    onlyRemote: PropTypes.bool,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch, onlyMedia, onlyRemote } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn(onlyRemote ? 'REMOTE' : 'PUBLIC', { other: { onlyMedia, onlyRemote } }));\n    }\n  };\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  };\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  };\n\n  componentDidMount () {\n    const { dispatch, onlyMedia, onlyRemote } = this.props;\n    const { signedIn } = this.context.identity;\n\n    dispatch(expandPublicTimeline({ onlyMedia, onlyRemote }));\n\n    if (signedIn) {\n      this.disconnect = dispatch(connectPublicStream({ onlyMedia, onlyRemote }));\n    }\n  }\n\n  componentDidUpdate (prevProps) {\n    const { signedIn } = this.context.identity;\n\n    if (prevProps.onlyMedia !== this.props.onlyMedia || prevProps.onlyRemote !== this.props.onlyRemote) {\n      const { dispatch, onlyMedia, onlyRemote } = this.props;\n\n      if (this.disconnect) {\n        this.disconnect();\n      }\n\n      dispatch(expandPublicTimeline({ onlyMedia, onlyRemote }));\n\n      if (signedIn) {\n        this.disconnect = dispatch(connectPublicStream({ onlyMedia, onlyRemote }));\n      }\n    }\n  }\n\n  componentWillUnmount () {\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  setRef = c => {\n    this.column = c;\n  };\n\n  handleLoadMore = maxId => {\n    const { dispatch, onlyMedia, onlyRemote } = this.props;\n\n    dispatch(expandPublicTimeline({ maxId, onlyMedia, onlyRemote }));\n  };\n\n  render () {\n    const { intl, columnId, hasUnread, multiColumn, onlyMedia, onlyRemote } = this.props;\n    const pinned = !!columnId;\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='globe'\n          active={hasUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n        >\n          <ColumnSettingsContainer columnId={columnId} />\n        </ColumnHeader>\n\n        <DismissableBanner id='public_timeline'>\n          <FormattedMessage id='dismissable_banner.public_timeline' defaultMessage='These are the most recent public posts from people on this and other servers of the decentralized network that this server knows about.' />\n        </DismissableBanner>\n\n        <StatusListContainer\n          timelineId={`public${onlyRemote ? ':remote' : ''}${onlyMedia ? ':media' : ''}`}\n          onLoadMore={this.handleLoadMore}\n          trackScroll={!pinned}\n          scrollKey={`public_timeline-${columnId}`}\n          emptyMessage={<FormattedMessage id='empty_column.public' defaultMessage='There is nothing here! Write something publicly, or manually follow users from other servers to fill it up' />}\n          bindToDocument={!multiColumn}\n        />\n\n        <Helmet>\n          <title>{intl.formatMessage(messages.title)}</title>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}