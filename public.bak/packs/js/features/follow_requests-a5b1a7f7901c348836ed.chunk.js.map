{"version":3,"sources":["webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/follow_requests/components/account_authorize.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/follow_requests/containers/account_authorize_container.js","webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/follow_requests/index.jsx"],"names":["messages","defineMessages","authorize","reject","AccountAuthorize","injectIntl","_class2","ImmutablePureComponent","render","intl","account","onAuthorize","onReject","this","props","content","__html","get","_jsx","className","Link","to","Avatar","size","DisplayName","dangerouslySetInnerHTML","IconButton","title","formatMessage","icon","onClick","propTypes","ImmutablePropTypes","map","isRequired","PropTypes","func","object","_class","connect","makeMapStateToProps","getAccount","makeGetAccount","mapStateToProps","state","id","mapDispatchToProps","dispatch","_ref","authorizeFollowRequest","rejectFollowRequest","heading","FollowRequests","accountIds","getIn","isLoading","hasMore","locked","me","domain","_dec","constructor","arguments","handleLoadMore","_debounce","expandFollowRequests","leading","componentWillMount","fetchFollowRequests","multiColumn","emptyMessage","FormattedMessage","defaultMessage","unlockedPrependMessage","values","Column","bindToDocument","ColumnBackButtonSlim","ScrollableList","scrollKey","onLoadMore","showLoading","prepend","AccountAuthorizeContainer","Helmet","name","params","bool","list","string"],"mappings":"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","file":"js/features/follow_requests-a5b1a7f7901c348836ed.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { Link } from 'react-router-dom';\nimport Avatar from '../../../components/avatar';\nimport DisplayName from '../../../components/display_name';\nimport IconButton from '../../../components/icon_button';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\nconst messages = defineMessages({\n  authorize: { id: 'follow_request.authorize', defaultMessage: 'Authorize' },\n  reject: { id: 'follow_request.reject', defaultMessage: 'Reject' },\n});\n\nexport default @injectIntl\nclass AccountAuthorize extends ImmutablePureComponent {\n\n  static propTypes = {\n    account: ImmutablePropTypes.map.isRequired,\n    onAuthorize: PropTypes.func.isRequired,\n    onReject: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  render () {\n    const { intl, account, onAuthorize, onReject } = this.props;\n    const content = { __html: account.get('note_emojified') };\n\n    return (\n      <div className='account-authorize__wrapper'>\n        <div className='account-authorize'>\n          <Link to={`/@${account.get('acct')}`} className='detailed-status__display-name'>\n            <div className='account-authorize__avatar'><Avatar account={account} size={48} /></div>\n            <DisplayName account={account} />\n          </Link>\n\n          <div className='account__header__content translate' dangerouslySetInnerHTML={content} />\n        </div>\n\n        <div className='account--panel'>\n          <div className='account--panel__button'><IconButton title={intl.formatMessage(messages.authorize)} icon='check' onClick={onAuthorize} /></div>\n          <div className='account--panel__button'><IconButton title={intl.formatMessage(messages.reject)} icon='times' onClick={onReject} /></div>\n        </div>\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport { makeGetAccount } from '../../../selectors';\nimport AccountAuthorize from '../components/account_authorize';\nimport { authorizeFollowRequest, rejectFollowRequest } from '../../../actions/accounts';\n\nconst makeMapStateToProps = () => {\n  const getAccount = makeGetAccount();\n\n  const mapStateToProps = (state, props) => ({\n    account: getAccount(state, props.id),\n  });\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = (dispatch, { id }) => ({\n  onAuthorize () {\n    dispatch(authorizeFollowRequest(id));\n  },\n\n  onReject () {\n    dispatch(rejectFollowRequest(id));\n  },\n});\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(AccountAuthorize);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { debounce } from 'lodash';\nimport Column from '../ui/components/column';\nimport ColumnBackButtonSlim from '../../components/column_back_button_slim';\nimport AccountAuthorizeContainer from './containers/account_authorize_container';\nimport { fetchFollowRequests, expandFollowRequests } from '../../actions/accounts';\nimport ScrollableList from '../../components/scrollable_list';\nimport { me } from '../../initial_state';\nimport { Helmet } from 'react-helmet';\n\nconst messages = defineMessages({\n  heading: { id: 'column.follow_requests', defaultMessage: 'Follow requests' },\n});\n\nconst mapStateToProps = state => ({\n  accountIds: state.getIn(['user_lists', 'follow_requests', 'items']),\n  isLoading: state.getIn(['user_lists', 'follow_requests', 'isLoading'], true),\n  hasMore: !!state.getIn(['user_lists', 'follow_requests', 'next']),\n  locked: !!state.getIn(['accounts', me, 'locked']),\n  domain: state.getIn(['meta', 'domain']),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass FollowRequests extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    hasMore: PropTypes.bool,\n    isLoading: PropTypes.bool,\n    accountIds: ImmutablePropTypes.list,\n    locked: PropTypes.bool,\n    domain: PropTypes.string,\n    intl: PropTypes.object.isRequired,\n    multiColumn: PropTypes.bool,\n  };\n\n  componentWillMount () {\n    this.props.dispatch(fetchFollowRequests());\n  }\n\n  handleLoadMore = debounce(() => {\n    this.props.dispatch(expandFollowRequests());\n  }, 300, { leading: true });\n\n  render () {\n    const { intl, accountIds, hasMore, multiColumn, locked, domain, isLoading } = this.props;\n\n    const emptyMessage = <FormattedMessage id='empty_column.follow_requests' defaultMessage=\"You don't have any follow requests yet. When you receive one, it will show up here.\" />;\n    const unlockedPrependMessage = !locked && accountIds.size > 0 && (\n      <div className='follow_requests-unlocked_explanation'>\n        <FormattedMessage\n          id='follow_requests.unlocked_explanation'\n          defaultMessage='Even though your account is not locked, the {domain} staff thought you might want to review follow requests from these accounts manually.'\n          values={{ domain: domain }}\n        />\n      </div>\n    );\n\n    return (\n      <Column bindToDocument={!multiColumn} icon='user-plus' heading={intl.formatMessage(messages.heading)}>\n        <ColumnBackButtonSlim />\n        <ScrollableList\n          scrollKey='follow_requests'\n          onLoadMore={this.handleLoadMore}\n          hasMore={hasMore}\n          isLoading={isLoading}\n          showLoading={isLoading && accountIds.size === 0}\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n          prepend={unlockedPrependMessage}\n        >\n          {accountIds.map(id =>\n            <AccountAuthorizeContainer key={id} id={id} />,\n          )}\n        </ScrollableList>\n\n        <Helmet>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}