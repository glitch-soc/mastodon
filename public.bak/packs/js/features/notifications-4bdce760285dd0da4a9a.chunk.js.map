{"version":3,"sources":["webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/notifications/components/report.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/notifications/components/follow_request.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/notifications/containers/follow_request_container.js","webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/notifications/components/notification.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/notifications/containers/notification_container.js","webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/notifications/components/clear_column_button.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/notifications/components/grant_permission_button.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/notifications/components/column_settings.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/notifications/containers/column_settings_container.js","webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/notifications/components/filter_bar.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/notifications/containers/filter_bar_container.js","webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/notifications/components/notifications_permission_banner.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/notifications/index.jsx"],"names":["messages","defineMessages","openReport","other","spam","violation","Report","injectIntl","_class2","ImmutablePureComponent","render","intl","hidden","report","account","this","props","_jsx","Fragment","get","className","AvatarOverlay","friend","RelativeTimestamp","timestamp","short","FormattedMessage","id","defaultMessage","values","count","size","formatMessage","href","target","rel","propTypes","ImmutablePropTypes","map","isRequired","PropTypes","bool","object","_class","authorize","reject","FollowRequest","onAuthorize","onReject","Link","title","to","Avatar","DisplayName","IconButton","icon","onClick","func","connect","makeMapStateToProps","getAccount","makeGetAccount","mapStateToProps","state","mapDispatchToProps","dispatch","_ref","authorizeFollowRequest","rejectFollowRequest","favourite","reaction","follow","ownPoll","poll","reblog","status","update","adminSignUp","adminReport","notificationForScreenReader","message","output","push","formatDate","hour","minute","month","day","join","Notification","constructor","arguments","handleMoveUp","notification","onMoveUp","handleMoveDown","onMoveDown","handleOpen","context","router","history","getIn","handleOpenProfile","handleMention","e","preventDefault","onMention","handleHotkeyFavourite","onFavourite","handleHotkeyBoost","onReblog","handleHotkeyToggleHidden","onToggleHidden","getHandlers","reply","boost","mention","open","openProfile","moveUp","moveDown","toggleHidden","renderFollow","link","unread","HotKeys","handlers","classNames","tabIndex","name","Icon","fixedWidth","AccountContainer","renderFollowRequest","FollowRequestContainer","withNote","renderMention","StatusContainer","withDismiss","contextType","getScrollPosition","updateScrollBottom","cachedMediaWidth","cacheMediaWidth","renderFavourite","muted","renderReaction","renderReblog","renderStatus","renderUpdate","renderPoll","me","renderAdminSignUp","renderAdminReport","targetAccount","targetDisplayNameHtml","__html","targetLink","dangerouslySetInnerHTML","displayNameHtml","contextTypes","number","getNotification","makeGetNotification","getStatus","makeGetStatus","getReport","makeGetReport","accountId","mentionCompose","onModalReblog","privacy","unreblog","shiftKey","boostModal","initBoostModal","unfavourite","revealStatus","hideStatus","ClearColumnButton","React","PureComponent","GrantPermissionButton","ColumnSettings","onPushChange","path","checked","onChange","settings","pushSettings","onClear","alertsEnabled","browserSupport","browserPermission","onRequestNotificationPermission","unreadMarkersShowStr","filterBarShowStr","filterAdvancedStr","alertStr","showStr","soundStr","showPushSettings","pushStr","role","SettingToggle","prefix","settingPath","label","disabled","identity","permissions","PERMISSION_MANAGE_USERS","PERMISSION_MANAGE_REPORTS","clearMessage","clearConfirm","permissionDenied","includes","window","permission","requestBrowserPermission","changePushNotifications","slice","showAlert","undefined","changeSetting","setFilter","openModal","confirm","onConfirm","clearNotifications","tooltips","mentions","favourites","reactions","boosts","polls","follows","statuses","FilterBar","notificationType","selectFilter","selectedFilter","advancedMode","newActiveFilter","close","NotificationsPermissionBanner","_dec","handleClick","handleClose","Button","markAsRead","getExcludedTypes","createSelector","shows","ImmutableList","filter","item","keys","getNotifications","showFilterBar","allowedType","excludedTypes","notifications","filterNot","Notifications","isLoading","isUnread","hasMore","numPending","lastReadId","canMarkAsRead","some","compareId","needsNotificationPermission","handleLoadGap","maxId","expandNotifications","handleLoadOlder","_debounce","last","leading","handleLoadPending","loadPending","handleScrollToTop","scrollTopNotifications","handleScroll","handlePin","columnId","removeColumn","addColumn","handleMove","dir","moveColumn","handleHeaderClick","column","scrollTop","setColumnRef","c","elementIndex","findIndex","_selectChild","handleMarkAsRead","markNotificationsAsRead","submitMarkers","immediate","componentWillMount","mountNotifications","componentWillUnmount","cancel","unmountNotifications","index","align_top","container","node","element","querySelector","offsetTop","scrollIntoView","clientHeight","offsetHeight","focus","multiColumn","pinned","emptyMessage","signedIn","scrollableContent","filterBarContainer","FilterBarContainer","scrollContainer","LoadGap","NotificationContainer","ScrollableList","scrollKey","trackScroll","showLoading","prepend","alwaysPrepend","onLoadMore","onLoadPending","onScrollToTop","onScroll","bindToDocument","NotSignedInIndicator","extraButton","createElement","Column","ref","ColumnHeader","active","onPin","onMove","ColumnSettingsContainer","Helmet","content","defaultProps"],"mappings":"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","file":"js/features/notifications-4bdce760285dd0da4a9a.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport AvatarOverlay from 'mastodon/components/avatar_overlay';\nimport RelativeTimestamp from 'mastodon/components/relative_timestamp';\n\nconst messages = defineMessages({\n  openReport: { id: 'report_notification.open', defaultMessage: 'Open report' },\n  other: { id: 'report_notification.categories.other', defaultMessage: 'Other' },\n  spam: { id: 'report_notification.categories.spam', defaultMessage: 'Spam' },\n  violation: { id: 'report_notification.categories.violation', defaultMessage: 'Rule violation' },\n});\n\nexport default @injectIntl\nclass Report extends ImmutablePureComponent {\n\n  static propTypes = {\n    account: ImmutablePropTypes.map.isRequired,\n    report: ImmutablePropTypes.map.isRequired,\n    hidden: PropTypes.bool,\n    intl: PropTypes.object.isRequired,\n  };\n\n  render () {\n    const { intl, hidden, report, account } = this.props;\n\n    if (!report) {\n      return null;\n    }\n\n    if (hidden) {\n      return (\n        <Fragment>\n          {report.get('id')}\n        </Fragment>\n      );\n    }\n\n    return (\n      <div className='notification__report'>\n        <div className='notification__report__avatar'>\n          <AvatarOverlay account={report.get('target_account')} friend={account} />\n        </div>\n\n        <div className='notification__report__details'>\n          <div>\n            <RelativeTimestamp timestamp={report.get('created_at')} short={false} /> · <FormattedMessage id='report_notification.attached_statuses' defaultMessage='{count, plural, one {{count} post} other {{count} posts}} attached' values={{ count: report.get('status_ids').size }} />\n            <br />\n            <strong>{intl.formatMessage(messages[report.get('category')])}</strong>\n          </div>\n\n          <div className='notification__report__actions'>\n            <a href={`/admin/reports/${report.get('id')}`} className='button' target='_blank' rel='noopener noreferrer'>{intl.formatMessage(messages.openReport)}</a>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n","import React, { Fragment } from 'react';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport Avatar from 'mastodon/components/avatar';\nimport DisplayName from 'mastodon/components/display_name';\nimport { Link } from 'react-router-dom';\nimport IconButton from 'mastodon/components/icon_button';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\nconst messages = defineMessages({\n  authorize: { id: 'follow_request.authorize', defaultMessage: 'Authorize' },\n  reject: { id: 'follow_request.reject', defaultMessage: 'Reject' },\n});\n\nexport default @injectIntl\nclass FollowRequest extends ImmutablePureComponent {\n\n  static propTypes = {\n    account: ImmutablePropTypes.map.isRequired,\n    onAuthorize: PropTypes.func.isRequired,\n    onReject: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  render () {\n    const { intl, hidden, account, onAuthorize, onReject } = this.props;\n\n    if (!account) {\n      return <div />;\n    }\n\n    if (hidden) {\n      return (\n        <Fragment>\n          {account.get('display_name')}\n          {account.get('username')}\n        </Fragment>\n      );\n    }\n\n    return (\n      <div className='account'>\n        <div className='account__wrapper'>\n          <Link key={account.get('id')} className='account__display-name' title={account.get('acct')} to={`/@${account.get('acct')}`}>\n            <div className='account__avatar-wrapper'><Avatar account={account} size={36} /></div>\n            <DisplayName account={account} />\n          </Link>\n\n          <div className='account__relationship'>\n            <IconButton title={intl.formatMessage(messages.authorize)} icon='check' onClick={onAuthorize} />\n            <IconButton title={intl.formatMessage(messages.reject)} icon='times' onClick={onReject} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport { makeGetAccount } from 'mastodon/selectors';\nimport FollowRequest from '../components/follow_request';\nimport { authorizeFollowRequest, rejectFollowRequest } from 'mastodon/actions/accounts';\n\nconst makeMapStateToProps = () => {\n  const getAccount = makeGetAccount();\n\n  const mapStateToProps = (state, props) => ({\n    account: getAccount(state, props.id),\n  });\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = (dispatch, { id }) => ({\n  onAuthorize () {\n    dispatch(authorizeFollowRequest(id));\n  },\n\n  onReject () {\n    dispatch(rejectFollowRequest(id));\n  },\n});\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(FollowRequest);\n","import React from 'react';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { injectIntl, FormattedMessage, defineMessages } from 'react-intl';\nimport { HotKeys } from 'react-hotkeys';\nimport PropTypes from 'prop-types';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { me } from 'mastodon/initial_state';\nimport StatusContainer from 'mastodon/containers/status_container';\nimport AccountContainer from 'mastodon/containers/account_container';\nimport Report from './report';\nimport FollowRequestContainer from '../containers/follow_request_container';\nimport Icon from 'mastodon/components/icon';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\n\nconst messages = defineMessages({\n  favourite: { id: 'notification.favourite', defaultMessage: '{name} favourited your status' },\n  reaction: { id: 'notification.reaction', defaultMessage: '{name} reacted to your status' },\n  follow: { id: 'notification.follow', defaultMessage: '{name} followed you' },\n  ownPoll: { id: 'notification.own_poll', defaultMessage: 'Your poll has ended' },\n  poll: { id: 'notification.poll', defaultMessage: 'A poll you have voted in has ended' },\n  reblog: { id: 'notification.reblog', defaultMessage: '{name} boosted your status' },\n  status: { id: 'notification.status', defaultMessage: '{name} just posted' },\n  update: { id: 'notification.update', defaultMessage: '{name} edited a post' },\n  adminSignUp: { id: 'notification.admin.sign_up', defaultMessage: '{name} signed up' },\n  adminReport: { id: 'notification.admin.report', defaultMessage: '{name} reported {target}' },\n});\n\nconst notificationForScreenReader = (intl, message, timestamp) => {\n  const output = [message];\n\n  output.push(intl.formatDate(timestamp, { hour: '2-digit', minute: '2-digit', month: 'short', day: 'numeric' }));\n\n  return output.join(', ');\n};\n\nexport default @injectIntl\nclass Notification extends ImmutablePureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    notification: ImmutablePropTypes.map.isRequired,\n    hidden: PropTypes.bool,\n    onMoveUp: PropTypes.func.isRequired,\n    onMoveDown: PropTypes.func.isRequired,\n    onMention: PropTypes.func.isRequired,\n    onFavourite: PropTypes.func.isRequired,\n    onReblog: PropTypes.func.isRequired,\n    onToggleHidden: PropTypes.func.isRequired,\n    status: ImmutablePropTypes.map,\n    intl: PropTypes.object.isRequired,\n    getScrollPosition: PropTypes.func,\n    updateScrollBottom: PropTypes.func,\n    cacheMediaWidth: PropTypes.func,\n    cachedMediaWidth: PropTypes.number,\n    unread: PropTypes.bool,\n  };\n\n  handleMoveUp = () => {\n    const { notification, onMoveUp } = this.props;\n    onMoveUp(notification.get('id'));\n  };\n\n  handleMoveDown = () => {\n    const { notification, onMoveDown } = this.props;\n    onMoveDown(notification.get('id'));\n  };\n\n  handleOpen = () => {\n    const { notification } = this.props;\n\n    if (notification.get('status')) {\n      this.context.router.history.push(`/@${notification.getIn(['status', 'account', 'acct'])}/${notification.get('status')}`);\n    } else {\n      this.handleOpenProfile();\n    }\n  };\n\n  handleOpenProfile = () => {\n    const { notification } = this.props;\n    this.context.router.history.push(`/@${notification.getIn(['account', 'acct'])}`);\n  };\n\n  handleMention = e => {\n    e.preventDefault();\n\n    const { notification, onMention } = this.props;\n    onMention(notification.get('account'), this.context.router.history);\n  };\n\n  handleHotkeyFavourite = () => {\n    const { status } = this.props;\n    if (status) this.props.onFavourite(status);\n  };\n\n  handleHotkeyBoost = e => {\n    const { status } = this.props;\n    if (status) this.props.onReblog(status, e);\n  };\n\n  handleHotkeyToggleHidden = () => {\n    const { status } = this.props;\n    if (status) this.props.onToggleHidden(status);\n  };\n\n  getHandlers () {\n    return {\n      reply: this.handleMention,\n      favourite: this.handleHotkeyFavourite,\n      boost: this.handleHotkeyBoost,\n      mention: this.handleMention,\n      open: this.handleOpen,\n      openProfile: this.handleOpenProfile,\n      moveUp: this.handleMoveUp,\n      moveDown: this.handleMoveDown,\n      toggleHidden: this.handleHotkeyToggleHidden,\n    };\n  }\n\n  renderFollow (notification, account, link) {\n    const { intl, unread } = this.props;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-follow focusable', { unread })} tabIndex='0' aria-label={notificationForScreenReader(intl, intl.formatMessage(messages.follow, { name: account.get('acct') }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='user-plus' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.follow' defaultMessage='{name} followed you' values={{ name: link }} />\n            </span>\n          </div>\n\n          <AccountContainer id={account.get('id')} hidden={this.props.hidden} />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderFollowRequest (notification, account, link) {\n    const { intl, unread } = this.props;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-follow-request focusable', { unread })} tabIndex='0' aria-label={notificationForScreenReader(intl, intl.formatMessage({ id: 'notification.follow_request', defaultMessage: '{name} has requested to follow you' }, { name: account.get('acct') }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='user' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.follow_request' defaultMessage='{name} has requested to follow you' values={{ name: link }} />\n            </span>\n          </div>\n\n          <FollowRequestContainer id={account.get('id')} withNote={false} hidden={this.props.hidden} />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderMention (notification) {\n    return (\n      <StatusContainer\n        id={notification.get('status')}\n        withDismiss\n        hidden={this.props.hidden}\n        onMoveDown={this.handleMoveDown}\n        onMoveUp={this.handleMoveUp}\n        contextType='notifications'\n        getScrollPosition={this.props.getScrollPosition}\n        updateScrollBottom={this.props.updateScrollBottom}\n        cachedMediaWidth={this.props.cachedMediaWidth}\n        cacheMediaWidth={this.props.cacheMediaWidth}\n        unread={this.props.unread}\n      />\n    );\n  }\n\n  renderFavourite (notification, link) {\n    const { intl, unread } = this.props;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-favourite focusable', { unread })} tabIndex='0' aria-label={notificationForScreenReader(intl, intl.formatMessage(messages.favourite, { name: notification.getIn(['account', 'acct']) }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='star' className='star-icon' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.favourite' defaultMessage='{name} favourited your status' values={{ name: link }} />\n            </span>\n          </div>\n\n          <StatusContainer\n            id={notification.get('status')}\n            account={notification.get('account')}\n            muted\n            withDismiss\n            hidden={!!this.props.hidden}\n            getScrollPosition={this.props.getScrollPosition}\n            updateScrollBottom={this.props.updateScrollBottom}\n            cachedMediaWidth={this.props.cachedMediaWidth}\n            cacheMediaWidth={this.props.cacheMediaWidth}\n          />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderReaction (notification, link) {\n    const { intl, unread } = this.props;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-reaction focusable', { unread })} tabIndex='0' aria-label={notificationForScreenReader(intl, intl.formatMessage(messages.reaction, { name: notification.getIn(['account', 'acct']) }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='plus' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.reaction' defaultMessage='{name} reacted to your status' values={{ name: link }} />\n            </span>\n          </div>\n\n          <StatusContainer\n            id={notification.get('status')}\n            account={notification.get('account')}\n            muted\n            withDismiss\n            hidden={this.props.hidden}\n            getScrollPosition={this.props.getScrollPosition}\n            updateScrollBottom={this.props.updateScrollBottom}\n            cachedMediaWidth={this.props.cachedMediaWidth}\n            cacheMediaWidth={this.props.cacheMediaWidth}\n          />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderReblog (notification, link) {\n    const { intl, unread } = this.props;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-reblog focusable', { unread })} tabIndex='0' aria-label={notificationForScreenReader(intl, intl.formatMessage(messages.reblog, { name: notification.getIn(['account', 'acct']) }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='retweet' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.reblog' defaultMessage='{name} boosted your status' values={{ name: link }} />\n            </span>\n          </div>\n\n          <StatusContainer\n            id={notification.get('status')}\n            account={notification.get('account')}\n            muted\n            withDismiss\n            hidden={this.props.hidden}\n            getScrollPosition={this.props.getScrollPosition}\n            updateScrollBottom={this.props.updateScrollBottom}\n            cachedMediaWidth={this.props.cachedMediaWidth}\n            cacheMediaWidth={this.props.cacheMediaWidth}\n          />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderStatus (notification, link) {\n    const { intl, unread, status } = this.props;\n\n    if (!status) {\n      return null;\n    }\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-status focusable', { unread })} tabIndex='0' aria-label={notificationForScreenReader(intl, intl.formatMessage(messages.status, { name: notification.getIn(['account', 'acct']) }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='home' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.status' defaultMessage='{name} just posted' values={{ name: link }} />\n            </span>\n          </div>\n\n          <StatusContainer\n            id={notification.get('status')}\n            account={notification.get('account')}\n            contextType='notifications'\n            muted\n            withDismiss\n            hidden={this.props.hidden}\n            getScrollPosition={this.props.getScrollPosition}\n            updateScrollBottom={this.props.updateScrollBottom}\n            cachedMediaWidth={this.props.cachedMediaWidth}\n            cacheMediaWidth={this.props.cacheMediaWidth}\n          />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderUpdate (notification, link) {\n    const { intl, unread, status } = this.props;\n\n    if (!status) {\n      return null;\n    }\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-update focusable', { unread })} tabIndex='0' aria-label={notificationForScreenReader(intl, intl.formatMessage(messages.update, { name: notification.getIn(['account', 'acct']) }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='pencil' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.update' defaultMessage='{name} edited a post' values={{ name: link }} />\n            </span>\n          </div>\n\n          <StatusContainer\n            id={notification.get('status')}\n            account={notification.get('account')}\n            contextType='notifications'\n            muted\n            withDismiss\n            hidden={this.props.hidden}\n            getScrollPosition={this.props.getScrollPosition}\n            updateScrollBottom={this.props.updateScrollBottom}\n            cachedMediaWidth={this.props.cachedMediaWidth}\n            cacheMediaWidth={this.props.cacheMediaWidth}\n          />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderPoll (notification, account) {\n    const { intl, unread, status } = this.props;\n    const ownPoll  = me === account.get('id');\n    const message  = ownPoll ? intl.formatMessage(messages.ownPoll) : intl.formatMessage(messages.poll);\n\n    if (!status) {\n      return null;\n    }\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-poll focusable', { unread })} tabIndex='0' aria-label={notificationForScreenReader(intl, message, notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='tasks' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              {ownPoll ? (\n                <FormattedMessage id='notification.own_poll' defaultMessage='Your poll has ended' />\n              ) : (\n                <FormattedMessage id='notification.poll' defaultMessage='A poll you have voted in has ended' />\n              )}\n            </span>\n          </div>\n\n          <StatusContainer\n            id={notification.get('status')}\n            account={account}\n            contextType='notifications'\n            muted\n            withDismiss\n            hidden={this.props.hidden}\n            getScrollPosition={this.props.getScrollPosition}\n            updateScrollBottom={this.props.updateScrollBottom}\n            cachedMediaWidth={this.props.cachedMediaWidth}\n            cacheMediaWidth={this.props.cacheMediaWidth}\n          />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderAdminSignUp (notification, account, link) {\n    const { intl, unread } = this.props;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-admin-sign-up focusable', { unread })} tabIndex='0' aria-label={notificationForScreenReader(intl, intl.formatMessage(messages.adminSignUp, { name: account.get('acct') }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='user-plus' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.admin.sign_up' defaultMessage='{name} signed up' values={{ name: link }} />\n            </span>\n          </div>\n\n          <AccountContainer id={account.get('id')} hidden={this.props.hidden} />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderAdminReport (notification, account, link) {\n    const { intl, unread, report } = this.props;\n\n    if (!report) {\n      return null;\n    }\n\n    const targetAccount = report.get('target_account');\n    const targetDisplayNameHtml = { __html: targetAccount.get('display_name_html') };\n    const targetLink = <bdi><Link className='notification__display-name' title={targetAccount.get('acct')} to={`/@${targetAccount.get('acct')}`} dangerouslySetInnerHTML={targetDisplayNameHtml} /></bdi>;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-admin-report focusable', { unread })} tabIndex='0' aria-label={notificationForScreenReader(intl, intl.formatMessage(messages.adminReport, { name: account.get('acct'), target: notification.getIn(['report', 'target_account', 'acct']) }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='flag' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.admin.report' defaultMessage='{name} reported {target}' values={{ name: link, target: targetLink }} />\n            </span>\n          </div>\n\n          <Report account={account} report={notification.get('report')} hidden={this.props.hidden} />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  render () {\n    const { notification } = this.props;\n    const account          = notification.get('account');\n    const displayNameHtml  = { __html: account.get('display_name_html') };\n    const link             = <bdi><Link className='notification__display-name' href={`/@${account.get('acct')}`} title={account.get('acct')} to={`/@${account.get('acct')}`} dangerouslySetInnerHTML={displayNameHtml} /></bdi>;\n\n    switch(notification.get('type')) {\n    case 'follow':\n      return this.renderFollow(notification, account, link);\n    case 'follow_request':\n      return this.renderFollowRequest(notification, account, link);\n    case 'mention':\n      return this.renderMention(notification);\n    case 'favourite':\n      return this.renderFavourite(notification, link);\n    case 'reaction':\n      return this.renderReaction(notification, link);\n    case 'reblog':\n      return this.renderReblog(notification, link);\n    case 'status':\n      return this.renderStatus(notification, link);\n    case 'update':\n      return this.renderUpdate(notification, link);\n    case 'poll':\n      return this.renderPoll(notification, account);\n    case 'admin.sign_up':\n      return this.renderAdminSignUp(notification, account, link);\n    case 'admin.report':\n      return this.renderAdminReport(notification, account, link);\n    }\n\n    return null;\n  }\n\n}\n","import { connect } from 'react-redux';\nimport { makeGetNotification, makeGetStatus, makeGetReport } from '../../../selectors';\nimport Notification from '../components/notification';\nimport { initBoostModal } from '../../../actions/boosts';\nimport { mentionCompose } from '../../../actions/compose';\nimport {\n  reblog,\n  favourite,\n  unreblog,\n  unfavourite,\n} from '../../../actions/interactions';\nimport {\n  hideStatus,\n  revealStatus,\n} from '../../../actions/statuses';\nimport { boostModal } from '../../../initial_state';\n\nconst makeMapStateToProps = () => {\n  const getNotification = makeGetNotification();\n  const getStatus = makeGetStatus();\n  const getReport = makeGetReport();\n\n  const mapStateToProps = (state, props) => {\n    const notification = getNotification(state, props.notification, props.accountId);\n    return {\n      notification: notification,\n      status: notification.get('status') ? getStatus(state, { id: notification.get('status'), contextType: 'notifications' }) : null,\n      report: notification.get('report') ? getReport(state, notification.get('report'), notification.getIn(['report', 'target_account', 'id'])) : null,\n    };\n  };\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onMention: (account, router) => {\n    dispatch(mentionCompose(account, router));\n  },\n\n  onModalReblog (status, privacy) {\n    dispatch(reblog(status, privacy));\n  },\n\n  onReblog (status, e) {\n    if (status.get('reblogged')) {\n      dispatch(unreblog(status));\n    } else {\n      if (e.shiftKey || !boostModal) {\n        this.onModalReblog(status);\n      } else {\n        dispatch(initBoostModal({ status, onReblog: this.onModalReblog }));\n      }\n    }\n  },\n\n  onFavourite (status) {\n    if (status.get('favourited')) {\n      dispatch(unfavourite(status));\n    } else {\n      dispatch(favourite(status));\n    }\n  },\n\n  onToggleHidden (status) {\n    if (status.get('hidden')) {\n      dispatch(revealStatus(status.get('id')));\n    } else {\n      dispatch(hideStatus(status.get('id')));\n    }\n  },\n});\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(Notification);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport Icon from 'mastodon/components/icon';\n\nexport default class ClearColumnButton extends React.PureComponent {\n\n  static propTypes = {\n    onClick: PropTypes.func.isRequired,\n  };\n\n  render () {\n    return (\n      <button className='text-btn column-header__setting-btn' tabIndex='0' onClick={this.props.onClick}><Icon id='eraser' /> <FormattedMessage id='notifications.clear' defaultMessage='Clear notifications' /></button>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\n\nexport default class GrantPermissionButton extends React.PureComponent {\n\n  static propTypes = {\n    onClick: PropTypes.func.isRequired,\n  };\n\n  render () {\n    return (\n      <button className='text-btn column-header__permission-btn' tabIndex='0' onClick={this.props.onClick}>\n        <FormattedMessage id='notifications.grant_permission' defaultMessage='Grant permission.' />\n      </button>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { FormattedMessage } from 'react-intl';\nimport ClearColumnButton from './clear_column_button';\nimport GrantPermissionButton from './grant_permission_button';\nimport SettingToggle from './setting_toggle';\nimport { PERMISSION_MANAGE_USERS, PERMISSION_MANAGE_REPORTS } from 'mastodon/permissions';\n\nexport default class ColumnSettings extends React.PureComponent {\n\n  static contextTypes = {\n    identity: PropTypes.object,\n  };\n\n  static propTypes = {\n    settings: ImmutablePropTypes.map.isRequired,\n    pushSettings: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    onClear: PropTypes.func.isRequired,\n    onRequestNotificationPermission: PropTypes.func,\n    alertsEnabled: PropTypes.bool,\n    browserSupport: PropTypes.bool,\n    browserPermission: PropTypes.string,\n  };\n\n  onPushChange = (path, checked) => {\n    this.props.onChange(['push', ...path], checked);\n  };\n\n  render () {\n    const { settings, pushSettings, onChange, onClear, alertsEnabled, browserSupport, browserPermission, onRequestNotificationPermission } = this.props;\n\n    const unreadMarkersShowStr = <FormattedMessage id='notifications.column_settings.unread_notifications.highlight' defaultMessage='Highlight unread notifications' />;\n    const filterBarShowStr = <FormattedMessage id='notifications.column_settings.filter_bar.show_bar' defaultMessage='Show filter bar' />;\n    const filterAdvancedStr = <FormattedMessage id='notifications.column_settings.filter_bar.advanced' defaultMessage='Display all categories' />;\n    const alertStr = <FormattedMessage id='notifications.column_settings.alert' defaultMessage='Desktop notifications' />;\n    const showStr = <FormattedMessage id='notifications.column_settings.show' defaultMessage='Show in column' />;\n    const soundStr = <FormattedMessage id='notifications.column_settings.sound' defaultMessage='Play sound' />;\n\n    const showPushSettings = pushSettings.get('browserSupport') && pushSettings.get('isSubscribed');\n    const pushStr = showPushSettings && <FormattedMessage id='notifications.column_settings.push' defaultMessage='Push notifications' />;\n\n    return (\n      <div>\n        {alertsEnabled && browserSupport && browserPermission === 'denied' && (\n          <div className='column-settings__row column-settings__row--with-margin'>\n            <span className='warning-hint'><FormattedMessage id='notifications.permission_denied' defaultMessage='Desktop notifications are unavailable due to previously denied browser permissions request' /></span>\n          </div>\n        )}\n\n        {alertsEnabled && browserSupport && browserPermission === 'default' && (\n          <div className='column-settings__row column-settings__row--with-margin'>\n            <span className='warning-hint'>\n              <FormattedMessage id='notifications.permission_required' defaultMessage='Desktop notifications are unavailable because the required permission has not been granted.' /> <GrantPermissionButton onClick={onRequestNotificationPermission} />\n            </span>\n          </div>\n        )}\n\n        <div className='column-settings__row'>\n          <ClearColumnButton onClick={onClear} />\n        </div>\n\n        <div role='group' aria-labelledby='notifications-unread-markers'>\n          <span id='notifications-unread-markers' className='column-settings__section'>\n            <FormattedMessage id='notifications.column_settings.unread_notifications.category' defaultMessage='Unread notifications' />\n          </span>\n\n          <div className='column-settings__row'>\n            <SettingToggle id='unread-notification-markers' prefix='notifications' settings={settings} settingPath={['showUnread']} onChange={onChange} label={unreadMarkersShowStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-filter-bar'>\n          <span id='notifications-filter-bar' className='column-settings__section'>\n            <FormattedMessage id='notifications.column_settings.filter_bar.category' defaultMessage='Quick filter bar' />\n          </span>\n\n          <div className='column-settings__row'>\n            <SettingToggle id='show-filter-bar' prefix='notifications' settings={settings} settingPath={['quickFilter', 'show']} onChange={onChange} label={filterBarShowStr} />\n            <SettingToggle id='show-filter-bar' prefix='notifications' settings={settings} settingPath={['quickFilter', 'advanced']} onChange={onChange} label={filterAdvancedStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-follow'>\n          <span id='notifications-follow' className='column-settings__section'><FormattedMessage id='notifications.column_settings.follow' defaultMessage='New followers:' /></span>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'follow']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'follow']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'follow']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'follow']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-follow-request'>\n          <span id='notifications-follow-request' className='column-settings__section'><FormattedMessage id='notifications.column_settings.follow_request' defaultMessage='New follow requests:' /></span>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'follow_request']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'follow_request']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'follow_request']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'follow_request']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-favourite'>\n          <span id='notifications-favourite' className='column-settings__section'><FormattedMessage id='notifications.column_settings.favourite' defaultMessage='Favourites:' /></span>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'favourite']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'favourite']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'favourite']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'favourite']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-reaction'>\n          <span id='notifications-reaction' className='column-settings__section'><FormattedMessage id='notifications.column_settings.reaction' defaultMessage='Reactions:' /></span>\n\n          <div className='column-settings__pillbar'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'reaction']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'reaction']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'reaction']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'reaction']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-mention'>\n          <span id='notifications-mention' className='column-settings__section'><FormattedMessage id='notifications.column_settings.mention' defaultMessage='Mentions:' /></span>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'mention']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'mention']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'mention']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'mention']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-reblog'>\n          <span id='notifications-reblog' className='column-settings__section'><FormattedMessage id='notifications.column_settings.reblog' defaultMessage='Boosts:' /></span>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'reblog']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'reblog']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'reblog']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'reblog']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-poll'>\n          <span id='notifications-poll' className='column-settings__section'><FormattedMessage id='notifications.column_settings.poll' defaultMessage='Poll results:' /></span>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'poll']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'poll']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'poll']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'poll']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-status'>\n          <span id='notifications-status' className='column-settings__section'><FormattedMessage id='notifications.column_settings.status' defaultMessage='New posts:' /></span>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'status']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'status']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'status']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'status']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-update'>\n          <span id='notifications-update' className='column-settings__section'><FormattedMessage id='notifications.column_settings.update' defaultMessage='Edits:' /></span>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'update']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'update']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'update']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'update']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        {((this.context.identity.permissions & PERMISSION_MANAGE_USERS) === PERMISSION_MANAGE_USERS) && (\n          <div role='group' aria-labelledby='notifications-admin-sign-up'>\n            <span id='notifications-status' className='column-settings__section'><FormattedMessage id='notifications.column_settings.admin.sign_up' defaultMessage='New sign-ups:' /></span>\n\n            <div className='column-settings__row'>\n              <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'admin.sign_up']} onChange={onChange} label={alertStr} />\n              {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'admin.sign_up']} onChange={this.onPushChange} label={pushStr} />}\n              <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'admin.sign_up']} onChange={onChange} label={showStr} />\n              <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'admin.sign_up']} onChange={onChange} label={soundStr} />\n            </div>\n          </div>\n        )}\n\n        {((this.context.identity.permissions & PERMISSION_MANAGE_REPORTS) === PERMISSION_MANAGE_REPORTS) && (\n          <div role='group' aria-labelledby='notifications-admin-report'>\n            <span id='notifications-status' className='column-settings__section'><FormattedMessage id='notifications.column_settings.admin.report' defaultMessage='New reports:' /></span>\n\n            <div className='column-settings__row'>\n              <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'admin.report']} onChange={onChange} label={alertStr} />\n              {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'admin.report']} onChange={this.onPushChange} label={pushStr} />}\n              <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'admin.report']} onChange={onChange} label={showStr} />\n              <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'admin.report']} onChange={onChange} label={soundStr} />\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport ColumnSettings from '../components/column_settings';\nimport { changeSetting } from '../../../actions/settings';\nimport { setFilter, clearNotifications, requestBrowserPermission } from '../../../actions/notifications';\nimport { changeAlerts as changePushNotifications } from '../../../actions/push_notifications';\nimport { openModal } from '../../../actions/modal';\nimport { showAlert } from '../../../actions/alerts';\n\nconst messages = defineMessages({\n  clearMessage: { id: 'notifications.clear_confirmation', defaultMessage: 'Are you sure you want to permanently clear all your notifications?' },\n  clearConfirm: { id: 'notifications.clear', defaultMessage: 'Clear notifications' },\n  permissionDenied: { id: 'notifications.permission_denied_alert', defaultMessage: 'Desktop notifications can\\'t be enabled, as browser permission has been denied before' },\n});\n\nconst mapStateToProps = state => ({\n  settings: state.getIn(['settings', 'notifications']),\n  pushSettings: state.get('push_notifications'),\n  alertsEnabled: state.getIn(['settings', 'notifications', 'alerts']).includes(true),\n  browserSupport: state.getIn(['notifications', 'browserSupport']),\n  browserPermission: state.getIn(['notifications', 'browserPermission']),\n});\n\nconst mapDispatchToProps = (dispatch, { intl }) => ({\n\n  onChange (path, checked) {\n    if (path[0] === 'push') {\n      if (checked && typeof window.Notification !== 'undefined' && Notification.permission !== 'granted') {\n        dispatch(requestBrowserPermission((permission) => {\n          if (permission === 'granted') {\n            dispatch(changePushNotifications(path.slice(1), checked));\n          } else {\n            dispatch(showAlert(undefined, messages.permissionDenied));\n          }\n        }));\n      } else {\n        dispatch(changePushNotifications(path.slice(1), checked));\n      }\n    } else if (path[0] === 'quickFilter') {\n      dispatch(changeSetting(['notifications', ...path], checked));\n      dispatch(setFilter('all'));\n    } else if (path[0] === 'alerts' && checked && typeof window.Notification !== 'undefined' && Notification.permission !== 'granted') {\n      if (checked && typeof window.Notification !== 'undefined' && Notification.permission !== 'granted') {\n        dispatch(requestBrowserPermission((permission) => {\n          if (permission === 'granted') {\n            dispatch(changeSetting(['notifications', ...path], checked));\n          } else {\n            dispatch(showAlert(undefined, messages.permissionDenied));\n          }\n        }));\n      } else {\n        dispatch(changeSetting(['notifications', ...path], checked));\n      }\n    } else {\n      dispatch(changeSetting(['notifications', ...path], checked));\n    }\n  },\n\n  onClear () {\n    dispatch(openModal('CONFIRM', {\n      message: intl.formatMessage(messages.clearMessage),\n      confirm: intl.formatMessage(messages.clearConfirm),\n      onConfirm: () => dispatch(clearNotifications()),\n    }));\n  },\n\n  onRequestNotificationPermission () {\n    dispatch(requestBrowserPermission());\n  },\n\n});\n\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(ColumnSettings));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport Icon from 'mastodon/components/icon';\n\nconst tooltips = defineMessages({\n  mentions: { id: 'notifications.filter.mentions', defaultMessage: 'Mentions' },\n  favourites: { id: 'notifications.filter.favourites', defaultMessage: 'Favourites' },\n  reactions: { id: 'notifications.filter.reactions', defaultMessage: 'Reactions' },\n  boosts: { id: 'notifications.filter.boosts', defaultMessage: 'Boosts' },\n  polls: { id: 'notifications.filter.polls', defaultMessage: 'Poll results' },\n  follows: { id: 'notifications.filter.follows', defaultMessage: 'Follows' },\n  statuses: { id: 'notifications.filter.statuses', defaultMessage: 'Updates from people you follow' },\n});\n\nexport default @injectIntl\nclass FilterBar extends React.PureComponent {\n\n  static propTypes = {\n    selectFilter: PropTypes.func.isRequired,\n    selectedFilter: PropTypes.string.isRequired,\n    advancedMode: PropTypes.bool.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  onClick (notificationType) {\n    return () => this.props.selectFilter(notificationType);\n  }\n\n  render () {\n    const { selectedFilter, advancedMode, intl } = this.props;\n    const renderedElement = !advancedMode ? (\n      <div className='notification__filter-bar'>\n        <button\n          className={selectedFilter === 'all' ? 'active' : ''}\n          onClick={this.onClick('all')}\n        >\n          <FormattedMessage\n            id='notifications.filter.all'\n            defaultMessage='All'\n          />\n        </button>\n        <button\n          className={selectedFilter === 'mention' ? 'active' : ''}\n          onClick={this.onClick('mention')}\n        >\n          <FormattedMessage\n            id='notifications.filter.mentions'\n            defaultMessage='Mentions'\n          />\n        </button>\n      </div>\n    ) : (\n      <div className='notification__filter-bar'>\n        <button\n          className={selectedFilter === 'all' ? 'active' : ''}\n          onClick={this.onClick('all')}\n        >\n          <FormattedMessage\n            id='notifications.filter.all'\n            defaultMessage='All'\n          />\n        </button>\n        <button\n          className={selectedFilter === 'mention' ? 'active' : ''}\n          onClick={this.onClick('mention')}\n          title={intl.formatMessage(tooltips.mentions)}\n        >\n          <Icon id='reply-all' fixedWidth />\n        </button>\n        <button\n          className={selectedFilter === 'favourite' ? 'active' : ''}\n          onClick={this.onClick('favourite')}\n          title={intl.formatMessage(tooltips.favourites)}\n        >\n          <Icon id='star' fixedWidth />\n        </button>\n        <button\n          className={selectedFilter === 'reaction' ? 'active' : ''}\n          onClick={this.onClick('reaction')}\n          title={intl.formatMessage(tooltips.reactions)}\n        >\n          <Icon id='plus' fixedWidth />\n        </button>\n        <button\n          className={selectedFilter === 'reblog' ? 'active' : ''}\n          onClick={this.onClick('reblog')}\n          title={intl.formatMessage(tooltips.boosts)}\n        >\n          <Icon id='retweet' fixedWidth />\n        </button>\n        <button\n          className={selectedFilter === 'poll' ? 'active' : ''}\n          onClick={this.onClick('poll')}\n          title={intl.formatMessage(tooltips.polls)}\n        >\n          <Icon id='tasks' fixedWidth />\n        </button>\n        <button\n          className={selectedFilter === 'status' ? 'active' : ''}\n          onClick={this.onClick('status')}\n          title={intl.formatMessage(tooltips.statuses)}\n        >\n          <Icon id='home' fixedWidth />\n        </button>\n        <button\n          className={selectedFilter === 'follow' ? 'active' : ''}\n          onClick={this.onClick('follow')}\n          title={intl.formatMessage(tooltips.follows)}\n        >\n          <Icon id='user-plus' fixedWidth />\n        </button>\n      </div>\n    );\n    return renderedElement;\n  }\n\n}\n","import { connect } from 'react-redux';\nimport FilterBar from '../components/filter_bar';\nimport { setFilter } from '../../../actions/notifications';\n\nconst makeMapStateToProps = state => ({\n  selectedFilter: state.getIn(['settings', 'notifications', 'quickFilter', 'active']),\n  advancedMode: state.getIn(['settings', 'notifications', 'quickFilter', 'advanced']),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  selectFilter (newActiveFilter) {\n    dispatch(setFilter(newActiveFilter));\n  },\n});\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(FilterBar);\n","import React from 'react';\nimport Icon from 'mastodon/components/icon';\nimport Button from 'mastodon/components/button';\nimport IconButton from 'mastodon/components/icon_button';\nimport { requestBrowserPermission } from 'mastodon/actions/notifications';\nimport { changeSetting } from 'mastodon/actions/settings';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nconst messages = defineMessages({\n  close: { id: 'lightbox.close', defaultMessage: 'Close' },\n});\n\nexport default @connect()\n@injectIntl\nclass NotificationsPermissionBanner extends React.PureComponent {\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  handleClick = () => {\n    this.props.dispatch(requestBrowserPermission());\n  };\n\n  handleClose = () => {\n    this.props.dispatch(changeSetting(['notifications', 'dismissPermissionBanner'], true));\n  };\n\n  render () {\n    const { intl } = this.props;\n\n    return (\n      <div className='notifications-permission-banner'>\n        <div className='notifications-permission-banner__close'>\n          <IconButton icon='times' onClick={this.handleClose} title={intl.formatMessage(messages.close)} />\n        </div>\n\n        <h2><FormattedMessage id='notifications_permission_banner.title' defaultMessage='Never miss a thing' /></h2>\n        <p><FormattedMessage id='notifications_permission_banner.how_to_control' defaultMessage=\"To receive notifications when Mastodon isn't open, enable desktop notifications. You can control precisely which types of interactions generate desktop notifications through the {icon} button above once they're enabled.\" values={{ icon: <Icon id='sliders' /> }} /></p>\n        <Button onClick={this.handleClick}><FormattedMessage id='notifications_permission_banner.enable' defaultMessage='Enable desktop notifications' /></Button>\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport Column from '../../components/column';\nimport ColumnHeader from '../../components/column_header';\nimport {\n  expandNotifications,\n  scrollTopNotifications,\n  loadPending,\n  mountNotifications,\n  unmountNotifications,\n  markNotificationsAsRead,\n} from '../../actions/notifications';\nimport { submitMarkers } from '../../actions/markers';\nimport { addColumn, removeColumn, moveColumn } from '../../actions/columns';\nimport NotificationContainer from './containers/notification_container';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ColumnSettingsContainer from './containers/column_settings_container';\nimport FilterBarContainer from './containers/filter_bar_container';\nimport { createSelector } from 'reselect';\nimport { List as ImmutableList } from 'immutable';\nimport { debounce } from 'lodash';\nimport ScrollableList from '../../components/scrollable_list';\nimport LoadGap from '../../components/load_gap';\nimport Icon from 'mastodon/components/icon';\nimport compareId from 'mastodon/compare_id';\nimport NotificationsPermissionBanner from './components/notifications_permission_banner';\nimport NotSignedInIndicator from 'mastodon/components/not_signed_in_indicator';\nimport { Helmet } from 'react-helmet';\n\nconst messages = defineMessages({\n  title: { id: 'column.notifications', defaultMessage: 'Notifications' },\n  markAsRead : { id: 'notifications.mark_as_read', defaultMessage: 'Mark every notification as read' },\n});\n\nconst getExcludedTypes = createSelector([\n  state => state.getIn(['settings', 'notifications', 'shows']),\n], (shows) => {\n  return ImmutableList(shows.filter(item => !item).keys());\n});\n\nconst getNotifications = createSelector([\n  state => state.getIn(['settings', 'notifications', 'quickFilter', 'show']),\n  state => state.getIn(['settings', 'notifications', 'quickFilter', 'active']),\n  getExcludedTypes,\n  state => state.getIn(['notifications', 'items']),\n], (showFilterBar, allowedType, excludedTypes, notifications) => {\n  if (!showFilterBar || allowedType === 'all') {\n    // used if user changed the notification settings after loading the notifications from the server\n    // otherwise a list of notifications will come pre-filtered from the backend\n    // we need to turn it off for FilterBar in order not to block ourselves from seeing a specific category\n    return notifications.filterNot(item => item !== null && excludedTypes.includes(item.get('type')));\n  }\n  return notifications.filter(item => item === null || allowedType === item.get('type'));\n});\n\nconst mapStateToProps = state => ({\n  showFilterBar: state.getIn(['settings', 'notifications', 'quickFilter', 'show']),\n  notifications: getNotifications(state),\n  isLoading: state.getIn(['notifications', 'isLoading'], 0) > 0,\n  isUnread: state.getIn(['notifications', 'unread']) > 0 || state.getIn(['notifications', 'pendingItems']).size > 0,\n  hasMore: state.getIn(['notifications', 'hasMore']),\n  numPending: state.getIn(['notifications', 'pendingItems'], ImmutableList()).size,\n  lastReadId: state.getIn(['settings', 'notifications', 'showUnread']) ? state.getIn(['notifications', 'readMarkerId']) : '0',\n  canMarkAsRead: state.getIn(['settings', 'notifications', 'showUnread']) && state.getIn(['notifications', 'readMarkerId']) !== '0' && getNotifications(state).some(item => item !== null && compareId(item.get('id'), state.getIn(['notifications', 'readMarkerId'])) > 0),\n  needsNotificationPermission: state.getIn(['settings', 'notifications', 'alerts']).includes(true) && state.getIn(['notifications', 'browserSupport']) && state.getIn(['notifications', 'browserPermission']) === 'default' && !state.getIn(['settings', 'notifications', 'dismissPermissionBanner']),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass Notifications extends React.PureComponent {\n\n  static contextTypes = {\n    identity: PropTypes.object,\n  };\n\n  static propTypes = {\n    columnId: PropTypes.string,\n    notifications: ImmutablePropTypes.list.isRequired,\n    showFilterBar: PropTypes.bool.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    isLoading: PropTypes.bool,\n    isUnread: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    hasMore: PropTypes.bool,\n    numPending: PropTypes.number,\n    lastReadId: PropTypes.string,\n    canMarkAsRead: PropTypes.bool,\n    needsNotificationPermission: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    trackScroll: true,\n  };\n\n  componentWillMount() {\n    this.props.dispatch(mountNotifications());\n  }\n\n  componentWillUnmount () {\n    this.handleLoadOlder.cancel();\n    this.handleScrollToTop.cancel();\n    this.handleScroll.cancel();\n    this.props.dispatch(scrollTopNotifications(false));\n    this.props.dispatch(unmountNotifications());\n  }\n\n  handleLoadGap = (maxId) => {\n    this.props.dispatch(expandNotifications({ maxId }));\n  };\n\n  handleLoadOlder = debounce(() => {\n    const last = this.props.notifications.last();\n    this.props.dispatch(expandNotifications({ maxId: last && last.get('id') }));\n  }, 300, { leading: true });\n\n  handleLoadPending = () => {\n    this.props.dispatch(loadPending());\n  };\n\n  handleScrollToTop = debounce(() => {\n    this.props.dispatch(scrollTopNotifications(true));\n  }, 100);\n\n  handleScroll = debounce(() => {\n    this.props.dispatch(scrollTopNotifications(false));\n  }, 100);\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('NOTIFICATIONS', {}));\n    }\n  };\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  };\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  };\n\n  setColumnRef = c => {\n    this.column = c;\n  };\n\n  handleMoveUp = id => {\n    const elementIndex = this.props.notifications.findIndex(item => item !== null && item.get('id') === id) - 1;\n    this._selectChild(elementIndex, true);\n  };\n\n  handleMoveDown = id => {\n    const elementIndex = this.props.notifications.findIndex(item => item !== null && item.get('id') === id) + 1;\n    this._selectChild(elementIndex, false);\n  };\n\n  _selectChild (index, align_top) {\n    const container = this.column.node;\n    const element = container.querySelector(`article:nth-of-type(${index + 1}) .focusable`);\n\n    if (element) {\n      if (align_top && container.scrollTop > element.offsetTop) {\n        element.scrollIntoView(true);\n      } else if (!align_top && container.scrollTop + container.clientHeight < element.offsetTop + element.offsetHeight) {\n        element.scrollIntoView(false);\n      }\n      element.focus();\n    }\n  }\n\n  handleMarkAsRead = () => {\n    this.props.dispatch(markNotificationsAsRead());\n    this.props.dispatch(submitMarkers({ immediate: true }));\n  };\n\n  render () {\n    const { intl, notifications, isLoading, isUnread, columnId, multiColumn, hasMore, numPending, showFilterBar, lastReadId, canMarkAsRead, needsNotificationPermission } = this.props;\n    const pinned = !!columnId;\n    const emptyMessage = <FormattedMessage id='empty_column.notifications' defaultMessage=\"You don't have any notifications yet. When other people interact with you, you will see it here.\" />;\n    const { signedIn } = this.context.identity;\n\n    let scrollableContent = null;\n\n    const filterBarContainer = (signedIn && showFilterBar)\n      ? (<FilterBarContainer />)\n      : null;\n\n    if (isLoading && this.scrollableContent) {\n      scrollableContent = this.scrollableContent;\n    } else if (notifications.size > 0 || hasMore) {\n      scrollableContent = notifications.map((item, index) => item === null ? (\n        <LoadGap\n          key={'gap:' + notifications.getIn([index + 1, 'id'])}\n          disabled={isLoading}\n          maxId={index > 0 ? notifications.getIn([index - 1, 'id']) : null}\n          onClick={this.handleLoadGap}\n        />\n      ) : (\n        <NotificationContainer\n          key={item.get('id')}\n          notification={item}\n          accountId={item.get('account')}\n          onMoveUp={this.handleMoveUp}\n          onMoveDown={this.handleMoveDown}\n          unread={lastReadId !== '0' && compareId(item.get('id'), lastReadId) > 0}\n        />\n      ));\n    } else {\n      scrollableContent = null;\n    }\n\n    this.scrollableContent = scrollableContent;\n\n    let scrollContainer;\n\n    if (signedIn) {\n      scrollContainer = (\n        <ScrollableList\n          scrollKey={`notifications-${columnId}`}\n          trackScroll={!pinned}\n          isLoading={isLoading}\n          showLoading={isLoading && notifications.size === 0}\n          hasMore={hasMore}\n          numPending={numPending}\n          prepend={needsNotificationPermission && <NotificationsPermissionBanner />}\n          alwaysPrepend\n          emptyMessage={emptyMessage}\n          onLoadMore={this.handleLoadOlder}\n          onLoadPending={this.handleLoadPending}\n          onScrollToTop={this.handleScrollToTop}\n          onScroll={this.handleScroll}\n          bindToDocument={!multiColumn}\n        >\n          {scrollableContent}\n        </ScrollableList>\n      );\n    } else {\n      scrollContainer = <NotSignedInIndicator />;\n    }\n\n    let extraButton = null;\n\n    if (canMarkAsRead) {\n      extraButton = (\n        <button\n          aria-label={intl.formatMessage(messages.markAsRead)}\n          title={intl.formatMessage(messages.markAsRead)}\n          onClick={this.handleMarkAsRead}\n          className='column-header__button'\n        >\n          <Icon id='check' />\n        </button>\n      );\n    }\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setColumnRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='bell'\n          active={isUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n          extraButton={extraButton}\n        >\n          <ColumnSettingsContainer />\n        </ColumnHeader>\n\n        {filterBarContainer}\n        {scrollContainer}\n\n        <Helmet>\n          <title>{intl.formatMessage(messages.title)}</title>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}