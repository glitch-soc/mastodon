{"version":3,"sources":["webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/list_adder/components/list.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/list_adder/components/account.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/list_adder/index.jsx"],"names":["messages","defineMessages","remove","add","List","connect","MapStateToProps","state","_ref","listId","added","list","get","getIn","includes","mapDispatchToProps","dispatch","_ref2","onRemove","removeFromListAdder","onAdd","addToListAdder","_dec","_class","injectIntl","_class2","ImmutablePureComponent","render","intl","this","props","button","_jsx","IconButton","icon","title","formatMessage","onClick","className","Icon","id","fixedWidth","propTypes","ImmutablePropTypes","map","isRequired","PropTypes","object","func","bool","defaultProps","Account","makeMapStateToProps","getAccount","makeGetAccount","mapStateToProps","accountId","account","Avatar","size","DisplayName","getOrderedLists","createSelector","lists","toList","filter","item","sort","a","b","localeCompare","ListAdder","listIds","onInitialize","setupListAdder","onReset","resetListAdder","componentDidMount","componentWillUnmount","NewListForm","ListId","string","onClose"],"mappings":"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","file":"js/features/glitch/async/list_adder-0d5e2f4aacbad86298e7.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport IconButton from '../../../components/icon_button';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { removeFromListAdder, addToListAdder } from '../../../actions/lists';\nimport Icon from 'flavours/glitch/components/icon';\n\nconst messages = defineMessages({\n  remove: { id: 'lists.account.remove', defaultMessage: 'Remove from list' },\n  add: { id: 'lists.account.add', defaultMessage: 'Add to list' },\n});\n\nconst MapStateToProps = (state, { listId, added }) => ({\n  list: state.get('lists').get(listId),\n  added: typeof added === 'undefined' ? state.getIn(['listAdder', 'lists', 'items']).includes(listId) : added,\n});\n\nconst mapDispatchToProps = (dispatch, { listId }) => ({\n  onRemove: () => dispatch(removeFromListAdder(listId)),\n  onAdd: () => dispatch(addToListAdder(listId)),\n});\n\nexport default @connect(MapStateToProps, mapDispatchToProps)\n@injectIntl\nclass List extends ImmutablePureComponent {\n\n  static propTypes = {\n    list: ImmutablePropTypes.map.isRequired,\n    intl: PropTypes.object.isRequired,\n    onRemove: PropTypes.func.isRequired,\n    onAdd: PropTypes.func.isRequired,\n    added: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    added: false,\n  };\n\n  render () {\n    const { list, intl, onRemove, onAdd, added } = this.props;\n\n    let button;\n\n    if (added) {\n      button = <IconButton icon='times' title={intl.formatMessage(messages.remove)} onClick={onRemove} />;\n    } else {\n      button = <IconButton icon='plus' title={intl.formatMessage(messages.add)} onClick={onAdd} />;\n    }\n\n    return (\n      <div className='list'>\n        <div className='list__wrapper'>\n          <div className='list__display-name'>\n            <Icon id='list-ul' className='column-link__icon' fixedWidth />\n            {list.get('title')}\n          </div>\n\n          <div className='account__relationship'>\n            {button}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { makeGetAccount } from '../../../selectors';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport Avatar from '../../../components/avatar';\nimport DisplayName from '../../../components/display_name';\nimport { injectIntl } from 'react-intl';\n\nconst makeMapStateToProps = () => {\n  const getAccount = makeGetAccount();\n\n  const mapStateToProps = (state, { accountId }) => ({\n    account: getAccount(state, accountId),\n  });\n\n  return mapStateToProps;\n};\n\n\nexport default @connect(makeMapStateToProps)\n@injectIntl\nclass Account extends ImmutablePureComponent {\n\n  static propTypes = {\n    account: ImmutablePropTypes.map.isRequired,\n  };\n\n  render () {\n    const { account } = this.props;\n    return (\n      <div className='account'>\n        <div className='account__wrapper'>\n          <div className='account__display-name'>\n            <div className='account__avatar-wrapper'><Avatar account={account} size={36} /></div>\n            <DisplayName account={account} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { injectIntl } from 'react-intl';\nimport { setupListAdder, resetListAdder } from '../../actions/lists';\nimport { createSelector } from 'reselect';\nimport List from './components/list';\nimport Account from './components/account';\nimport NewListForm from '../lists/components/new_list_form';\n// hack\n\nconst getOrderedLists = createSelector([state => state.get('lists')], lists => {\n  if (!lists) {\n    return lists;\n  }\n\n  return lists.toList().filter(item => !!item).sort((a, b) => a.get('title').localeCompare(b.get('title')));\n});\n\nconst mapStateToProps = state => ({\n  listIds: getOrderedLists(state).map(list=>list.get('id')),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onInitialize: accountId => dispatch(setupListAdder(accountId)),\n  onReset: () => dispatch(resetListAdder()),\n});\n\nexport default @connect(mapStateToProps, mapDispatchToProps)\n@injectIntl\nclass ListAdder extends ImmutablePureComponent {\n\n  static propTypes = {\n    accountId: PropTypes.string.isRequired,\n    onClose: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    onInitialize: PropTypes.func.isRequired,\n    onReset: PropTypes.func.isRequired,\n    listIds: ImmutablePropTypes.list.isRequired,\n  };\n\n  componentDidMount () {\n    const { onInitialize, accountId } = this.props;\n    onInitialize(accountId);\n  }\n\n  componentWillUnmount () {\n    const { onReset } = this.props;\n    onReset();\n  }\n\n  render () {\n    const { accountId, listIds } = this.props;\n\n    return (\n      <div className='modal-root__modal list-adder'>\n        <div className='list-adder__account'>\n          <Account accountId={accountId} />\n        </div>\n\n        <NewListForm />\n\n\n        <div className='list-adder__lists'>\n          {listIds.map(ListId => <List key={ListId} listId={ListId} />)}\n        </div>\n      </div>\n    );\n  }\n\n}\n"],"sourceRoot":""}