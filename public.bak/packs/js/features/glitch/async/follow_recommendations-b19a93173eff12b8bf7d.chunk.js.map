{"version":3,"sources":["webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/follow_recommendations/components/account.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/follow_recommendations/index.jsx","webpack:///./app/javascript/images/elephant_ui_greeting.svg"],"names":["messages","defineMessages","follow","unfollow","Account","connect","makeMapStateToProps","getAccount","makeGetAccount","mapStateToProps","state","props","account","id","_dec","_class","injectIntl","_class2","ImmutablePureComponent","constructor","arguments","handleFollow","dispatch","this","getIn","unfollowAccount","get","followAccount","render","intl","button","_jsx","IconButton","icon","title","formatMessage","active","onClick","className","Permalink","href","to","Avatar","size","DisplayName","split","propTypes","ImmutablePropTypes","map","isRequired","PropTypes","object","func","FollowRecommendations","suggestions","isLoading","handleDone","router","context","requestBrowserPermission","permission","changeSetting","saveSettings","history","push","componentDidMount","fetchSuggestions","componentWillUnmount","markAsPartial","Column","viewBox","xlinkHref","FormattedMessage","defaultMessage","React","Fragment","suggestion","src","imageGreeting","alt","Button","Helmet","name","content","contextTypes","list","bool"],"mappings":"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","file":"js/features/glitch/async/follow_recommendations-b19a93173eff12b8bf7d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { connect } from 'react-redux';\nimport { makeGetAccount } from 'flavours/glitch/selectors';\nimport Avatar from 'flavours/glitch/components/avatar';\nimport DisplayName from 'flavours/glitch/components/display_name';\nimport Permalink from 'flavours/glitch/components/permalink';\nimport IconButton from 'flavours/glitch/components/icon_button';\nimport { injectIntl, defineMessages } from 'react-intl';\nimport { followAccount, unfollowAccount } from 'flavours/glitch/actions/accounts';\n\nconst messages = defineMessages({\n  follow: { id: 'account.follow', defaultMessage: 'Follow' },\n  unfollow: { id: 'account.unfollow', defaultMessage: 'Unfollow' },\n});\n\nconst makeMapStateToProps = () => {\n  const getAccount = makeGetAccount();\n\n  const mapStateToProps = (state, props) => ({\n    account: getAccount(state, props.id),\n  });\n\n  return mapStateToProps;\n};\n\nconst getFirstSentence = str => {\n  const arr = str.split(/(([.?!]+\\s)|[．。？！\\n•])/);\n\n  return arr[0];\n};\n\nexport default @connect(makeMapStateToProps)\n@injectIntl\nclass Account extends ImmutablePureComponent {\n\n  static propTypes = {\n    account: ImmutablePropTypes.map.isRequired,\n    intl: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n  };\n\n  handleFollow = () => {\n    const { account, dispatch } = this.props;\n\n    if (account.getIn(['relationship', 'following']) || account.getIn(['relationship', 'requested'])) {\n      dispatch(unfollowAccount(account.get('id')));\n    } else {\n      dispatch(followAccount(account.get('id')));\n    }\n  };\n\n  render () {\n    const { account, intl } = this.props;\n\n    let button;\n\n    if (account.getIn(['relationship', 'following'])) {\n      button = <IconButton icon='check' title={intl.formatMessage(messages.unfollow)} active onClick={this.handleFollow} />;\n    } else {\n      button = <IconButton icon='plus' title={intl.formatMessage(messages.follow)} onClick={this.handleFollow} />;\n    }\n\n    return (\n      <div className='account follow-recommendations-account'>\n        <div className='account__wrapper'>\n          <Permalink className='account__display-name account__display-name--with-note' title={account.get('acct')} href={account.get('url')} to={`/@${account.get('acct')}`}>\n            <div className='account__avatar-wrapper'><Avatar account={account} size={36} /></div>\n\n            <DisplayName account={account} />\n\n            <div className='account__note'>{getFirstSentence(account.get('note_plain'))}</div>\n          </Permalink>\n\n          <div className='account__relationship'>\n            {button}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\nimport { FormattedMessage } from 'react-intl';\nimport { fetchSuggestions } from 'flavours/glitch/actions/suggestions';\nimport { changeSetting, saveSettings } from 'flavours/glitch/actions/settings';\nimport { requestBrowserPermission } from 'flavours/glitch/actions/notifications';\nimport { markAsPartial } from 'flavours/glitch/actions/timelines';\nimport Column from 'flavours/glitch/features/ui/components/column';\nimport Account from './components/account';\nimport imageGreeting from 'mastodon/../images/elephant_ui_greeting.svg';\nimport Button from 'flavours/glitch/components/button';\nimport { Helmet } from 'react-helmet';\n\nconst mapStateToProps = state => ({\n  suggestions: state.getIn(['suggestions', 'items']),\n  isLoading: state.getIn(['suggestions', 'isLoading']),\n});\n\nexport default @connect(mapStateToProps)\nclass FollowRecommendations extends ImmutablePureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object.isRequired,\n  };\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    suggestions: ImmutablePropTypes.list,\n    isLoading: PropTypes.bool,\n  };\n\n  componentDidMount () {\n    const { dispatch, suggestions } = this.props;\n\n    // Don't re-fetch if we're e.g. navigating backwards to this page,\n    // since we don't want followed accounts to disappear from the list\n\n    if (suggestions.size === 0) {\n      dispatch(fetchSuggestions(true));\n    }\n  }\n\n  componentWillUnmount () {\n    const { dispatch } = this.props;\n\n    // Force the home timeline to be reloaded when the user navigates\n    // to it; if the user is new, it would've been empty before\n\n    dispatch(markAsPartial('home'));\n  }\n\n  handleDone = () => {\n    const { dispatch } = this.props;\n    const { router } = this.context;\n\n    dispatch(requestBrowserPermission((permission) => {\n      if (permission === 'granted') {\n        dispatch(changeSetting(['notifications', 'alerts', 'follow'], true));\n        dispatch(changeSetting(['notifications', 'alerts', 'favourite'], true));\n        dispatch(changeSetting(['notifications', 'alerts', 'reblog'], true));\n        dispatch(changeSetting(['notifications', 'alerts', 'mention'], true));\n        dispatch(changeSetting(['notifications', 'alerts', 'poll'], true));\n        dispatch(changeSetting(['notifications', 'alerts', 'status'], true));\n        dispatch(saveSettings());\n      }\n    }));\n\n    router.history.push('/home');\n  };\n\n  render () {\n    const { suggestions, isLoading } = this.props;\n\n    return (\n      <Column>\n        <div className='scrollable follow-recommendations-container'>\n          <div className='column-title'>\n            <svg viewBox='0 0 79 79' className='logo'>\n              <use xlinkHref='#logo-symbol-icon' />\n            </svg>\n\n            <h3><FormattedMessage id='follow_recommendations.heading' defaultMessage=\"Follow people you'd like to see posts from! Here are some suggestions.\" /></h3>\n            <p><FormattedMessage id='follow_recommendations.lead' defaultMessage=\"Posts from people you follow will show up in chronological order on your home feed. Don't be afraid to make mistakes, you can unfollow people just as easily any time!\" /></p>\n          </div>\n\n          {!isLoading && (\n            <React.Fragment>\n              <div className='column-list'>\n                {suggestions.size > 0 ? suggestions.map(suggestion => (\n                  <Account key={suggestion.get('account')} id={suggestion.get('account')} />\n                )) : (\n                  <div className='column-list__empty-message'>\n                    <FormattedMessage id='empty_column.follow_recommendations' defaultMessage='Looks like no suggestions could be generated for you. You can try using search to look for people you might know or explore trending hashtags.' />\n                  </div>\n                )}\n              </div>\n\n              <div className='column-actions'>\n                <img src={imageGreeting} alt='' className='column-actions__background' />\n                <Button onClick={this.handleDone}><FormattedMessage id='follow_recommendations.done' defaultMessage='Done' /></Button>\n              </div>\n            </React.Fragment>\n          )}\n        </div>\n\n        <Helmet>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n","export default __webpack_public_path__ + \"media/images/elephant_ui_greeting-530b368959aeb035f1ebb16fbc361c71.svg\";"],"sourceRoot":""}