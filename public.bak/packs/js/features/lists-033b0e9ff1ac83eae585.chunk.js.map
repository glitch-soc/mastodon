{"version":3,"sources":["webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/lists/index.jsx"],"names":["messages","defineMessages","heading","subheading","getOrderedLists","createSelector","state","get","lists","toList","filter","item","sort","a","b","localeCompare","Lists","connect","_dec","_class","injectIntl","_class2","ImmutablePureComponent","componentWillMount","this","props","dispatch","fetchLists","render","intl","multiColumn","_jsx","Column","LoadingIndicator","emptyMessage","FormattedMessage","id","defaultMessage","bindToDocument","label","formatMessage","ColumnHeader","title","icon","showBackButton","NewListForm","ScrollableList","scrollKey","prepend","ColumnSubheading","text","map","list","ColumnLink","to","Helmet","name","content","propTypes","params","PropTypes","object","isRequired","func","ImmutablePropTypes","bool"],"mappings":"uTAiBA,MAAMA,EAAWC,YAAe,CAC9BC,QAAQ,CAAD,0CACPC,WAAW,CAAD,qDAGNC,EAAkBC,YAAe,CAACC,GAASA,EAAMC,IAAI,WAAWC,GAC/DA,EAIEA,EAAMC,SAASC,QAAOC,KAAUA,IAAMC,MAAK,CAACC,EAAGC,IAAMD,EAAEN,IAAI,SAASQ,cAAcD,EAAEP,IAAI,YAHtFC,IAQR,IAIGQ,EAFUC,mBAJQX,IAAK,CAC3BE,MAAOJ,EAAgBE,MAGeY,CAAAC,EACvCC,cAAUC,EADI,cAEKC,IAUlBC,qBACEC,KAAKC,MAAMC,SAASC,eAGtBC,SACE,MAAM,KAAEC,EAAI,MAAErB,EAAK,YAAEsB,GAAgBN,KAAKC,MAE1C,IAAKjB,EACH,OACEuB,YAACC,IAAM,UACLD,YAACE,IAAgB,KAKvB,MAAMC,EAAeH,YAACI,IAAgB,CAACC,GAAG,qBAAqBC,eAAe,6EAE9E,OACEN,YAACC,IAAM,CAACM,gBAAiBR,EAAaS,MAAOV,EAAKW,cAAcxC,EAASE,eAAS,EAChF6B,YAACU,IAAY,CAACC,MAAOb,EAAKW,cAAcxC,EAASE,SAAUyC,KAAK,UAAUb,YAAaA,EAAac,gBAAc,IAElHb,YAACc,IAAW,IAEZd,YAACe,IAAc,CACbC,UAAU,QACVb,aAAcA,EACdc,QAASjB,YAACkB,IAAgB,CAACC,KAAMrB,EAAKW,cAAcxC,EAASG,cAC7DmC,gBAAiBR,QAAY,EAE5BtB,EAAM2C,KAAIC,GACTrB,YAACsB,IAAU,CAAsBC,GAAK,UAASF,EAAK7C,IAAI,QAASoC,KAAK,UAAUO,KAAME,EAAK7C,IAAI,UAA9E6C,EAAK7C,IAAI,UAI9BwB,YAACwB,IAAM,UACLxB,YAAA,kBAAQF,EAAKW,cAAcxC,EAASE,UACpC6B,YAAA,QAAMyB,KAAK,SAASC,QAAQ,iBA5C7BC,UAAY,CACjBC,OAAQC,IAAUC,OAAOC,WACzBpC,SAAUkC,IAAUG,KAAKD,WACzBtD,MAAOwD,IAAmBZ,KAC1BvB,KAAM+B,IAAUC,OAAOC,WACvBhC,YAAa8B,IAAUK,MARhB9C,EASRE,KAAAF","file":"js/features/lists-033b0e9ff1ac83eae585.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport { fetchLists } from 'mastodon/actions/lists';\nimport LoadingIndicator from 'mastodon/components/loading_indicator';\nimport ScrollableList from 'mastodon/components/scrollable_list';\nimport Column from 'mastodon/components/column';\nimport ColumnHeader from 'mastodon/components/column_header';\nimport ColumnLink from 'mastodon/features/ui/components/column_link';\nimport ColumnSubheading from 'mastodon/features/ui/components/column_subheading';\nimport NewListForm from './components/new_list_form';\n\nconst messages = defineMessages({\n  heading: { id: 'column.lists', defaultMessage: 'Lists' },\n  subheading: { id: 'lists.subheading', defaultMessage: 'Your lists' },\n});\n\nconst getOrderedLists = createSelector([state => state.get('lists')], lists => {\n  if (!lists) {\n    return lists;\n  }\n\n  return lists.toList().filter(item => !!item).sort((a, b) => a.get('title').localeCompare(b.get('title')));\n});\n\nconst mapStateToProps = state => ({\n  lists: getOrderedLists(state),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass Lists extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    lists: ImmutablePropTypes.list,\n    intl: PropTypes.object.isRequired,\n    multiColumn: PropTypes.bool,\n  };\n\n  componentWillMount () {\n    this.props.dispatch(fetchLists());\n  }\n\n  render () {\n    const { intl, lists, multiColumn } = this.props;\n\n    if (!lists) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    const emptyMessage = <FormattedMessage id='empty_column.lists' defaultMessage=\"You don't have any lists yet. When you create one, it will show up here.\" />;\n\n    return (\n      <Column bindToDocument={!multiColumn} label={intl.formatMessage(messages.heading)}>\n        <ColumnHeader title={intl.formatMessage(messages.heading)} icon='list-ul' multiColumn={multiColumn} showBackButton />\n\n        <NewListForm />\n\n        <ScrollableList\n          scrollKey='lists'\n          emptyMessage={emptyMessage}\n          prepend={<ColumnSubheading text={intl.formatMessage(messages.subheading)} />}\n          bindToDocument={!multiColumn}\n        >\n          {lists.map(list =>\n            <ColumnLink key={list.get('id')} to={`/lists/${list.get('id')}`} icon='list-ul' text={list.get('title')} />,\n          )}\n        </ScrollableList>\n\n        <Helmet>\n          <title>{intl.formatMessage(messages.heading)}</title>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}