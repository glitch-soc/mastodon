{"version":3,"sources":["webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/list_editor/components/account.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/list_editor/components/search.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/list_editor/components/edit_list_form.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/list_editor/index.jsx"],"names":["messages","defineMessages","remove","add","Account","connect","makeMapStateToProps","getAccount","makeGetAccount","mapStateToProps","state","_ref","accountId","added","account","getIn","includes","mapDispatchToProps","dispatch","_ref2","onRemove","removeFromListEditor","onAdd","addToListEditor","_dec","_class","injectIntl","_class2","ImmutablePureComponent","render","intl","this","props","button","_jsx","IconButton","icon","title","formatMessage","onClick","className","Avatar","size","DisplayName","propTypes","ImmutablePropTypes","map","isRequired","PropTypes","object","func","bool","defaultProps","search","Search","value","onSubmit","fetchListSuggestions","onClear","clearListSuggestions","onChange","changeListSuggestions","React","PureComponent","constructor","arguments","handleChange","e","target","handleKeyUp","keyCode","handleClear","hasValue","length","style","display","type","onKeyUp","placeholder","role","tabIndex","Icon","id","classNames","active","ListForm","disabled","changeListEditorTitle","submitListEditor","handleSubmit","preventDefault","handleClick","ListEditor","accountIds","searchAccountIds","onInitialize","listId","setupListEditor","onReset","resetListEditor","componentDidMount","componentWillUnmount","showSearch","EditListForm","Motion","defaultStyle","x","spring","stiffness","damping","transform","visibility","string","onClose","list"],"mappings":"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","file":"js/features/list_editor-c42b25492b8a355d55ca.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { makeGetAccount } from '../../../selectors';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport Avatar from '../../../components/avatar';\nimport DisplayName from '../../../components/display_name';\nimport IconButton from '../../../components/icon_button';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { removeFromListEditor, addToListEditor } from '../../../actions/lists';\n\nconst messages = defineMessages({\n  remove: { id: 'lists.account.remove', defaultMessage: 'Remove from list' },\n  add: { id: 'lists.account.add', defaultMessage: 'Add to list' },\n});\n\nconst makeMapStateToProps = () => {\n  const getAccount = makeGetAccount();\n\n  const mapStateToProps = (state, { accountId, added }) => ({\n    account: getAccount(state, accountId),\n    added: typeof added === 'undefined' ? state.getIn(['listEditor', 'accounts', 'items']).includes(accountId) : added,\n  });\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = (dispatch, { accountId }) => ({\n  onRemove: () => dispatch(removeFromListEditor(accountId)),\n  onAdd: () => dispatch(addToListEditor(accountId)),\n});\n\nexport default @connect(makeMapStateToProps, mapDispatchToProps)\n@injectIntl\nclass Account extends ImmutablePureComponent {\n\n  static propTypes = {\n    account: ImmutablePropTypes.map.isRequired,\n    intl: PropTypes.object.isRequired,\n    onRemove: PropTypes.func.isRequired,\n    onAdd: PropTypes.func.isRequired,\n    added: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    added: false,\n  };\n\n  render () {\n    const { account, intl, onRemove, onAdd, added } = this.props;\n\n    let button;\n\n    if (added) {\n      button = <IconButton icon='times' title={intl.formatMessage(messages.remove)} onClick={onRemove} />;\n    } else {\n      button = <IconButton icon='plus' title={intl.formatMessage(messages.add)} onClick={onAdd} />;\n    }\n\n    return (\n      <div className='account'>\n        <div className='account__wrapper'>\n          <div className='account__display-name'>\n            <div className='account__avatar-wrapper'><Avatar account={account} size={36} /></div>\n            <DisplayName account={account} />\n          </div>\n\n          <div className='account__relationship'>\n            {button}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { fetchListSuggestions, clearListSuggestions, changeListSuggestions } from '../../../actions/lists';\nimport classNames from 'classnames';\nimport Icon from 'mastodon/components/icon';\n\nconst messages = defineMessages({\n  search: { id: 'lists.search', defaultMessage: 'Search among people you follow' },\n});\n\nconst mapStateToProps = state => ({\n  value: state.getIn(['listEditor', 'suggestions', 'value']),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: value => dispatch(fetchListSuggestions(value)),\n  onClear: () => dispatch(clearListSuggestions()),\n  onChange: value => dispatch(changeListSuggestions(value)),\n});\n\nexport default @connect(mapStateToProps, mapDispatchToProps)\n@injectIntl\nclass Search extends React.PureComponent {\n\n  static propTypes = {\n    intl: PropTypes.object.isRequired,\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n    onClear: PropTypes.func.isRequired,\n  };\n\n  handleChange = e => {\n    this.props.onChange(e.target.value);\n  };\n\n  handleKeyUp = e => {\n    if (e.keyCode === 13) {\n      this.props.onSubmit(this.props.value);\n    }\n  };\n\n  handleClear = () => {\n    this.props.onClear();\n  };\n\n  render () {\n    const { value, intl } = this.props;\n    const hasValue = value.length > 0;\n\n    return (\n      <div className='list-editor__search search'>\n        <label>\n          <span style={{ display: 'none' }}>{intl.formatMessage(messages.search)}</span>\n\n          <input\n            className='search__input'\n            type='text'\n            value={value}\n            onChange={this.handleChange}\n            onKeyUp={this.handleKeyUp}\n            placeholder={intl.formatMessage(messages.search)}\n          />\n        </label>\n\n        <div role='button' tabIndex='0' className='search__icon' onClick={this.handleClear}>\n          <Icon id='search' className={classNames({ active: !hasValue })} />\n          <Icon id='times-circle' aria-label={intl.formatMessage(messages.search)} className={classNames({ active: hasValue })} />\n        </div>\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { changeListEditorTitle, submitListEditor } from '../../../actions/lists';\nimport IconButton from '../../../components/icon_button';\nimport { defineMessages, injectIntl } from 'react-intl';\n\nconst messages = defineMessages({\n  title: { id: 'lists.edit.submit', defaultMessage: 'Change title' },\n});\n\nconst mapStateToProps = state => ({\n  value: state.getIn(['listEditor', 'title']),\n  disabled: !state.getIn(['listEditor', 'isChanged']) || !state.getIn(['listEditor', 'title']),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: value => dispatch(changeListEditorTitle(value)),\n  onSubmit: () => dispatch(submitListEditor(false)),\n});\n\nexport default @connect(mapStateToProps, mapDispatchToProps)\n@injectIntl\nclass ListForm extends React.PureComponent {\n\n  static propTypes = {\n    value: PropTypes.string.isRequired,\n    disabled: PropTypes.bool,\n    intl: PropTypes.object.isRequired,\n    onChange: PropTypes.func.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n  };\n\n  handleChange = e => {\n    this.props.onChange(e.target.value);\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.onSubmit();\n  };\n\n  handleClick = () => {\n    this.props.onSubmit();\n  };\n\n  render () {\n    const { value, disabled, intl } = this.props;\n\n    const title = intl.formatMessage(messages.title);\n\n    return (\n      <form className='column-inline-form' onSubmit={this.handleSubmit}>\n        <input\n          className='setting-text'\n          value={value}\n          onChange={this.handleChange}\n        />\n\n        <IconButton\n          disabled={disabled}\n          icon='check'\n          title={title}\n          onClick={this.handleClick}\n        />\n      </form>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { injectIntl } from 'react-intl';\nimport { setupListEditor, clearListSuggestions, resetListEditor } from '../../actions/lists';\nimport Account from './components/account';\nimport Search from './components/search';\nimport EditListForm from './components/edit_list_form';\nimport Motion from '../ui/util/optional_motion';\nimport spring from 'react-motion/lib/spring';\n\nconst mapStateToProps = state => ({\n  accountIds: state.getIn(['listEditor', 'accounts', 'items']),\n  searchAccountIds: state.getIn(['listEditor', 'suggestions', 'items']),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onInitialize: listId => dispatch(setupListEditor(listId)),\n  onClear: () => dispatch(clearListSuggestions()),\n  onReset: () => dispatch(resetListEditor()),\n});\n\nexport default @connect(mapStateToProps, mapDispatchToProps)\n@injectIntl\nclass ListEditor extends ImmutablePureComponent {\n\n  static propTypes = {\n    listId: PropTypes.string.isRequired,\n    onClose: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    onInitialize: PropTypes.func.isRequired,\n    onClear: PropTypes.func.isRequired,\n    onReset: PropTypes.func.isRequired,\n    accountIds: ImmutablePropTypes.list.isRequired,\n    searchAccountIds: ImmutablePropTypes.list.isRequired,\n  };\n\n  componentDidMount () {\n    const { onInitialize, listId } = this.props;\n    onInitialize(listId);\n  }\n\n  componentWillUnmount () {\n    const { onReset } = this.props;\n    onReset();\n  }\n\n  render () {\n    const { accountIds, searchAccountIds, onClear } = this.props;\n    const showSearch = searchAccountIds.size > 0;\n\n    return (\n      <div className='modal-root__modal list-editor'>\n        <EditListForm />\n\n        <Search />\n\n        <div className='drawer__pager'>\n          <div className='drawer__inner list-editor__accounts'>\n            {accountIds.map(accountId => <Account key={accountId} accountId={accountId} added />)}\n          </div>\n\n          {showSearch && <div role='button' tabIndex='-1' className='drawer__backdrop' onClick={onClear} />}\n\n          <Motion defaultStyle={{ x: -100 }} style={{ x: spring(showSearch ? 0 : -100, { stiffness: 210, damping: 20 }) }}>\n            {({ x }) => (\n              <div className='drawer__inner backdrop' style={{ transform: x === 0 ? null : `translateX(${x}%)`, visibility: x === -100 ? 'hidden' : 'visible' }}>\n                {searchAccountIds.map(accountId => <Account key={accountId} accountId={accountId} />)}\n              </div>\n            )}\n          </Motion>\n        </div>\n      </div>\n    );\n  }\n\n}\n"],"sourceRoot":""}