{"version":3,"sources":["webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/community_timeline/components/column_settings.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/community_timeline/containers/column_settings_container.js","webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/community_timeline/index.jsx"],"names":["ColumnSettings","injectIntl","_class","React","PureComponent","render","settings","onChange","this","props","_jsx","className","SettingToggle","settingPath","label","FormattedMessage","id","defaultMessage","connect","mapStateToProps","state","_ref","columnId","uuid","columns","getIn","index","findIndex","c","get","mapDispatchToProps","dispatch","_ref2","key","checked","changeColumnParams","changeSetting","messages","defineMessages","title","CommunityTimeline","_dec","onlyMedia","timelineState","hasUnread","_class2","constructor","arguments","handlePin","removeColumn","addColumn","other","handleMove","dir","moveColumn","handleHeaderClick","column","scrollTop","setRef","handleLoadMore","maxId","expandCommunityTimeline","componentDidMount","signedIn","context","identity","disconnect","connectCommunityStream","componentDidUpdate","prevProps","componentWillUnmount","intl","multiColumn","pinned","createElement","Column","bindToDocument","ref","formatMessage","ColumnHeader","icon","active","onPin","onMove","onClick","ColumnSettingsContainer","DismissableBanner","values","domain","StatusListContainer","trackScroll","scrollKey","timelineId","onLoadMore","emptyMessage","Helmet","name","content","contextTypes","router","PropTypes","object","defaultProps"],"mappings":"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","file":"js/features/community_timeline-9c18256646e5337357cb.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport SettingToggle from '../../notifications/components/setting_toggle';\n\nexport default @injectIntl\nclass ColumnSettings extends React.PureComponent {\n\n  static propTypes = {\n    settings: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    columnId: PropTypes.string,\n  };\n\n  render () {\n    const { settings, onChange } = this.props;\n\n    return (\n      <div>\n        <div className='column-settings__row'>\n          <SettingToggle settings={settings} settingPath={['other', 'onlyMedia']} onChange={onChange} label={<FormattedMessage id='community.column_settings.media_only' defaultMessage='Media only' />} />\n        </div>\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport ColumnSettings from '../components/column_settings';\nimport { changeSetting } from '../../../actions/settings';\nimport { changeColumnParams } from '../../../actions/columns';\n\nconst mapStateToProps = (state, { columnId }) => {\n  const uuid = columnId;\n  const columns = state.getIn(['settings', 'columns']);\n  const index = columns.findIndex(c => c.get('uuid') === uuid);\n\n  return {\n    settings: (uuid && index >= 0) ? columns.get(index).get('params') : state.getIn(['settings', 'community']),\n  };\n};\n\nconst mapDispatchToProps = (dispatch, { columnId }) => {\n  return {\n    onChange (key, checked) {\n      if (columnId) {\n        dispatch(changeColumnParams(columnId, key, checked));\n      } else {\n        dispatch(changeSetting(['community', ...key], checked));\n      }\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ColumnSettings);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport StatusListContainer from '../ui/containers/status_list_container';\nimport Column from '../../components/column';\nimport ColumnHeader from '../../components/column_header';\nimport { expandCommunityTimeline } from '../../actions/timelines';\nimport { addColumn, removeColumn, moveColumn } from '../../actions/columns';\nimport ColumnSettingsContainer from './containers/column_settings_container';\nimport { connectCommunityStream } from '../../actions/streaming';\nimport { Helmet } from 'react-helmet';\nimport { domain } from 'mastodon/initial_state';\nimport DismissableBanner from 'mastodon/components/dismissable_banner';\n\nconst messages = defineMessages({\n  title: { id: 'column.community', defaultMessage: 'Local timeline' },\n});\n\nconst mapStateToProps = (state, { columnId }) => {\n  const uuid = columnId;\n  const columns = state.getIn(['settings', 'columns']);\n  const index = columns.findIndex(c => c.get('uuid') === uuid);\n  const onlyMedia = (columnId && index >= 0) ? columns.get(index).getIn(['params', 'other', 'onlyMedia']) : state.getIn(['settings', 'community', 'other', 'onlyMedia']);\n  const timelineState = state.getIn(['timelines', `community${onlyMedia ? ':media' : ''}`]);\n\n  return {\n    hasUnread: !!timelineState && timelineState.get('unread') > 0,\n    onlyMedia,\n  };\n};\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass CommunityTimeline extends React.PureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n    identity: PropTypes.object,\n  };\n\n  static defaultProps = {\n    onlyMedia: false,\n  };\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    columnId: PropTypes.string,\n    intl: PropTypes.object.isRequired,\n    hasUnread: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    onlyMedia: PropTypes.bool,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch, onlyMedia } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('COMMUNITY', { other: { onlyMedia } }));\n    }\n  };\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  };\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  };\n\n  componentDidMount () {\n    const { dispatch, onlyMedia } = this.props;\n    const { signedIn } = this.context.identity;\n\n    dispatch(expandCommunityTimeline({ onlyMedia }));\n\n    if (signedIn) {\n      this.disconnect = dispatch(connectCommunityStream({ onlyMedia }));\n    }\n  }\n\n  componentDidUpdate (prevProps) {\n    const { signedIn } = this.context.identity;\n\n    if (prevProps.onlyMedia !== this.props.onlyMedia) {\n      const { dispatch, onlyMedia } = this.props;\n\n      if (this.disconnect) {\n        this.disconnect();\n      }\n\n      dispatch(expandCommunityTimeline({ onlyMedia }));\n\n      if (signedIn) {\n        this.disconnect = dispatch(connectCommunityStream({ onlyMedia }));\n      }\n    }\n  }\n\n  componentWillUnmount () {\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  setRef = c => {\n    this.column = c;\n  };\n\n  handleLoadMore = maxId => {\n    const { dispatch, onlyMedia } = this.props;\n\n    dispatch(expandCommunityTimeline({ maxId, onlyMedia }));\n  };\n\n  render () {\n    const { intl, hasUnread, columnId, multiColumn, onlyMedia } = this.props;\n    const pinned = !!columnId;\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='users'\n          active={hasUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n        >\n          <ColumnSettingsContainer columnId={columnId} />\n        </ColumnHeader>\n\n        <DismissableBanner id='community_timeline'>\n          <FormattedMessage id='dismissable_banner.community_timeline' defaultMessage='These are the most recent public posts from people whose accounts are hosted by {domain}.' values={{ domain }} />\n        </DismissableBanner>\n\n        <StatusListContainer\n          trackScroll={!pinned}\n          scrollKey={`community_timeline-${columnId}`}\n          timelineId={`community${onlyMedia ? ':media' : ''}`}\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={<FormattedMessage id='empty_column.community' defaultMessage='The local timeline is empty. Write something publicly to get the ball rolling!' />}\n          bindToDocument={!multiColumn}\n        />\n\n        <Helmet>\n          <title>{intl.formatMessage(messages.title)}</title>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}