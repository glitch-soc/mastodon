{"version":3,"sources":["webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/favourites/index.jsx"],"names":["messages","defineMessages","refresh","Favourites","connect","mapStateToProps","state","props","accountIds","getIn","params","statusId","_dec","_class","injectIntl","_class2","ImmutablePureComponent","constructor","arguments","handleRefresh","this","dispatch","fetchFavourites","componentWillMount","componentWillReceiveProps","nextProps","render","intl","multiColumn","_jsx","Column","LoadingIndicator","emptyMessage","FormattedMessage","id","defaultMessage","bindToDocument","ColumnHeader","showBackButton","extraButton","type","className","title","formatMessage","onClick","Icon","ScrollableList","scrollKey","map","AccountContainer","withNote","Helmet","name","content","propTypes","PropTypes","object","isRequired","func","ImmutablePropTypes","list","bool"],"mappings":"mSAeA,MAAMA,EAAWC,YAAe,CAC9BC,QAAQ,CAAD,yCAKN,IAIGC,EAFUC,mBAJQC,CAACC,EAAOC,KAAK,CACnCC,WAAYF,EAAMG,MAAM,CAAC,aAAc,gBAAiBF,EAAMG,OAAOC,cAG/BC,CAAAC,EACvCC,aAAUC,EADI,cAEUC,IAAuBC,cAAA,SAAAC,WAAA,KAsB9CC,cAAgB,KACdC,KAAKb,MAAMc,SAASC,YAAgBF,KAAKb,MAAMG,OAAOC,YAbxDY,qBACOH,KAAKb,MAAMC,YACdY,KAAKb,MAAMc,SAASC,YAAgBF,KAAKb,MAAMG,OAAOC,WAI1Da,0BAA2BC,GACrBA,EAAUf,OAAOC,WAAaS,KAAKb,MAAMG,OAAOC,UAAYc,EAAUf,OAAOC,UAC/ES,KAAKb,MAAMc,SAASC,YAAgBG,EAAUf,OAAOC,WAQzDe,SACE,MAAM,KAAEC,EAAI,WAAEnB,EAAU,YAAEoB,GAAgBR,KAAKb,MAE/C,IAAKC,EACH,OACEqB,YAACC,IAAM,UACLD,YAACE,IAAgB,KAKvB,MAAMC,EAAeH,YAACI,IAAgB,CAACC,GAAG,0BAA0BC,eAAe,oFAEnF,OACEN,YAACC,IAAM,CAACM,gBAAiBR,QAAY,EACnCC,YAACQ,IAAY,CACXC,gBAAc,EACdV,YAAaA,EACbW,YACEV,YAAA,UAAQW,KAAK,SAASC,UAAU,wBAAwBC,MAAOf,EAAKgB,cAAc3C,EAASE,SAAU,aAAYyB,EAAKgB,cAAc3C,EAASE,SAAU0C,QAASxB,KAAKD,oBAAc,EAACU,YAACgB,IAAI,CAACX,GAAG,eAIjML,YAACiB,IAAc,CACbC,UAAU,aACVf,aAAcA,EACdI,gBAAiBR,QAAY,EAE5BpB,EAAWwC,KAAId,GACdL,YAACoB,IAAgB,CAAUf,GAAIA,EAAIgB,UAAU,GAAtBhB,MAI3BL,YAACsB,IAAM,UACLtB,YAAA,QAAMuB,KAAK,SAASC,QAAQ,gBAMrCtC,EAhEQuC,UAAY,CACjB5C,OAAQ6C,IAAUC,OAAOC,WACzBpC,SAAUkC,IAAUG,KAAKD,WACzBjD,WAAYmD,IAAmBC,KAC/BhC,YAAa2B,IAAUM,KACvBlC,KAAM4B,IAAUC,OAAOC,YARhB5C,EASRE,KAAAF","file":"js/features/favourites-2f4b9f889e86956daa3f.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport { connect } from 'react-redux';\nimport ColumnHeader from 'mastodon/components/column_header';\nimport Icon from 'mastodon/components/icon';\nimport { fetchFavourites } from 'mastodon/actions/interactions';\nimport LoadingIndicator from 'mastodon/components/loading_indicator';\nimport ScrollableList from 'mastodon/components/scrollable_list';\nimport AccountContainer from 'mastodon/containers/account_container';\nimport Column from 'mastodon/features/ui/components/column';\nimport { Helmet } from 'react-helmet';\n\nconst messages = defineMessages({\n  refresh: { id: 'refresh', defaultMessage: 'Refresh' },\n});\n\nconst mapStateToProps = (state, props) => ({\n  accountIds: state.getIn(['user_lists', 'favourited_by', props.params.statusId]),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass Favourites extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    accountIds: ImmutablePropTypes.list,\n    multiColumn: PropTypes.bool,\n    intl: PropTypes.object.isRequired,\n  };\n\n  componentWillMount () {\n    if (!this.props.accountIds) {\n      this.props.dispatch(fetchFavourites(this.props.params.statusId));\n    }\n  }\n\n  componentWillReceiveProps (nextProps) {\n    if (nextProps.params.statusId !== this.props.params.statusId && nextProps.params.statusId) {\n      this.props.dispatch(fetchFavourites(nextProps.params.statusId));\n    }\n  }\n\n  handleRefresh = () => {\n    this.props.dispatch(fetchFavourites(this.props.params.statusId));\n  };\n\n  render () {\n    const { intl, accountIds, multiColumn } = this.props;\n\n    if (!accountIds) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    const emptyMessage = <FormattedMessage id='empty_column.favourites' defaultMessage='No one has favourited this post yet. When someone does, they will show up here.' />;\n\n    return (\n      <Column bindToDocument={!multiColumn}>\n        <ColumnHeader\n          showBackButton\n          multiColumn={multiColumn}\n          extraButton={(\n            <button type='button' className='column-header__button' title={intl.formatMessage(messages.refresh)} aria-label={intl.formatMessage(messages.refresh)} onClick={this.handleRefresh}><Icon id='refresh' /></button>\n          )}\n        />\n\n        <ScrollableList\n          scrollKey='favourites'\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n        >\n          {accountIds.map(id =>\n            <AccountContainer key={id} id={id} withNote={false} />,\n          )}\n        </ScrollableList>\n\n        <Helmet>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}