{"version":3,"sources":["webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/home_timeline/components/column_settings.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/home_timeline/containers/column_settings_container.js","webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/getting_started/components/announcements.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/getting_started/containers/announcements_container.js","webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/home_timeline/index.jsx"],"names":["ColumnSettings","injectIntl","_class","React","PureComponent","render","settings","onChange","this","props","_jsx","className","FormattedMessage","id","defaultMessage","SettingToggle","prefix","settingPath","label","connect","state","getIn","dispatch","key","checked","changeSetting","onSave","saveSettings","messages","defineMessages","close","previous","next","Content","ImmutablePureComponent","constructor","arguments","setRef","c","node","onMentionClick","mention","e","context","router","button","ctrlKey","metaKey","preventDefault","history","push","get","onHashtagClick","hashtag","replace","onStatusClick","status","handleMouseEnter","_ref","currentTarget","autoPlayGif","emojis","querySelectorAll","i","length","emoji","src","getAttribute","handleMouseLeave","_ref2","componentDidMount","_updateLinks","componentDidUpdate","links","link","classList","contains","add","announcement","find","item","href","addEventListener","bind","setAttribute","textContent","previousSibling","text","createElement","ref","dangerouslySetInnerHTML","__html","onMouseEnter","onMouseLeave","contextTypes","PropTypes","object","propTypes","ImmutablePropTypes","map","isRequired","Emoji","emojiMap","hovered","unicodeMapping","filename","shortCode","title","draggable","alt","assetHost","Reaction","handleClick","reaction","announcementId","addReaction","removeReaction","setState","classNames","active","onClick","style","AnimatedNumber","value","string","func","ReactionsBar","handleEmojiPick","data","native","willEnter","scale","reduceMotion","willLeave","spring","stiffness","damping","reactions","visibleReactions","filter","x","styles","toArray","TransitionMotion","items","isEmpty","_ref3","transform","position","size","EmojiPickerDropdown","onPickEmoji","Icon","list","Announcement","unread","selected","startsAt","Date","endsAt","now","hasTimeRange","skipYear","getFullYear","skipEndDate","getDate","getMonth","skipTime","formattedStartsAt","toLocaleString","undefined","hourCycle","year","month","day","hour","minute","formattedEndsAt","intl","bool","Announcements","_class2","index","handleChangeIndex","announcements","handleNextClick","handlePrevClick","static","_markAnnouncementAsRead","dismissAnnouncement","mascot","elephantUIPlane","ReactSwipeableViews","animateHeight","adjustHeight","onChangeIndex","idx","disabled","disableSwiping","reverse","IconButton","formatMessage","icon","customEmojiMap","createSelector","reduce","set","ImmutableMap","name","show_announcements","hide_announcements","HomeTimeline","hasUnread","isPartial","hasAnnouncements","unreadAnnouncements","count","showAnnouncements","_dec","handlePin","columnId","removeColumn","addColumn","handleMove","dir","moveColumn","handleHeaderClick","column","scrollTop","handleLoadMore","maxId","expandHomeTimeline","handleToggleAnnouncementsClick","stopPropagation","toggleShowAnnouncements","setTimeout","fetchAnnouncements","_checkIfReloadNeeded","prevProps","componentWillUnmount","_stopPolling","wasPartial","polling","setInterval","clearInterval","multiColumn","pinned","signedIn","identity","announcementsButton","type","IconWithBadge","Column","bindToDocument","ColumnHeader","onPin","onMove","extraButton","appendContent","AnnouncementsContainer","ColumnSettingsContainer","StatusListContainer","trackScroll","scrollKey","onLoadMore","timelineId","emptyMessage","values","suggestions","Link","to","NotSignedInIndicator","Helmet","content"],"mappings":"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","file":"js/features/home_timeline-42a022c0a044211a6582.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport SettingToggle from '../../notifications/components/setting_toggle';\n\nexport default @injectIntl\nclass ColumnSettings extends React.PureComponent {\n\n  static propTypes = {\n    settings: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  render () {\n    const { settings, onChange } = this.props;\n\n    return (\n      <div>\n        <span className='column-settings__section'><FormattedMessage id='home.column_settings.basic' defaultMessage='Basic' /></span>\n\n        <div className='column-settings__row'>\n          <SettingToggle prefix='home_timeline' settings={settings} settingPath={['shows', 'reblog']} onChange={onChange} label={<FormattedMessage id='home.column_settings.show_reblogs' defaultMessage='Show boosts' />} />\n        </div>\n\n        <div className='column-settings__row'>\n          <SettingToggle prefix='home_timeline' settings={settings} settingPath={['shows', 'reply']} onChange={onChange} label={<FormattedMessage id='home.column_settings.show_replies' defaultMessage='Show replies' />} />\n        </div>\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport ColumnSettings from '../components/column_settings';\nimport { changeSetting, saveSettings } from '../../../actions/settings';\n\nconst mapStateToProps = state => ({\n  settings: state.getIn(['settings', 'home']),\n});\n\nconst mapDispatchToProps = dispatch => ({\n\n  onChange (key, checked) {\n    dispatch(changeSetting(['home', ...key], checked));\n  },\n\n  onSave () {\n    dispatch(saveSettings());\n  },\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ColumnSettings);\n","import React from 'react';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport ReactSwipeableViews from 'react-swipeable-views';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport IconButton from 'mastodon/components/icon_button';\nimport Icon from 'mastodon/components/icon';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport { autoPlayGif, reduceMotion, disableSwiping, mascot } from 'mastodon/initial_state';\nimport elephantUIPlane from 'mastodon/../images/elephant_ui_plane.svg';\nimport unicodeMapping from 'mastodon/features/emoji/emoji_unicode_mapping_light';\nimport classNames from 'classnames';\nimport EmojiPickerDropdown from 'mastodon/features/compose/containers/emoji_picker_dropdown_container';\nimport AnimatedNumber from 'mastodon/components/animated_number';\nimport TransitionMotion from 'react-motion/lib/TransitionMotion';\nimport spring from 'react-motion/lib/spring';\nimport { assetHost } from 'mastodon/utils/config';\n\nconst messages = defineMessages({\n  close: { id: 'lightbox.close', defaultMessage: 'Close' },\n  previous: { id: 'lightbox.previous', defaultMessage: 'Previous' },\n  next: { id: 'lightbox.next', defaultMessage: 'Next' },\n});\n\nclass Content extends ImmutablePureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    announcement: ImmutablePropTypes.map.isRequired,\n  };\n\n  setRef = c => {\n    this.node = c;\n  };\n\n  componentDidMount () {\n    this._updateLinks();\n  }\n\n  componentDidUpdate () {\n    this._updateLinks();\n  }\n\n  _updateLinks () {\n    const node = this.node;\n\n    if (!node) {\n      return;\n    }\n\n    const links = node.querySelectorAll('a');\n\n    for (var i = 0; i < links.length; ++i) {\n      let link = links[i];\n\n      if (link.classList.contains('status-link')) {\n        continue;\n      }\n\n      link.classList.add('status-link');\n\n      let mention = this.props.announcement.get('mentions').find(item => link.href === item.get('url'));\n\n      if (mention) {\n        link.addEventListener('click', this.onMentionClick.bind(this, mention), false);\n        link.setAttribute('title', mention.get('acct'));\n      } else if (link.textContent[0] === '#' || (link.previousSibling && link.previousSibling.textContent && link.previousSibling.textContent[link.previousSibling.textContent.length - 1] === '#')) {\n        link.addEventListener('click', this.onHashtagClick.bind(this, link.text), false);\n      } else {\n        let status = this.props.announcement.get('statuses').find(item => link.href === item.get('url'));\n        if (status) {\n          link.addEventListener('click', this.onStatusClick.bind(this, status), false);\n        }\n        link.setAttribute('title', link.href);\n        link.classList.add('unhandled-link');\n      }\n\n      link.setAttribute('target', '_blank');\n      link.setAttribute('rel', 'noopener noreferrer');\n    }\n  }\n\n  onMentionClick = (mention, e) => {\n    if (this.context.router && e.button === 0 && !(e.ctrlKey || e.metaKey)) {\n      e.preventDefault();\n      this.context.router.history.push(`/@${mention.get('acct')}`);\n    }\n  };\n\n  onHashtagClick = (hashtag, e) => {\n    hashtag = hashtag.replace(/^#/, '');\n\n    if (this.context.router && e.button === 0 && !(e.ctrlKey || e.metaKey)) {\n      e.preventDefault();\n      this.context.router.history.push(`/tags/${hashtag}`);\n    }\n  };\n\n  onStatusClick = (status, e) => {\n    if (this.context.router && e.button === 0 && !(e.ctrlKey || e.metaKey)) {\n      e.preventDefault();\n      this.context.router.history.push(`/@${status.getIn(['account', 'acct'])}/${status.get('id')}`);\n    }\n  };\n\n  handleMouseEnter = ({ currentTarget }) => {\n    if (autoPlayGif) {\n      return;\n    }\n\n    const emojis = currentTarget.querySelectorAll('.custom-emoji');\n\n    for (var i = 0; i < emojis.length; i++) {\n      let emoji = emojis[i];\n      emoji.src = emoji.getAttribute('data-original');\n    }\n  };\n\n  handleMouseLeave = ({ currentTarget }) => {\n    if (autoPlayGif) {\n      return;\n    }\n\n    const emojis = currentTarget.querySelectorAll('.custom-emoji');\n\n    for (var i = 0; i < emojis.length; i++) {\n      let emoji = emojis[i];\n      emoji.src = emoji.getAttribute('data-static');\n    }\n  };\n\n  render () {\n    const { announcement } = this.props;\n\n    return (\n      <div\n        className='announcements__item__content translate'\n        ref={this.setRef}\n        dangerouslySetInnerHTML={{ __html: announcement.get('contentHtml') }}\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n      />\n    );\n  }\n\n}\n\nclass Emoji extends React.PureComponent {\n\n  static propTypes = {\n    emoji: PropTypes.string.isRequired,\n    emojiMap: ImmutablePropTypes.map.isRequired,\n    hovered: PropTypes.bool.isRequired,\n  };\n\n  render () {\n    const { emoji, emojiMap, hovered } = this.props;\n\n    if (unicodeMapping[emoji]) {\n      const { filename, shortCode } = unicodeMapping[this.props.emoji];\n      const title = shortCode ? `:${shortCode}:` : '';\n\n      return (\n        <img\n          draggable='false'\n          className='emojione'\n          alt={emoji}\n          title={title}\n          src={`${assetHost}/emoji/${filename}.svg`}\n        />\n      );\n    } else if (emojiMap.get(emoji)) {\n      const filename  = (autoPlayGif || hovered) ? emojiMap.getIn([emoji, 'url']) : emojiMap.getIn([emoji, 'static_url']);\n      const shortCode = `:${emoji}:`;\n\n      return (\n        <img\n          draggable='false'\n          className='emojione custom-emoji'\n          alt={shortCode}\n          title={shortCode}\n          src={filename}\n        />\n      );\n    } else {\n      return null;\n    }\n  }\n\n}\n\nclass Reaction extends ImmutablePureComponent {\n\n  static propTypes = {\n    announcementId: PropTypes.string.isRequired,\n    reaction: ImmutablePropTypes.map.isRequired,\n    addReaction: PropTypes.func.isRequired,\n    removeReaction: PropTypes.func.isRequired,\n    emojiMap: ImmutablePropTypes.map.isRequired,\n    style: PropTypes.object,\n  };\n\n  state = {\n    hovered: false,\n  };\n\n  handleClick = () => {\n    const { reaction, announcementId, addReaction, removeReaction } = this.props;\n\n    if (reaction.get('me')) {\n      removeReaction(announcementId, reaction.get('name'));\n    } else {\n      addReaction(announcementId, reaction.get('name'));\n    }\n  };\n\n  handleMouseEnter = () => this.setState({ hovered: true });\n\n  handleMouseLeave = () => this.setState({ hovered: false });\n\n  render () {\n    const { reaction } = this.props;\n\n    let shortCode = reaction.get('name');\n\n    if (unicodeMapping[shortCode]) {\n      shortCode = unicodeMapping[shortCode].shortCode;\n    }\n\n    return (\n      <button className={classNames('reactions-bar__item', { active: reaction.get('me') })} onClick={this.handleClick} onMouseEnter={this.handleMouseEnter} onMouseLeave={this.handleMouseLeave} title={`:${shortCode}:`} style={this.props.style}>\n        <span className='reactions-bar__item__emoji'><Emoji hovered={this.state.hovered} emoji={reaction.get('name')} emojiMap={this.props.emojiMap} /></span>\n        <span className='reactions-bar__item__count'><AnimatedNumber value={reaction.get('count')} /></span>\n      </button>\n    );\n  }\n\n}\n\nclass ReactionsBar extends ImmutablePureComponent {\n\n  static propTypes = {\n    announcementId: PropTypes.string.isRequired,\n    reactions: ImmutablePropTypes.list.isRequired,\n    addReaction: PropTypes.func.isRequired,\n    removeReaction: PropTypes.func.isRequired,\n    emojiMap: ImmutablePropTypes.map.isRequired,\n  };\n\n  handleEmojiPick = data => {\n    const { addReaction, announcementId } = this.props;\n    addReaction(announcementId, data.native.replace(/:/g, ''));\n  };\n\n  willEnter () {\n    return { scale: reduceMotion ? 1 : 0 };\n  }\n\n  willLeave () {\n    return { scale: reduceMotion ? 0 : spring(0, { stiffness: 170, damping: 26 }) };\n  }\n\n  render () {\n    const { reactions } = this.props;\n    const visibleReactions = reactions.filter(x => x.get('count') > 0);\n\n    const styles = visibleReactions.map(reaction => ({\n      key: reaction.get('name'),\n      data: reaction,\n      style: { scale: reduceMotion ? 1 : spring(1, { stiffness: 150, damping: 13 }) },\n    })).toArray();\n\n    return (\n      <TransitionMotion styles={styles} willEnter={this.willEnter} willLeave={this.willLeave}>\n        {items => (\n          <div className={classNames('reactions-bar', { 'reactions-bar--empty': visibleReactions.isEmpty() })}>\n            {items.map(({ key, data, style }) => (\n              <Reaction\n                key={key}\n                reaction={data}\n                style={{ transform: `scale(${style.scale})`, position: style.scale < 0.5 ? 'absolute' : 'static' }}\n                announcementId={this.props.announcementId}\n                addReaction={this.props.addReaction}\n                removeReaction={this.props.removeReaction}\n                emojiMap={this.props.emojiMap}\n              />\n            ))}\n\n            {visibleReactions.size < 8 && <EmojiPickerDropdown onPickEmoji={this.handleEmojiPick} button={<Icon id='plus' />} />}\n          </div>\n        )}\n      </TransitionMotion>\n    );\n  }\n\n}\n\nclass Announcement extends ImmutablePureComponent {\n\n  static propTypes = {\n    announcement: ImmutablePropTypes.map.isRequired,\n    emojiMap: ImmutablePropTypes.map.isRequired,\n    addReaction: PropTypes.func.isRequired,\n    removeReaction: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    selected: PropTypes.bool,\n  };\n\n  state = {\n    unread: !this.props.announcement.get('read'),\n  };\n\n  componentDidUpdate () {\n    const { selected, announcement } = this.props;\n    if (!selected && this.state.unread !== !announcement.get('read')) {\n      this.setState({ unread: !announcement.get('read') });\n    }\n  }\n\n  render () {\n    const { announcement } = this.props;\n    const { unread } = this.state;\n    const startsAt = announcement.get('starts_at') && new Date(announcement.get('starts_at'));\n    const endsAt = announcement.get('ends_at') && new Date(announcement.get('ends_at'));\n    const now = new Date();\n    const hasTimeRange = startsAt && endsAt;\n    const skipYear = hasTimeRange && startsAt.getFullYear() === endsAt.getFullYear() && endsAt.getFullYear() === now.getFullYear();\n    const skipEndDate = hasTimeRange && startsAt.getDate() === endsAt.getDate() && startsAt.getMonth() === endsAt.getMonth() && startsAt.getFullYear() === endsAt.getFullYear();\n    const skipTime = announcement.get('all_day');\n\n    const formattedStartsAt = startsAt?.toLocaleString(undefined, {\n      hourCycle: 'h23',\n      year: (skipYear || startsAt.getFullYear() === now.getFullYear()) ? undefined : 'numeric',\n      month: 'short',\n      day: '2-digit',\n      hour: skipTime ? undefined : '2-digit',\n      minute: skipTime ? undefined : '2-digit',\n    });\n\n    const formattedEndsAt = endsAt?.toLocaleString(undefined, {\n      hourCycle: 'h23',\n      year: (skipYear || startsAt.getFullYear() === now.getFullYear()) ? undefined : 'numeric',\n      month: skipEndDate ? undefined : 'short',\n      day: skipEndDate ? undefined : '2-digit',\n      hour: skipTime ? undefined : '2-digit',\n      minute: skipTime ? undefined : '2-digit',\n    });\n\n    return (\n      <div className='announcements__item'>\n        <strong className='announcements__item__range'>\n          <FormattedMessage id='announcement.announcement' defaultMessage='Announcement' />\n          {hasTimeRange && <span> · {formattedStartsAt} - {formattedEndsAt}</span>}\n        </strong>\n\n        <Content announcement={announcement} />\n\n        <ReactionsBar\n          reactions={announcement.get('reactions')}\n          announcementId={announcement.get('id')}\n          addReaction={this.props.addReaction}\n          removeReaction={this.props.removeReaction}\n          emojiMap={this.props.emojiMap}\n        />\n\n        {unread && <span className='announcements__item__unread' />}\n      </div>\n    );\n  }\n\n}\n\nexport default @injectIntl\nclass Announcements extends ImmutablePureComponent {\n\n  static propTypes = {\n    announcements: ImmutablePropTypes.list,\n    emojiMap: ImmutablePropTypes.map.isRequired,\n    dismissAnnouncement: PropTypes.func.isRequired,\n    addReaction: PropTypes.func.isRequired,\n    removeReaction: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  state = {\n    index: 0,\n  };\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.announcements.size > 0 && state.index >= props.announcements.size) {\n      return { index: props.announcements.size - 1 };\n    } else {\n      return null;\n    }\n  }\n\n  componentDidMount () {\n    this._markAnnouncementAsRead();\n  }\n\n  componentDidUpdate () {\n    this._markAnnouncementAsRead();\n  }\n\n  _markAnnouncementAsRead () {\n    const { dismissAnnouncement, announcements } = this.props;\n    const { index } = this.state;\n    const announcement = announcements.get(announcements.size - 1 - index);\n    if (!announcement.get('read')) dismissAnnouncement(announcement.get('id'));\n  }\n\n  handleChangeIndex = index => {\n    this.setState({ index: index % this.props.announcements.size });\n  };\n\n  handleNextClick = () => {\n    this.setState({ index: (this.state.index + 1) % this.props.announcements.size });\n  };\n\n  handlePrevClick = () => {\n    this.setState({ index: (this.props.announcements.size + this.state.index - 1) % this.props.announcements.size });\n  };\n\n  render () {\n    const { announcements, intl } = this.props;\n    const { index } = this.state;\n\n    if (announcements.isEmpty()) {\n      return null;\n    }\n\n    return (\n      <div className='announcements'>\n        <img className='announcements__mastodon' alt='' draggable='false' src={mascot || elephantUIPlane} />\n\n        <div className='announcements__container'>\n          <ReactSwipeableViews animateHeight={!reduceMotion} adjustHeight={reduceMotion} index={index} onChangeIndex={this.handleChangeIndex}>\n            {announcements.map((announcement, idx) => (\n              <Announcement\n                key={announcement.get('id')}\n                announcement={announcement}\n                emojiMap={this.props.emojiMap}\n                addReaction={this.props.addReaction}\n                removeReaction={this.props.removeReaction}\n                intl={intl}\n                selected={index === idx}\n                disabled={disableSwiping}\n              />\n            )).reverse()}\n          </ReactSwipeableViews>\n\n          {announcements.size > 1 && (\n            <div className='announcements__pagination'>\n              <IconButton disabled={announcements.size === 1} title={intl.formatMessage(messages.previous)} icon='chevron-left' onClick={this.handlePrevClick} size={13} />\n              <span>{index + 1} / {announcements.size}</span>\n              <IconButton disabled={announcements.size === 1} title={intl.formatMessage(messages.next)} icon='chevron-right' onClick={this.handleNextClick} size={13} />\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport { addReaction, removeReaction, dismissAnnouncement } from 'mastodon/actions/announcements';\nimport Announcements from '../components/announcements';\nimport { createSelector } from 'reselect';\nimport { Map as ImmutableMap } from 'immutable';\n\nconst customEmojiMap = createSelector([state => state.get('custom_emojis')], items => items.reduce((map, emoji) => map.set(emoji.get('shortcode'), emoji), ImmutableMap()));\n\nconst mapStateToProps = state => ({\n  announcements: state.getIn(['announcements', 'items']),\n  emojiMap: customEmojiMap(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  dismissAnnouncement: id => dispatch(dismissAnnouncement(id)),\n  addReaction: (id, name) => dispatch(addReaction(id, name)),\n  removeReaction: (id, name) => dispatch(removeReaction(id, name)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Announcements);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { expandHomeTimeline } from '../../actions/timelines';\nimport PropTypes from 'prop-types';\nimport StatusListContainer from '../ui/containers/status_list_container';\nimport Column from '../../components/column';\nimport ColumnHeader from '../../components/column_header';\nimport { addColumn, removeColumn, moveColumn } from '../../actions/columns';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ColumnSettingsContainer from './containers/column_settings_container';\nimport { Link } from 'react-router-dom';\nimport { fetchAnnouncements, toggleShowAnnouncements } from 'mastodon/actions/announcements';\nimport AnnouncementsContainer from 'mastodon/features/getting_started/containers/announcements_container';\nimport classNames from 'classnames';\nimport IconWithBadge from 'mastodon/components/icon_with_badge';\nimport NotSignedInIndicator from 'mastodon/components/not_signed_in_indicator';\nimport { Helmet } from 'react-helmet';\n\nconst messages = defineMessages({\n  title: { id: 'column.home', defaultMessage: 'Home' },\n  show_announcements: { id: 'home.show_announcements', defaultMessage: 'Show announcements' },\n  hide_announcements: { id: 'home.hide_announcements', defaultMessage: 'Hide announcements' },\n});\n\nconst mapStateToProps = state => ({\n  hasUnread: state.getIn(['timelines', 'home', 'unread']) > 0,\n  isPartial: state.getIn(['timelines', 'home', 'isPartial']),\n  hasAnnouncements: !state.getIn(['announcements', 'items']).isEmpty(),\n  unreadAnnouncements: state.getIn(['announcements', 'items']).count(item => !item.get('read')),\n  showAnnouncements: state.getIn(['announcements', 'show']),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass HomeTimeline extends React.PureComponent {\n\n  static contextTypes = {\n    identity: PropTypes.object,\n  };\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    hasUnread: PropTypes.bool,\n    isPartial: PropTypes.bool,\n    columnId: PropTypes.string,\n    multiColumn: PropTypes.bool,\n    hasAnnouncements: PropTypes.bool,\n    unreadAnnouncements: PropTypes.number,\n    showAnnouncements: PropTypes.bool,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('HOME', {}));\n    }\n  };\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  };\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  };\n\n  setRef = c => {\n    this.column = c;\n  };\n\n  handleLoadMore = maxId => {\n    this.props.dispatch(expandHomeTimeline({ maxId }));\n  };\n\n  componentDidMount () {\n    setTimeout(() => this.props.dispatch(fetchAnnouncements()), 700);\n    this._checkIfReloadNeeded(false, this.props.isPartial);\n  }\n\n  componentDidUpdate (prevProps) {\n    this._checkIfReloadNeeded(prevProps.isPartial, this.props.isPartial);\n  }\n\n  componentWillUnmount () {\n    this._stopPolling();\n  }\n\n  _checkIfReloadNeeded (wasPartial, isPartial) {\n    const { dispatch } = this.props;\n\n    if (wasPartial === isPartial) {\n      return;\n    } else if (!wasPartial && isPartial) {\n      this.polling = setInterval(() => {\n        dispatch(expandHomeTimeline());\n      }, 3000);\n    } else if (wasPartial && !isPartial) {\n      this._stopPolling();\n    }\n  }\n\n  _stopPolling () {\n    if (this.polling) {\n      clearInterval(this.polling);\n      this.polling = null;\n    }\n  }\n\n  handleToggleAnnouncementsClick = (e) => {\n    e.stopPropagation();\n    this.props.dispatch(toggleShowAnnouncements());\n  };\n\n  render () {\n    const { intl, hasUnread, columnId, multiColumn, hasAnnouncements, unreadAnnouncements, showAnnouncements } = this.props;\n    const pinned = !!columnId;\n    const { signedIn } = this.context.identity;\n\n    let announcementsButton = null;\n\n    if (hasAnnouncements) {\n      announcementsButton = (\n        <button\n          type='button'\n          className={classNames('column-header__button', { 'active': showAnnouncements })}\n          title={intl.formatMessage(showAnnouncements ? messages.hide_announcements : messages.show_announcements)}\n          aria-label={intl.formatMessage(showAnnouncements ? messages.hide_announcements : messages.show_announcements)}\n          onClick={this.handleToggleAnnouncementsClick}\n        >\n          <IconWithBadge id='bullhorn' count={unreadAnnouncements} />\n        </button>\n      );\n    }\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='home'\n          active={hasUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n          extraButton={announcementsButton}\n          appendContent={hasAnnouncements && showAnnouncements && <AnnouncementsContainer />}\n        >\n          <ColumnSettingsContainer />\n        </ColumnHeader>\n\n        {signedIn ? (\n          <StatusListContainer\n            trackScroll={!pinned}\n            scrollKey={`home_timeline-${columnId}`}\n            onLoadMore={this.handleLoadMore}\n            timelineId='home'\n            emptyMessage={<FormattedMessage id='empty_column.home' defaultMessage='Your home timeline is empty! Follow more people to fill it up. {suggestions}' values={{ suggestions: <Link to='/start'><FormattedMessage id='empty_column.home.suggestions' defaultMessage='See some suggestions' /></Link> }} />}\n            bindToDocument={!multiColumn}\n          />\n        ) : <NotSignedInIndicator />}\n\n        <Helmet>\n          <title>{intl.formatMessage(messages.title)}</title>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}