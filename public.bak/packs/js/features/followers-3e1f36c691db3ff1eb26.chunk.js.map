{"version":3,"sources":["webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/followers/index.jsx"],"names":["RemoteHint","_ref2","url","_jsx","TimelineHint","resource","FormattedMessage","id","defaultMessage","Followers","connect","mapStateToProps","state","_ref","params","acct","accountId","getIn","normalizeForLookup","remote","remoteUrl","isAccount","accountIds","hasMore","isLoading","suspended","hidden","getAccountHidden","blockedBy","_dec","_class2","ImmutablePureComponent","constructor","arguments","handleLoadMore","_debounce","this","props","dispatch","expandFollowers","leading","_load","fetchAccount","fetchFollowers","componentDidMount","lookupAccount","componentDidUpdate","prevProps","render","multiColumn","Column","MissingIndicator","LoadingIndicator","emptyMessage","forceEmptyState","LimitedAccountHint","isEmpty","remoteMessage","ColumnBackButton","ScrollableList","scrollKey","onLoadMore","prepend","HeaderContainer","hideTabs","alwaysPrepend","append","bindToDocument","map","AccountContainer","withNote","propTypes","PropTypes","shape","string","isRequired","func","ImmutablePropTypes","list","bool","_class"],"mappings":"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","file":"js/features/followers-3e1f36c691db3ff1eb26.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { debounce } from 'lodash';\nimport LoadingIndicator from '../../components/loading_indicator';\nimport {\n  lookupAccount,\n  fetchAccount,\n  fetchFollowers,\n  expandFollowers,\n} from '../../actions/accounts';\nimport { FormattedMessage } from 'react-intl';\nimport AccountContainer from '../../containers/account_container';\nimport Column from '../ui/components/column';\nimport HeaderContainer from '../account_timeline/containers/header_container';\nimport ColumnBackButton from '../../components/column_back_button';\nimport ScrollableList from '../../components/scrollable_list';\nimport MissingIndicator from 'mastodon/components/missing_indicator';\nimport TimelineHint from 'mastodon/components/timeline_hint';\nimport LimitedAccountHint from '../account_timeline/components/limited_account_hint';\nimport { getAccountHidden } from 'mastodon/selectors';\nimport { normalizeForLookup } from 'mastodon/reducers/accounts_map';\n\nconst mapStateToProps = (state, { params: { acct, id } }) => {\n  const accountId = id || state.getIn(['accounts_map', normalizeForLookup(acct)]);\n\n  if (!accountId) {\n    return {\n      isLoading: true,\n    };\n  }\n\n  return {\n    accountId,\n    remote: !!(state.getIn(['accounts', accountId, 'acct']) !== state.getIn(['accounts', accountId, 'username'])),\n    remoteUrl: state.getIn(['accounts', accountId, 'url']),\n    isAccount: !!state.getIn(['accounts', accountId]),\n    accountIds: state.getIn(['user_lists', 'followers', accountId, 'items']),\n    hasMore: !!state.getIn(['user_lists', 'followers', accountId, 'next']),\n    isLoading: state.getIn(['user_lists', 'followers', accountId, 'isLoading'], true),\n    suspended: state.getIn(['accounts', accountId, 'suspended'], false),\n    hidden: getAccountHidden(state, accountId),\n    blockedBy: state.getIn(['relationships', accountId, 'blocked_by'], false),\n  };\n};\n\nconst RemoteHint = ({ url }) => (\n  <TimelineHint url={url} resource={<FormattedMessage id='timeline_hint.resources.followers' defaultMessage='Followers' />} />\n);\n\nRemoteHint.propTypes = {\n  url: PropTypes.string.isRequired,\n};\n\nexport default @connect(mapStateToProps)\nclass Followers extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.shape({\n      acct: PropTypes.string,\n      id: PropTypes.string,\n    }).isRequired,\n    accountId: PropTypes.string,\n    dispatch: PropTypes.func.isRequired,\n    accountIds: ImmutablePropTypes.list,\n    hasMore: PropTypes.bool,\n    isLoading: PropTypes.bool,\n    blockedBy: PropTypes.bool,\n    isAccount: PropTypes.bool,\n    suspended: PropTypes.bool,\n    hidden: PropTypes.bool,\n    remote: PropTypes.bool,\n    remoteUrl: PropTypes.string,\n    multiColumn: PropTypes.bool,\n  };\n\n  _load () {\n    const { accountId, isAccount, dispatch } = this.props;\n\n    if (!isAccount) dispatch(fetchAccount(accountId));\n    dispatch(fetchFollowers(accountId));\n  }\n\n  componentDidMount () {\n    const { params: { acct }, accountId, dispatch } = this.props;\n\n    if (accountId) {\n      this._load();\n    } else {\n      dispatch(lookupAccount(acct));\n    }\n  }\n\n  componentDidUpdate (prevProps) {\n    const { params: { acct }, accountId, dispatch } = this.props;\n\n    if (prevProps.accountId !== accountId && accountId) {\n      this._load();\n    } else if (prevProps.params.acct !== acct) {\n      dispatch(lookupAccount(acct));\n    }\n  }\n\n  handleLoadMore = debounce(() => {\n    this.props.dispatch(expandFollowers(this.props.accountId));\n  }, 300, { leading: true });\n\n  render () {\n    const { accountId, accountIds, hasMore, blockedBy, isAccount, multiColumn, isLoading, suspended, hidden, remote, remoteUrl } = this.props;\n\n    if (!isAccount) {\n      return (\n        <Column>\n          <MissingIndicator />\n        </Column>\n      );\n    }\n\n    if (!accountIds) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    let emptyMessage;\n\n    const forceEmptyState = blockedBy || suspended || hidden;\n\n    if (suspended) {\n      emptyMessage = <FormattedMessage id='empty_column.account_suspended' defaultMessage='Account suspended' />;\n    } else if (hidden) {\n      emptyMessage = <LimitedAccountHint accountId={accountId} />;\n    } else if (blockedBy) {\n      emptyMessage = <FormattedMessage id='empty_column.account_unavailable' defaultMessage='Profile unavailable' />;\n    } else if (remote && accountIds.isEmpty()) {\n      emptyMessage = <RemoteHint url={remoteUrl} />;\n    } else {\n      emptyMessage = <FormattedMessage id='account.followers.empty' defaultMessage='No one follows this user yet.' />;\n    }\n\n    const remoteMessage = remote ? <RemoteHint url={remoteUrl} /> : null;\n\n    return (\n      <Column>\n        <ColumnBackButton multiColumn={multiColumn} />\n\n        <ScrollableList\n          scrollKey='followers'\n          hasMore={!forceEmptyState && hasMore}\n          isLoading={isLoading}\n          onLoadMore={this.handleLoadMore}\n          prepend={<HeaderContainer accountId={this.props.accountId} hideTabs />}\n          alwaysPrepend\n          append={remoteMessage}\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n        >\n          {forceEmptyState ? [] : accountIds.map(id =>\n            <AccountContainer key={id} id={id} withNote={false} />,\n          )}\n        </ScrollableList>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}