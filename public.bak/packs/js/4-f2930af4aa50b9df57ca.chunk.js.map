{"version":3,"sources":["webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/components/admin/Dimension.js"],"names":["Dimension","React","PureComponent","state","loading","data","componentDidMount","start_at","end_at","dimension","limit","params","this","props","api","post","keys","then","res","setState","catch","err","console","error","render","label","content","Array","from","map","_","i","className","width","sum","reduce","cur","value","item","key","roundTo10","title","human_key","human_value"],"mappings":"oMAOe,MAAMA,UAAkBC,IAAMC,cAAe,cAAD,yBAWzDC,MAAQ,CACNC,SAAS,EACTC,KAAM,MAGRC,oBACE,MAAM,SAAEC,EAAQ,OAAEC,EAAM,UAAEC,EAAS,MAAEC,EAAK,OAAEC,GAAWC,KAAKC,MAE5DC,cAAMC,KAAK,2BAA4B,CAAEC,KAAM,CAACP,GAAYF,WAAUC,SAAQE,QAAO,CAACD,GAAYE,IAAUM,MAAKC,IAC/GN,KAAKO,SAAS,CACZf,SAAS,EACTC,KAAMa,EAAIb,UAEXe,OAAMC,IACPC,QAAQC,MAAMF,MAIlBG,SACE,MAAM,MAAEC,EAAK,MAAEf,GAAUE,KAAKC,OACxB,QAAET,EAAO,KAAEC,GAASO,KAAKT,MAE/B,IAAIuB,EAEJ,GAAItB,EACFsB,EACE,8BACE,8BACGC,MAAMC,KAAKD,MAAMjB,IAAQmB,KAAI,CAACC,EAAGC,IAChC,kBAAIC,UAAU,mBAAuBD,EACnC,kBAAIC,UAAU,6BAAsB,EAClC,YAAC,IAAQ,CAACC,MAAO,OAGnB,kBAAID,UAAU,+BAAwB,EACpC,YAAC,IAAQ,CAACC,MAAO,eAOxB,CACL,MAAMC,EAAM7B,EAAK,GAAGA,KAAK8B,QAAO,CAACD,EAAKE,IAAQF,EAAmB,EAAZE,EAAIC,OAAY,GAErEX,EACE,8BACE,8BACGrB,EAAK,GAAGA,KAAKwB,KAAIS,GAChB,kBAAIN,UAAU,mBAAuBM,EAAKC,IACxC,kBAAIP,UAAU,6BAAsB,EAClC,oBAAMA,UAAY,0DAAyDQ,YAAyB,EAAbF,EAAKD,MAAaH,EAAO,SAChH,oBAAMO,MAAOH,EAAKC,UAAI,EAAED,EAAKI,YAG/B,kBAAIV,UAAU,+BAAwB,OACP,IAArBM,EAAKK,YAA8BL,EAAKK,YAAc,YAAC,IAAe,CAACN,MAAOC,EAAKD,cASzG,OACE,mBAAKL,UAAU,kBAAW,EACxB,2BAAKP,GAEJC","file":"js/4-f2930af4aa50b9df57ca.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport api from 'flavours/glitch/api';\nimport { FormattedNumber } from 'react-intl';\nimport { roundTo10 } from 'flavours/glitch/utils/numbers';\nimport Skeleton from 'flavours/glitch/components/skeleton';\n\nexport default class Dimension extends React.PureComponent {\n\n  static propTypes = {\n    dimension: PropTypes.string.isRequired,\n    start_at: PropTypes.string.isRequired,\n    end_at: PropTypes.string.isRequired,\n    limit: PropTypes.number.isRequired,\n    label: PropTypes.string.isRequired,\n    params: PropTypes.object,\n  };\n\n  state = {\n    loading: true,\n    data: null,\n  };\n\n  componentDidMount () {\n    const { start_at, end_at, dimension, limit, params } = this.props;\n\n    api().post('/api/v1/admin/dimensions', { keys: [dimension], start_at, end_at, limit, [dimension]: params }).then(res => {\n      this.setState({\n        loading: false,\n        data: res.data,\n      });\n    }).catch(err => {\n      console.error(err);\n    });\n  }\n\n  render () {\n    const { label, limit } = this.props;\n    const { loading, data } = this.state;\n\n    let content;\n\n    if (loading) {\n      content = (\n        <table>\n          <tbody>\n            {Array.from(Array(limit)).map((_, i) => (\n              <tr className='dimension__item' key={i}>\n                <td className='dimension__item__key'>\n                  <Skeleton width={100} />\n                </td>\n\n                <td className='dimension__item__value'>\n                  <Skeleton width={60} />\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      );\n    } else {\n      const sum = data[0].data.reduce((sum, cur) => sum + (cur.value * 1), 0);\n\n      content = (\n        <table>\n          <tbody>\n            {data[0].data.map(item => (\n              <tr className='dimension__item' key={item.key}>\n                <td className='dimension__item__key'>\n                  <span className={`dimension__item__indicator dimension__item__indicator--${roundTo10(((item.value * 1) / sum) * 100)}`} />\n                  <span title={item.key}>{item.human_key}</span>\n                </td>\n\n                <td className='dimension__item__value'>\n                  {typeof item.human_value !== 'undefined' ? item.human_value : <FormattedNumber value={item.value} />}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      );\n    }\n\n    return (\n      <div className='dimension'>\n        <h4>{label}</h4>\n\n        {content}\n      </div>\n    );\n  }\n\n}\n"],"sourceRoot":""}