{"version":3,"sources":["webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/direct_timeline/components/column_settings.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/direct_timeline/containers/column_settings_container.js","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/components/avatar_composite.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/direct_timeline/components/conversation.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/direct_timeline/containers/conversation_container.js","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/direct_timeline/components/conversations_list.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/direct_timeline/containers/conversations_list_container.js","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/direct_timeline/index.jsx"],"names":["messages","defineMessages","filter_regex","settings","ColumnSettings","injectIntl","_class","React","PureComponent","render","onChange","intl","this","props","_jsx","className","FormattedMessage","id","defaultMessage","SettingToggle","settingPath","label","SettingText","formatMessage","connect","state","getIn","dispatch","path","checked","changeSetting","AvatarComposite","renderItem","account","size","index","animate","width","height","top","left","bottom","right","style","backgroundSize","backgroundImage","get","href","target","onClick","e","onAccountClick","title","accounts","take","map","i","Math","min","defaultProps","autoPlayGif","more","open","reply","markAsRead","delete","muteConversation","unmuteConversation","Conversation","_class2","ImmutablePureComponent","constructor","arguments","isExpanded","undefined","parseClick","destination","router","context","lastStatus","unread","markRead","button","ctrlKey","altKey","metaKey","history","location","mastodonBackSteps","push","preventDefault","handleMouseEnter","_ref","currentTarget","emojis","querySelectorAll","length","emoji","src","getAttribute","handleMouseLeave","_ref2","handleClick","handleMarkAsRead","handleReply","handleDelete","handleHotkeyMoveUp","onMoveUp","conversationId","handleHotkeyMoveDown","onMoveDown","handleConversationMute","onMute","handleShowMore","onToggleHidden","setExpansion","value","setState","scrollKey","menu","text","action","names","a","Permalink","to","dangerouslySetInnerHTML","__html","reduce","prev","cur","handlers","moveUp","moveDown","toggleHidden","media","AttachmentList","compact","HotKeys","classNames","tabIndex","role","RelativeTimestamp","timestamp","onMouseEnter","onMouseLeave","values","StatusContent","status","expanded","onExpandedToggle","collapsable","zoomEmojisOnHover","IconButton","icon","DropdownMenuContainer","items","direction","contextTypes","PropTypes","object","propTypes","string","isRequired","ImmutablePropTypes","list","bool","func","replyConfirm","replyMessage","mapStateToProps","getStatus","makeGetStatus","conversation","find","x","lastStatusId","accountId","mapDispatchToProps","markConversationRead","_","getState","trim","openModal","message","confirm","onConfirm","replyCompose","deleteConversation","unmuteStatus","muteStatus","revealStatus","hideStatus","ConversationsList","getCurrentIndex","conversations","findIndex","handleMoveUp","elementIndex","_selectChild","handleMoveDown","setRef","c","node","handleLoadOlder","_debounce","last","onLoadMore","leading","align_top","container","element","querySelector","scrollTop","offsetTop","scrollIntoView","clientHeight","offsetHeight","focus","other","createElement","ScrollableList","_extends","ref","item","ConversationContainer","hasMore","isLoading","maxId","expandConversations","DirectTimeline","hasUnread","conversationsMode","_dec","handlePin","columnId","removeColumn","addColumn","handleMove","dir","moveColumn","handleHeaderClick","column","handleLoadMoreTimeline","expandDirectTimeline","handleLoadMoreConversations","componentDidMount","mountConversations","disconnect","connectDirectStream","componentDidUpdate","prevProps","componentWillUnmount","unmountConversations","multiColumn","pinned","contents","ConversationsListContainer","trackScroll","timelineId","handleLoadMore","prepend","emptyMessage","StatusListContainer","Column","bindToDocument","ColumnHeader","active","onPin","onMove","ColumnSettingsContainer","Helmet","name","content"],"mappings":"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","file":"js/flavours/glitch/async/direct_timeline-945a40bfa1af42f846ce.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport SettingToggle from 'flavours/glitch/features/notifications/components/setting_toggle';\nimport SettingText from '../../../components/setting_text';\n\nconst messages = defineMessages({\n  filter_regex: { id: 'home.column_settings.filter_regex', defaultMessage: 'Filter out by regular expressions' },\n  settings: { id: 'home.settings', defaultMessage: 'Column settings' },\n});\n\nexport default @injectIntl\nclass ColumnSettings extends React.PureComponent {\n\n  static propTypes = {\n    settings: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  render () {\n    const { settings, onChange, intl } = this.props;\n\n    return (\n      <div>\n        <span className='column-settings__section'><FormattedMessage id='home.column_settings.basic' defaultMessage='Basic' /></span>\n\n        <div className='column-settings__row'>\n          <SettingToggle settings={settings} settingPath={['conversations']} onChange={onChange} label={<FormattedMessage id='direct.group_by_conversations' defaultMessage='Group by conversation' />} />\n        </div>\n\n        <span className='column-settings__section'><FormattedMessage id='home.column_settings.advanced' defaultMessage='Advanced' /></span>\n\n        <div className='column-settings__row'>\n          <SettingText settings={settings} settingPath={['regex', 'body']} onChange={onChange} label={intl.formatMessage(messages.filter_regex)} />\n        </div>\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport ColumnSettings from '../components/column_settings';\nimport { changeSetting } from 'flavours/glitch/actions/settings';\n\nconst mapStateToProps = state => ({\n  settings: state.getIn(['settings', 'direct']),\n});\n\nconst mapDispatchToProps = dispatch => ({\n\n  onChange (path, checked) {\n    dispatch(changeSetting(['direct', ...path], checked));\n  },\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ColumnSettings);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { autoPlayGif } from 'flavours/glitch/initial_state';\n\nexport default class AvatarComposite extends React.PureComponent {\n\n  static propTypes = {\n    accounts: ImmutablePropTypes.list.isRequired,\n    animate: PropTypes.bool,\n    size: PropTypes.number.isRequired,\n  };\n\n  static defaultProps = {\n    animate: autoPlayGif,\n  };\n\n  renderItem (account, size, index) {\n    const { animate } = this.props;\n\n    let width  = 50;\n    let height = 100;\n    let top    = 'auto';\n    let left   = 'auto';\n    let bottom = 'auto';\n    let right  = 'auto';\n\n    if (size === 1) {\n      width = 100;\n    }\n\n    if (size === 4 || (size === 3 && index > 0)) {\n      height = 50;\n    }\n\n    if (size === 2) {\n      if (index === 0) {\n        right = '1px';\n      } else {\n        left = '1px';\n      }\n    } else if (size === 3) {\n      if (index === 0) {\n        right = '1px';\n      } else if (index > 0) {\n        left = '1px';\n      }\n\n      if (index === 1) {\n        bottom = '1px';\n      } else if (index > 1) {\n        top = '1px';\n      }\n    } else if (size === 4) {\n      if (index === 0 || index === 2) {\n        right = '1px';\n      }\n\n      if (index === 1 || index === 3) {\n        left = '1px';\n      }\n\n      if (index < 2) {\n        bottom = '1px';\n      } else {\n        top = '1px';\n      }\n    }\n\n    const style = {\n      left: left,\n      top: top,\n      right: right,\n      bottom: bottom,\n      width: `${width}%`,\n      height: `${height}%`,\n      backgroundSize: 'cover',\n      backgroundImage: `url(${account.get(animate ? 'avatar' : 'avatar_static')})`,\n    };\n\n    return (\n      <a\n        href={account.get('url')}\n        target='_blank'\n        onClick={(e) => this.props.onAccountClick(account.get('acct'), e)}\n        title={`@${account.get('acct')}`}\n        key={account.get('id')}\n      >\n        <div style={style} data-avatar-of={`@${account.get('acct')}`} />\n      </a>\n    );\n  }\n\n  render() {\n    const { accounts, size } = this.props;\n\n    return (\n      <div className='account__avatar-composite' style={{ width: `${size}px`, height: `${size}px` }}>\n        {accounts.take(4).map((account, i) => this.renderItem(account, Math.min(accounts.size, 4), i))}\n\n        {accounts.size > 4 && (\n          <span className='account__avatar-composite__label'>\n            +{accounts.size - 4}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport StatusContent from 'flavours/glitch/components/status_content';\nimport AttachmentList from 'flavours/glitch/components/attachment_list';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport DropdownMenuContainer from 'flavours/glitch/containers/dropdown_menu_container';\nimport AvatarComposite from 'flavours/glitch/components/avatar_composite';\nimport Permalink from 'flavours/glitch/components/permalink';\nimport IconButton from 'flavours/glitch/components/icon_button';\nimport RelativeTimestamp from 'flavours/glitch/components/relative_timestamp';\nimport { HotKeys } from 'react-hotkeys';\nimport { autoPlayGif } from 'flavours/glitch/initial_state';\nimport classNames from 'classnames';\n\nconst messages = defineMessages({\n  more: { id: 'status.more', defaultMessage: 'More' },\n  open: { id: 'conversation.open', defaultMessage: 'View conversation' },\n  reply: { id: 'status.reply', defaultMessage: 'Reply' },\n  markAsRead: { id: 'conversation.mark_as_read', defaultMessage: 'Mark as read' },\n  delete: { id: 'conversation.delete', defaultMessage: 'Delete conversation' },\n  muteConversation: { id: 'status.mute_conversation', defaultMessage: 'Mute conversation' },\n  unmuteConversation: { id: 'status.unmute_conversation', defaultMessage: 'Unmute conversation' },\n});\n\nexport default @injectIntl\nclass Conversation extends ImmutablePureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    conversationId: PropTypes.string.isRequired,\n    accounts: ImmutablePropTypes.list.isRequired,\n    lastStatus: ImmutablePropTypes.map,\n    unread:PropTypes.bool.isRequired,\n    scrollKey: PropTypes.string,\n    onMoveUp: PropTypes.func,\n    onMoveDown: PropTypes.func,\n    markRead: PropTypes.func.isRequired,\n    delete: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  state = {\n    isExpanded: undefined,\n  };\n\n  parseClick = (e, destination) => {\n    const { router } = this.context;\n    const { lastStatus, unread, markRead } = this.props;\n    if (!router) return;\n\n    if (e.button === 0 && !(e.ctrlKey || e.altKey || e.metaKey)) {\n      if (destination === undefined) {\n        if (unread) {\n          markRead();\n        }\n        destination = `/statuses/${lastStatus.get('id')}`;\n      }\n      let state = { ...router.history.location.state };\n      state.mastodonBackSteps = (state.mastodonBackSteps || 0) + 1;\n      router.history.push(destination, state);\n      e.preventDefault();\n    }\n  };\n\n  handleMouseEnter = ({ currentTarget }) => {\n    if (autoPlayGif) {\n      return;\n    }\n\n    const emojis = currentTarget.querySelectorAll('.custom-emoji');\n\n    for (var i = 0; i < emojis.length; i++) {\n      let emoji = emojis[i];\n      emoji.src = emoji.getAttribute('data-original');\n    }\n  };\n\n  handleMouseLeave = ({ currentTarget }) => {\n    if (autoPlayGif) {\n      return;\n    }\n\n    const emojis = currentTarget.querySelectorAll('.custom-emoji');\n\n    for (var i = 0; i < emojis.length; i++) {\n      let emoji = emojis[i];\n      emoji.src = emoji.getAttribute('data-static');\n    }\n  };\n\n  handleClick = () => {\n    if (!this.context.router) {\n      return;\n    }\n\n    const { lastStatus, unread, markRead } = this.props;\n\n    if (unread) {\n      markRead();\n    }\n\n    this.context.router.history.push(`/@${lastStatus.getIn(['account', 'acct'])}/${lastStatus.get('id')}`);\n  };\n\n  handleMarkAsRead = () => {\n    this.props.markRead();\n  };\n\n  handleReply = () => {\n    this.props.reply(this.props.lastStatus, this.context.router.history);\n  };\n\n  handleDelete = () => {\n    this.props.delete();\n  };\n\n  handleHotkeyMoveUp = () => {\n    this.props.onMoveUp(this.props.conversationId);\n  };\n\n  handleHotkeyMoveDown = () => {\n    this.props.onMoveDown(this.props.conversationId);\n  };\n\n  handleConversationMute = () => {\n    this.props.onMute(this.props.lastStatus);\n  };\n\n  handleShowMore = () => {\n    this.props.onToggleHidden(this.props.lastStatus);\n\n    if (this.props.lastStatus.get('spoiler_text')) {\n      this.setExpansion(!this.state.isExpanded);\n    }\n  };\n\n  setExpansion = value => {\n    this.setState({ isExpanded: value });\n  };\n\n  render () {\n    const { accounts, lastStatus, unread, scrollKey, intl, settings } = this.props;\n\n    if (lastStatus === null) {\n      return null;\n    }\n\n    const isExpanded = settings.getIn(['content_warnings', 'shared_state']) ? !lastStatus.get('hidden') : this.state.isExpanded;\n\n    const menu = [\n      { text: intl.formatMessage(messages.open), action: this.handleClick },\n      null,\n    ];\n\n    menu.push({ text: intl.formatMessage(lastStatus.get('muted') ? messages.unmuteConversation : messages.muteConversation), action: this.handleConversationMute });\n\n    if (unread) {\n      menu.push({ text: intl.formatMessage(messages.markAsRead), action: this.handleMarkAsRead });\n      menu.push(null);\n    }\n\n    menu.push({ text: intl.formatMessage(messages.delete), action: this.handleDelete });\n\n    const names = accounts.map(a => <Permalink to={`/@${a.get('acct')}`} href={a.get('url')} key={a.get('id')} title={a.get('acct')}><bdi><strong className='display-name__html' dangerouslySetInnerHTML={{ __html: a.get('display_name_html') }} /></bdi></Permalink>).reduce((prev, cur) => [prev, ', ', cur]);\n\n    const handlers = {\n      reply: this.handleReply,\n      open: this.handleClick,\n      moveUp: this.handleHotkeyMoveUp,\n      moveDown: this.handleHotkeyMoveDown,\n      toggleHidden: this.handleShowMore,\n    };\n\n    let media = null;\n    if (lastStatus.get('media_attachments').size > 0) {\n      media = <AttachmentList compact media={lastStatus.get('media_attachments')} />;\n    }\n\n    return (\n      <HotKeys handlers={handlers}>\n        <div className={classNames('conversation focusable muted', { 'conversation--unread': unread })} tabIndex='0'>\n          <div className='conversation__avatar' onClick={this.handleClick} role='presentation'>\n            <AvatarComposite accounts={accounts} size={48} />\n          </div>\n\n          <div className='conversation__content'>\n            <div className='conversation__content__info'>\n              <div className='conversation__content__relative-time'>\n                {unread && <span className='conversation__unread' />} <RelativeTimestamp timestamp={lastStatus.get('created_at')} />\n              </div>\n\n              <div className='conversation__content__names' onMouseEnter={this.handleMouseEnter} onMouseLeave={this.handleMouseLeave}>\n                <FormattedMessage id='conversation.with' defaultMessage='With {names}' values={{ names: <span>{names}</span> }} />\n              </div>\n            </div>\n\n            <StatusContent\n              status={lastStatus}\n              parseClick={this.parseClick}\n              expanded={isExpanded}\n              onExpandedToggle={this.handleShowMore}\n              collapsable\n              media={media}\n              zoomEmojisOnHover={settings.get('zoom_emojis_on_hover')}\n            />\n\n            <div className='status__action-bar'>\n              <IconButton className='status__action-bar-button' title={intl.formatMessage(messages.reply)} icon='reply' onClick={this.handleReply} />\n\n              <div className='status__action-bar-dropdown'>\n                <DropdownMenuContainer\n                  scrollKey={scrollKey}\n                  status={lastStatus}\n                  items={menu}\n                  icon='ellipsis-h'\n                  size={18}\n                  direction='right'\n                  title={intl.formatMessage(messages.more)}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </HotKeys>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport Conversation from '../components/conversation';\nimport { markConversationRead, deleteConversation } from 'flavours/glitch/actions/conversations';\nimport { makeGetStatus } from 'flavours/glitch/selectors';\nimport { replyCompose } from 'flavours/glitch/actions/compose';\nimport { openModal } from 'flavours/glitch/actions/modal';\nimport { muteStatus, unmuteStatus, hideStatus, revealStatus } from 'flavours/glitch/actions/statuses';\nimport { defineMessages, injectIntl } from 'react-intl';\n\nconst messages = defineMessages({\n  replyConfirm: { id: 'confirmations.reply.confirm', defaultMessage: 'Reply' },\n  replyMessage: { id: 'confirmations.reply.message', defaultMessage: 'Replying now will overwrite the message you are currently composing. Are you sure you want to proceed?' },\n});\n\nconst mapStateToProps = () => {\n  const getStatus = makeGetStatus();\n\n  return (state, { conversationId }) => {\n    const conversation = state.getIn(['conversations', 'items']).find(x => x.get('id') === conversationId);\n    const lastStatusId = conversation.get('last_status', null);\n\n    return {\n      accounts: conversation.get('accounts').map(accountId => state.getIn(['accounts', accountId], null)),\n      unread: conversation.get('unread'),\n      lastStatus: lastStatusId && getStatus(state, { id: lastStatusId }),\n      settings: state.get('local_settings'),\n    };\n  };\n};\n\nconst mapDispatchToProps = (dispatch, { intl, conversationId }) => ({\n\n  markRead () {\n    dispatch(markConversationRead(conversationId));\n  },\n\n  reply (status, router) {\n    dispatch((_, getState) => {\n      let state = getState();\n\n      if (state.getIn(['compose', 'text']).trim().length !== 0) {\n        dispatch(openModal('CONFIRM', {\n          message: intl.formatMessage(messages.replyMessage),\n          confirm: intl.formatMessage(messages.replyConfirm),\n          onConfirm: () => dispatch(replyCompose(status, router)),\n        }));\n      } else {\n        dispatch(replyCompose(status, router));\n      }\n    });\n  },\n\n  delete () {\n    dispatch(deleteConversation(conversationId));\n  },\n\n  onMute (status) {\n    if (status.get('muted')) {\n      dispatch(unmuteStatus(status.get('id')));\n    } else {\n      dispatch(muteStatus(status.get('id')));\n    }\n  },\n\n  onToggleHidden (status) {\n    if (status.get('hidden')) {\n      dispatch(revealStatus(status.get('id')));\n    } else {\n      dispatch(hideStatus(status.get('id')));\n    }\n  },\n\n});\n\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(Conversation));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport ConversationContainer from '../containers/conversation_container';\nimport ScrollableList from 'flavours/glitch/components/scrollable_list';\nimport { debounce } from 'lodash';\n\nexport default class ConversationsList extends ImmutablePureComponent {\n\n  static propTypes = {\n    conversations: ImmutablePropTypes.list.isRequired,\n    scrollKey: PropTypes.string.isRequired,\n    hasMore: PropTypes.bool,\n    isLoading: PropTypes.bool,\n    onLoadMore: PropTypes.func,\n  };\n\n  getCurrentIndex = id => this.props.conversations.findIndex(x => x.get('id') === id);\n\n  handleMoveUp = id => {\n    const elementIndex = this.getCurrentIndex(id) - 1;\n    this._selectChild(elementIndex, true);\n  };\n\n  handleMoveDown = id => {\n    const elementIndex = this.getCurrentIndex(id) + 1;\n    this._selectChild(elementIndex, false);\n  };\n\n  _selectChild (index, align_top) {\n    const container = this.node.node;\n    const element = container.querySelector(`article:nth-of-type(${index + 1}) .focusable`);\n\n    if (element) {\n      if (align_top && container.scrollTop > element.offsetTop) {\n        element.scrollIntoView(true);\n      } else if (!align_top && container.scrollTop + container.clientHeight < element.offsetTop + element.offsetHeight) {\n        element.scrollIntoView(false);\n      }\n      element.focus();\n    }\n  }\n\n  setRef = c => {\n    this.node = c;\n  };\n\n  handleLoadOlder = debounce(() => {\n    const last = this.props.conversations.last();\n\n    if (last && last.get('last_status')) {\n      this.props.onLoadMore(last.get('last_status'));\n    }\n  }, 300, { leading: true });\n\n  render () {\n    const { conversations, onLoadMore, ...other } = this.props;\n\n    return (\n      <ScrollableList {...other} onLoadMore={onLoadMore && this.handleLoadOlder} ref={this.setRef}>\n        {conversations.map(item => (\n          <ConversationContainer\n            key={item.get('id')}\n            conversationId={item.get('id')}\n            onMoveUp={this.handleMoveUp}\n            onMoveDown={this.handleMoveDown}\n            scrollKey={this.props.scrollKey}\n          />\n        ))}\n      </ScrollableList>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport ConversationsList from '../components/conversations_list';\nimport { expandConversations } from 'flavours/glitch/actions/conversations';\n\nconst mapStateToProps = state => ({\n  conversations: state.getIn(['conversations', 'items']),\n  isLoading: state.getIn(['conversations', 'isLoading'], true),\n  hasMore: state.getIn(['conversations', 'hasMore'], false),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onLoadMore: maxId => dispatch(expandConversations({ maxId })),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ConversationsList);\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { addColumn, removeColumn, moveColumn } from 'flavours/glitch/actions/columns';\nimport { mountConversations, unmountConversations, expandConversations } from 'flavours/glitch/actions/conversations';\nimport { connectDirectStream } from 'flavours/glitch/actions/streaming';\nimport { expandDirectTimeline } from 'flavours/glitch/actions/timelines';\nimport Column from 'flavours/glitch/components/column';\nimport ColumnHeader from 'flavours/glitch/components/column_header';\nimport StatusListContainer from 'flavours/glitch/features/ui/containers/status_list_container';\nimport ColumnSettingsContainer from './containers/column_settings_container';\nimport ConversationsListContainer from './containers/conversations_list_container';\n\nconst messages = defineMessages({\n  title: { id: 'column.direct', defaultMessage: 'Direct messages' },\n});\n\nconst mapStateToProps = state => ({\n  hasUnread: state.getIn(['timelines', 'direct', 'unread']) > 0,\n  conversationsMode: state.getIn(['settings', 'direct', 'conversations']),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass DirectTimeline extends React.PureComponent {\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    columnId: PropTypes.string,\n    intl: PropTypes.object.isRequired,\n    hasUnread: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    conversationsMode: PropTypes.bool,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('DIRECT', {}));\n    }\n  };\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  };\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  };\n\n  componentDidMount () {\n    const { dispatch, conversationsMode } = this.props;\n\n    dispatch(mountConversations());\n\n    if (conversationsMode) {\n      dispatch(expandConversations());\n    } else {\n      dispatch(expandDirectTimeline());\n    }\n\n    this.disconnect = dispatch(connectDirectStream());\n  }\n\n  componentDidUpdate(prevProps) {\n    const { dispatch, conversationsMode } = this.props;\n\n    if (prevProps.conversationsMode && !conversationsMode) {\n      dispatch(expandDirectTimeline());\n    } else if (!prevProps.conversationsMode && conversationsMode) {\n      dispatch(expandConversations());\n    }\n  }\n\n  componentWillUnmount () {\n    this.props.dispatch(unmountConversations());\n\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  setRef = c => {\n    this.column = c;\n  };\n\n  handleLoadMoreTimeline = maxId => {\n    this.props.dispatch(expandDirectTimeline({ maxId }));\n  };\n\n  handleLoadMoreConversations = maxId => {\n    this.props.dispatch(expandConversations({ maxId }));\n  };\n\n  render () {\n    const { intl, hasUnread, columnId, multiColumn, conversationsMode } = this.props;\n    const pinned = !!columnId;\n\n    let contents;\n    if (conversationsMode) {\n      contents = (\n        <ConversationsListContainer\n          trackScroll={!pinned}\n          scrollKey={`direct_timeline-${columnId}`}\n          timelineId='direct'\n          onLoadMore={this.handleLoadMore}\n          prepend={<div className='follow_requests-unlocked_explanation'><span><FormattedMessage id='compose_form.encryption_warning' defaultMessage='Posts on Mastodon are not end-to-end encrypted. Do not share any dangerous information over Mastodon.' /> <a href='/terms' target='_blank'><FormattedMessage id='compose_form.direct_message_warning_learn_more' defaultMessage='Learn more' /></a></span></div>}\n          emptyMessage={<FormattedMessage id='empty_column.direct' defaultMessage=\"You don't have any direct messages yet. When you send or receive one, it will show up here.\" />}\n        />\n      );\n    } else {\n      contents = (\n        <StatusListContainer\n          trackScroll={!pinned}\n          scrollKey={`direct_timeline-${columnId}`}\n          timelineId='direct'\n          onLoadMore={this.handleLoadMoreTimeline}\n          prepend={<div className='follow_requests-unlocked_explanation'><span><FormattedMessage id='compose_form.encryption_warning' defaultMessage='Posts on Mastodon are not end-to-end encrypted. Do not share any dangerous information over Mastodon.' /> <a href='/terms' target='_blank'><FormattedMessage id='compose_form.direct_message_warning_learn_more' defaultMessage='Learn more' /></a></span></div>}\n          emptyMessage={<FormattedMessage id='empty_column.direct' defaultMessage=\"You don't have any direct messages yet. When you send or receive one, it will show up here.\" />}\n        />\n      );\n    }\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='envelope'\n          active={hasUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n        >\n          <ColumnSettingsContainer />\n        </ColumnHeader>\n\n        {contents}\n\n        <Helmet>\n          <title>{intl.formatMessage(messages.title)}</title>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}