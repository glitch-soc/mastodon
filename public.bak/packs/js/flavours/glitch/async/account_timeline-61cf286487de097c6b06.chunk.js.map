{"version":3,"sources":["webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/account_timeline/index.jsx"],"names":["emptyList","ImmutableList","RemoteHint","_ref2","url","_jsx","TimelineHint","resource","FormattedMessage","id","defaultMessage","AccountTimeline","connect","mapStateToProps","state","_ref","params","acct","tagged","withReplies","accountId","getIn","normalizeForLookup","isLoading","isAccount","statusIds","path","remote","remoteUrl","featuredStatusIds","hasMore","suspended","hidden","getAccountHidden","_dec","_class2","ImmutablePureComponent","constructor","arguments","handleHeaderClick","this","column","scrollTop","handleLoadMore","maxId","props","dispatch","expandAccountTimeline","setRef","c","_load","fetchAccount","expandAccountFeaturedTimeline","fetchFeaturedTags","componentDidMount","lookupAccount","componentDidUpdate","prevProps","componentWillReceiveProps","nextProps","render","multiColumn","isEmpty","Column","LoadingIndicator","ColumnBackButton","MissingIndicator","emptyMessage","forceEmptyState","LimitedAccountHint","remoteMessage","React","createElement","ref","name","ProfileColumnHeader","onClick","StatusList","prepend","HeaderContainer","hideTabs","alwaysPrepend","append","scrollKey","onLoadMore","bindToDocument","timelineId","propTypes","PropTypes","shape","string","isRequired","func","ImmutablePropTypes","list","bool","_class"],"mappings":"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","file":"js/flavours/glitch/async/account_timeline-61cf286487de097c6b06.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport { lookupAccount, fetchAccount } from 'flavours/glitch/actions/accounts';\nimport { expandAccountFeaturedTimeline, expandAccountTimeline } from 'flavours/glitch/actions/timelines';\nimport StatusList from '../../components/status_list';\nimport LoadingIndicator from '../../components/loading_indicator';\nimport Column from '../ui/components/column';\nimport ProfileColumnHeader from 'flavours/glitch/features/account/components/profile_column_header';\nimport HeaderContainer from './containers/header_container';\nimport ColumnBackButton from 'flavours/glitch/components/column_back_button';\nimport { List as ImmutableList } from 'immutable';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { FormattedMessage } from 'react-intl';\nimport MissingIndicator from 'flavours/glitch/components/missing_indicator';\nimport TimelineHint from 'flavours/glitch/components/timeline_hint';\nimport LimitedAccountHint from './components/limited_account_hint';\nimport { getAccountHidden } from 'flavours/glitch/selectors';\nimport { normalizeForLookup } from 'flavours/glitch/reducers/accounts_map';\nimport { fetchFeaturedTags } from '../../actions/featured_tags';\n\nconst emptyList = ImmutableList();\n\nconst mapStateToProps = (state, { params: { acct, id, tagged }, withReplies = false }) => {\n  const accountId = id || state.getIn(['accounts_map', normalizeForLookup(acct)]);\n\n  if (accountId === null) {\n    return {\n      isLoading: false,\n      isAccount: false,\n      statusIds: emptyList,\n    };\n  } else if (!accountId) {\n    return {\n      isLoading: true,\n      statusIds: emptyList,\n    };\n  }\n\n  const path = withReplies ? `${accountId}:with_replies` : `${accountId}${tagged ? `:${tagged}` : ''}`;\n\n  return {\n    accountId,\n    remote: !!(state.getIn(['accounts', accountId, 'acct']) !== state.getIn(['accounts', accountId, 'username'])),\n    remoteUrl: state.getIn(['accounts', accountId, 'url']),\n    isAccount: !!state.getIn(['accounts', accountId]),\n    statusIds: state.getIn(['timelines', `account:${path}`, 'items'], ImmutableList()),\n    featuredStatusIds: withReplies ? ImmutableList() : state.getIn(['timelines', `account:${accountId}:pinned${tagged ? `:${tagged}` : ''}`, 'items'], ImmutableList()),\n    isLoading: state.getIn(['timelines', `account:${path}`, 'isLoading']),\n    hasMore:   state.getIn(['timelines', `account:${path}`, 'hasMore']),\n    suspended: state.getIn(['accounts', accountId, 'suspended'], false),\n    hidden: getAccountHidden(state, accountId),\n  };\n};\n\nconst RemoteHint = ({ url }) => (\n  <TimelineHint url={url} resource={<FormattedMessage id='timeline_hint.resources.statuses' defaultMessage='Older posts' />} />\n);\n\nRemoteHint.propTypes = {\n  url: PropTypes.string.isRequired,\n};\n\nexport default @connect(mapStateToProps)\nclass AccountTimeline extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.shape({\n      acct: PropTypes.string,\n      id: PropTypes.string,\n      tagged: PropTypes.string,\n    }).isRequired,\n    accountId: PropTypes.string,\n    dispatch: PropTypes.func.isRequired,\n    statusIds: ImmutablePropTypes.list,\n    featuredStatusIds: ImmutablePropTypes.list,\n    isLoading: PropTypes.bool,\n    hasMore: PropTypes.bool,\n    withReplies: PropTypes.bool,\n    isAccount: PropTypes.bool,\n    suspended: PropTypes.bool,\n    hidden: PropTypes.bool,\n    remote: PropTypes.bool,\n    remoteUrl: PropTypes.string,\n    multiColumn: PropTypes.bool,\n  };\n\n  _load () {\n    const { accountId, withReplies, params: { tagged }, dispatch } = this.props;\n\n    dispatch(fetchAccount(accountId));\n\n    if (!withReplies) {\n      dispatch(expandAccountFeaturedTimeline(accountId, { tagged }));\n    }\n\n    dispatch(fetchFeaturedTags(accountId));\n    dispatch(expandAccountTimeline(accountId, { withReplies, tagged }));\n  }\n\n  componentDidMount () {\n    const { params: { acct }, accountId, dispatch } = this.props;\n\n    if (accountId) {\n      this._load();\n    } else {\n      dispatch(lookupAccount(acct));\n    }\n  }\n\n  componentDidUpdate (prevProps) {\n    const { params: { acct, tagged }, accountId, withReplies, dispatch } = this.props;\n\n    if (prevProps.accountId !== accountId && accountId) {\n      this._load();\n    } else if (prevProps.params.acct !== acct) {\n      dispatch(lookupAccount(acct));\n    } else if (prevProps.params.tagged !== tagged) {\n      if (!withReplies) {\n        dispatch(expandAccountFeaturedTimeline(accountId, { tagged }));\n      }\n      dispatch(expandAccountTimeline(accountId, { withReplies, tagged }));\n    }\n  }\n\n  componentWillReceiveProps (nextProps) {\n    const { dispatch } = this.props;\n\n    if ((nextProps.params.accountId !== this.props.params.accountId && nextProps.params.accountId) || nextProps.withReplies !== this.props.withReplies) {\n      dispatch(fetchAccount(nextProps.params.accountId));\n\n      if (!nextProps.withReplies) {\n        dispatch(expandAccountFeaturedTimeline(nextProps.params.accountId));\n      }\n\n      dispatch(expandAccountTimeline(nextProps.params.accountId, { withReplies: nextProps.params.withReplies }));\n    }\n  }\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  };\n\n  handleLoadMore = maxId => {\n    this.props.dispatch(expandAccountTimeline(this.props.accountId, { maxId, withReplies: this.props.withReplies, tagged: this.props.params.tagged }));\n  };\n\n  setRef = c => {\n    this.column = c;\n  };\n\n  render () {\n    const { accountId, statusIds, featuredStatusIds, isLoading, hasMore, suspended, isAccount, hidden, multiColumn, remote, remoteUrl } = this.props;\n\n    if (isLoading && statusIds.isEmpty()) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    } else if (!isLoading && !isAccount) {\n      return (\n        <Column>\n          <ColumnBackButton multiColumn={multiColumn} />\n          <MissingIndicator />\n        </Column>\n      );\n    }\n\n    let emptyMessage;\n\n    const forceEmptyState = suspended || hidden;\n\n    if (suspended) {\n      emptyMessage = <FormattedMessage id='empty_column.account_suspended' defaultMessage='Account suspended' />;\n    } else if (hidden) {\n      emptyMessage = <LimitedAccountHint accountId={accountId} />;\n    } else if (remote && statusIds.isEmpty()) {\n      emptyMessage = <RemoteHint url={remoteUrl} />;\n    } else {\n      emptyMessage = <FormattedMessage id='empty_column.account_timeline' defaultMessage='No posts found' />;\n    }\n\n    const remoteMessage = remote ? <RemoteHint url={remoteUrl} /> : null;\n\n    return (\n      <Column ref={this.setRef} name='account'>\n        <ProfileColumnHeader onClick={this.handleHeaderClick} multiColumn={multiColumn} />\n\n        <StatusList\n          prepend={<HeaderContainer accountId={this.props.accountId} hideTabs={forceEmptyState} tagged={this.props.params.tagged} />}\n          alwaysPrepend\n          append={remoteMessage}\n          scrollKey='account_timeline'\n          statusIds={forceEmptyState ? emptyList : statusIds}\n          featuredStatusIds={featuredStatusIds}\n          isLoading={isLoading}\n          hasMore={!forceEmptyState && hasMore}\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n          timelineId='account'\n        />\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}