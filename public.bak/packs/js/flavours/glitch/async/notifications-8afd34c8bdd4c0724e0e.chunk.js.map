{"version":3,"sources":["webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/notifications/components/follow.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/notifications/components/follow_request.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/notifications/containers/follow_request_container.js","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/notifications/components/admin_signup.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/notifications/components/report.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/notifications/components/admin_report.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/notifications/containers/admin_report_container.js","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/notifications/components/notification.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/notifications/containers/notification_container.js","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/notifications/components/clear_column_button.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/notifications/components/grant_permission_button.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/notifications/components/pill_bar_button.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/notifications/components/column_settings.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/notifications/containers/column_settings_container.js","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/notifications/components/filter_bar.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/notifications/containers/filter_bar_container.js","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/notifications/components/notifications_permission_banner.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/components/notification_purge_buttons.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/containers/notification_purge_buttons_container.js","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/notifications/index.jsx"],"names":["NotificationFollow","ImmutablePureComponent","constructor","arguments","handleMoveUp","notification","onMoveUp","this","props","get","handleMoveDown","onMoveDown","handleOpen","handleOpenProfile","context","router","history","push","getIn","handleMention","e","preventDefault","onMention","getHandlers","moveUp","moveDown","open","openProfile","mention","reply","render","account","hidden","unread","displayName","link","_jsx","Permalink","className","href","title","to","dangerouslySetInnerHTML","__html","HotKeys","handlers","classNames","tabIndex","Icon","fixedWidth","id","FormattedMessage","defaultMessage","values","name","AccountContainer","withNote","NotificationOverlayContainer","propTypes","PropTypes","bool","string","isRequired","ImmutablePropTypes","map","messages","defineMessages","authorize","reject","FollowRequest","injectIntl","_class2","intl","onAuthorize","onReject","Fragment","Avatar","size","DisplayName","IconButton","formatMessage","icon","onClick","func","object","_class","connect","mapDispatchToProps","dispatch","_ref","authorizeFollowRequest","rejectFollowRequest","openReport","other","spam","violation","Report","report","AvatarOverlay","friend","RelativeTimestamp","timestamp","short","count","target","rel","adminReport","AdminReport","targetAccount","targetDisplayNameHtml","targetLink","mapStateToProps","state","getReport","makeGetReport","Notification","getScrollPosition","updateScrollBottom","NotificationFollowRequestContainer","NotificationAdminSignup","NotificationAdminReportContainer","StatusContainer","containerId","contextType","cachedMediaWidth","cacheMediaWidth","onUnmount","withDismiss","prepend","muted","number","makeMapStateToProps","getNotification","makeGetNotification","accountId","notifCleaning","mentionCompose","ClearColumnButton","React","Component","GrantPermissionButton","PureComponent","PillBarButton","onChange","settings","settingPath","prefix","label","disabled","filter","Boolean","join","active","ColumnSettings","onPushChange","path","checked","pushSettings","onClear","alertsEnabled","browserSupport","browserPermission","onRequestNotificationPermission","groupReactions","groupFavorites","groupBoosts","unreadMarkersShowStr","filterBarShowStr","filterAdvancedStr","alertStr","showStr","soundStr","showPushSettings","pushStr","role","SettingToggle","identity","permissions","PERMISSION_MANAGE_USERS","PERMISSION_MANAGE_REPORTS","contextTypes","clearMessage","clearConfirm","permissionDenied","includes","window","permission","requestBrowserPermission","changePushNotifications","slice","showAlert","undefined","changeSetting","setFilter","openModal","message","confirm","onConfirm","clearNotifications","tooltips","mentions","favourites","reactions","boosts","polls","follows","statuses","FilterBar","notificationType","selectFilter","selectedFilter","advancedMode","newActiveFilter","close","NotificationsPermissionBanner","_dec","handleClick","handleClose","Button","btnAll","btnNone","btnInvert","btnApply","NotificationPurgeButtons","markNewForDelete","onMarkAll","onMarkNone","onInvert","onDeleteMarked","onEnterCleaningMode","yes","enterNotificationClearingMode","deleteMarkedNotifications","markAllNotifications","enterNotifCleaning","markAsRead","getExcludedTypes","createSelector","shows","ImmutableList","item","keys","getNotifications","showFilterBar","allowedType","excludedTypes","notifications","filterNot","Notifications","localSettings","isLoading","isUnread","hasMore","numPending","notifCleaningActive","lastReadId","canMarkAsRead","some","compareId","needsNotificationPermission","grouping","onMarkAsRead","markNotificationsAsRead","submitMarkers","immediate","onMount","mountNotifications","unmountNotifications","animatingNCD","handleLoadGap","maxId","expandNotifications","handleLoadOlder","_debounce","last","leading","handleLoadPending","loadPending","handleScrollToTop","scrollTopNotifications","handleScroll","handlePin","columnId","removeColumn","addColumn","handleMove","dir","moveColumn","handleHeaderClick","column","scrollTop","setColumnRef","c","elementIndex","findIndex","_selectChild","handleTransitionEndNCD","setState","handleMarkAsRead","index","align_top","container","node","element","querySelector","offsetTop","scrollIntoView","clientHeight","offsetHeight","focus","componentDidMount","componentWillUnmount","getGroupedNotifications","groupedNotifications","typesToGroup","reduce","acc","enabled","groupBy","of","notif","matchingNotifIdx","matchingNotif","update","accounts","singleAccount","multiColumn","pinned","emptyMessage","signedIn","scrollableContent","filterBarContainer","FilterBarContainer","scrollContainer","LoadGap","NotificationContainer","ScrollableList","scrollKey","trackScroll","showLoading","alwaysPrepend","onLoadMore","onLoadPending","onScrollToTop","onScroll","bindToDocument","NotSignedInIndicator","extraButtons","notifCleaningButtonClassName","notifCleaningDrawerClassName","msgEnterNotifCleaning","notifCleaningDrawer","onTransitionEnd","NotificationPurgeButtonsContainer","extraButton","createElement","Column","ref","extraClasses","ColumnHeader","onPin","onMove","appendContent","ColumnSettingsContainer","Helmet","content","defaultProps"],"mappings":"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","file":"js/flavours/glitch/async/notifications-8afd34c8bdd4c0724e0e.chunk.js","sourcesContent":["//  Package imports.\nimport React from 'react';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { HotKeys } from 'react-hotkeys';\nimport classNames from 'classnames';\n\n// Our imports.\nimport Permalink from 'flavours/glitch/components/permalink';\nimport AccountContainer from 'flavours/glitch/containers/account_container';\nimport NotificationOverlayContainer from '../containers/overlay_container';\nimport Icon from 'flavours/glitch/components/icon';\n\nexport default class NotificationFollow extends ImmutablePureComponent {\n\n  static propTypes = {\n    hidden: PropTypes.bool,\n    id: PropTypes.string.isRequired,\n    account: ImmutablePropTypes.map.isRequired,\n    notification: ImmutablePropTypes.map.isRequired,\n    unread: PropTypes.bool,\n  };\n\n  handleMoveUp = () => {\n    const { notification, onMoveUp } = this.props;\n    onMoveUp(notification.get('id'));\n  };\n\n  handleMoveDown = () => {\n    const { notification, onMoveDown } = this.props;\n    onMoveDown(notification.get('id'));\n  };\n\n  handleOpen = () => {\n    this.handleOpenProfile();\n  };\n\n  handleOpenProfile = () => {\n    const { notification } = this.props;\n    this.context.router.history.push(`/@${notification.getIn(['account', 'acct'])}`);\n  };\n\n  handleMention = e => {\n    e.preventDefault();\n\n    const { notification, onMention } = this.props;\n    onMention(notification.get('account'), this.context.router.history);\n  };\n\n  getHandlers () {\n    return {\n      moveUp: this.handleMoveUp,\n      moveDown: this.handleMoveDown,\n      open: this.handleOpen,\n      openProfile: this.handleOpenProfile,\n      mention: this.handleMention,\n      reply: this.handleMention,\n    };\n  }\n\n  render () {\n    const { account, notification, hidden, unread } = this.props;\n\n    //  Links to the display name.\n    const displayName = account.get('display_name_html') || account.get('username');\n    const link = (\n      <bdi><Permalink\n        className='notification__display-name'\n        href={account.get('url')}\n        title={account.get('acct')}\n        to={`/@${account.get('acct')}`}\n        dangerouslySetInnerHTML={{ __html: displayName }}\n      /></bdi>\n    );\n\n    //  Renders.\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-follow focusable', { unread })} tabIndex='0'>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon fixedWidth id='user-plus' />\n            </div>\n\n            <FormattedMessage\n              id='notification.follow'\n              defaultMessage='{name} followed you'\n              values={{ name: link }}\n            />\n          </div>\n\n          <AccountContainer hidden={hidden} id={account.get('id')} withNote={false} />\n          <NotificationOverlayContainer notification={notification} />\n        </div>\n      </HotKeys>\n    );\n  }\n\n}\n","import React, { Fragment } from 'react';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport Avatar from 'flavours/glitch/components/avatar';\nimport DisplayName from 'flavours/glitch/components/display_name';\nimport Permalink from 'flavours/glitch/components/permalink';\nimport IconButton from 'flavours/glitch/components/icon_button';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport NotificationOverlayContainer from '../containers/overlay_container';\nimport { HotKeys } from 'react-hotkeys';\nimport Icon from 'flavours/glitch/components/icon';\nimport classNames from 'classnames';\n\nconst messages = defineMessages({\n  authorize: { id: 'follow_request.authorize', defaultMessage: 'Authorize' },\n  reject: { id: 'follow_request.reject', defaultMessage: 'Reject' },\n});\n\nexport default @injectIntl\nclass FollowRequest extends ImmutablePureComponent {\n\n  static propTypes = {\n    account: ImmutablePropTypes.map.isRequired,\n    onAuthorize: PropTypes.func.isRequired,\n    onReject: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    notification: ImmutablePropTypes.map.isRequired,\n    unread: PropTypes.bool,\n  };\n\n  handleMoveUp = () => {\n    const { notification, onMoveUp } = this.props;\n    onMoveUp(notification.get('id'));\n  };\n\n  handleMoveDown = () => {\n    const { notification, onMoveDown } = this.props;\n    onMoveDown(notification.get('id'));\n  };\n\n  handleOpen = () => {\n    this.handleOpenProfile();\n  };\n\n  handleOpenProfile = () => {\n    const { notification } = this.props;\n    this.context.router.history.push(`/@${notification.getIn(['account', 'acct'])}`);\n  };\n\n  handleMention = e => {\n    e.preventDefault();\n\n    const { notification, onMention } = this.props;\n    onMention(notification.get('account'), this.context.router.history);\n  };\n\n  getHandlers () {\n    return {\n      moveUp: this.handleMoveUp,\n      moveDown: this.handleMoveDown,\n      open: this.handleOpen,\n      openProfile: this.handleOpenProfile,\n      mention: this.handleMention,\n      reply: this.handleMention,\n    };\n  }\n\n  render () {\n    const { intl, hidden, account, onAuthorize, onReject, notification, unread } = this.props;\n\n    if (!account) {\n      return <div />;\n    }\n\n    if (hidden) {\n      return (\n        <Fragment>\n          {account.get('display_name')}\n          {account.get('username')}\n        </Fragment>\n      );\n    }\n\n    //  Links to the display name.\n    const displayName = account.get('display_name_html') || account.get('username');\n    const link = (\n      <bdi><Permalink\n        className='notification__display-name'\n        href={account.get('url')}\n        title={account.get('acct')}\n        to={`/@${account.get('acct')}`}\n        dangerouslySetInnerHTML={{ __html: displayName }}\n      /></bdi>\n    );\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-follow-request focusable', { unread })} tabIndex='0'>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='user' fixedWidth />\n            </div>\n\n            <FormattedMessage\n              id='notification.follow_request'\n              defaultMessage='{name} has requested to follow you'\n              values={{ name: link }}\n            />\n          </div>\n\n          <div className='account'>\n            <div className='account__wrapper'>\n              <Permalink key={account.get('id')} className='account__display-name' title={account.get('acct')} href={account.get('url')} to={`/@${account.get('acct')}`}>\n                <div className='account__avatar-wrapper'><Avatar account={account} size={36} /></div>\n                <DisplayName account={account} />\n              </Permalink>\n\n              <div className='account__relationship'>\n                <IconButton title={intl.formatMessage(messages.authorize)} icon='check' onClick={onAuthorize} />\n                <IconButton title={intl.formatMessage(messages.reject)} icon='times' onClick={onReject} />\n              </div>\n            </div>\n          </div>\n\n          <NotificationOverlayContainer notification={notification} />\n        </div>\n      </HotKeys>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport { makeGetAccount } from 'flavours/glitch/selectors';\nimport FollowRequest from '../components/follow_request';\nimport { authorizeFollowRequest, rejectFollowRequest } from 'flavours/glitch/actions/accounts';\n\nconst mapDispatchToProps = (dispatch, { account }) => ({\n  onAuthorize () {\n    dispatch(authorizeFollowRequest(account.get('id')));\n  },\n\n  onReject () {\n    dispatch(rejectFollowRequest(account.get('id')));\n  },\n});\n\nexport default connect(null, mapDispatchToProps)(FollowRequest);\n","//  Package imports.\nimport React from 'react';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { HotKeys } from 'react-hotkeys';\nimport classNames from 'classnames';\n\n// Our imports.\nimport Permalink from 'flavours/glitch/components/permalink';\nimport AccountContainer from 'flavours/glitch/containers/account_container';\nimport NotificationOverlayContainer from '../containers/overlay_container';\nimport Icon from 'flavours/glitch/components/icon';\n\nexport default class NotificationFollow extends ImmutablePureComponent {\n\n  static propTypes = {\n    hidden: PropTypes.bool,\n    id: PropTypes.string.isRequired,\n    account: ImmutablePropTypes.map.isRequired,\n    notification: ImmutablePropTypes.map.isRequired,\n    unread: PropTypes.bool,\n  };\n\n  handleMoveUp = () => {\n    const { notification, onMoveUp } = this.props;\n    onMoveUp(notification.get('id'));\n  };\n\n  handleMoveDown = () => {\n    const { notification, onMoveDown } = this.props;\n    onMoveDown(notification.get('id'));\n  };\n\n  handleOpen = () => {\n    this.handleOpenProfile();\n  };\n\n  handleOpenProfile = () => {\n    const { notification } = this.props;\n    this.context.router.history.push(`/@${notification.getIn(['account', 'acct'])}`);\n  };\n\n  handleMention = e => {\n    e.preventDefault();\n\n    const { notification, onMention } = this.props;\n    onMention(notification.get('account'), this.context.router.history);\n  };\n\n  getHandlers () {\n    return {\n      moveUp: this.handleMoveUp,\n      moveDown: this.handleMoveDown,\n      open: this.handleOpen,\n      openProfile: this.handleOpenProfile,\n      mention: this.handleMention,\n      reply: this.handleMention,\n    };\n  }\n\n  render () {\n    const { account, notification, hidden, unread } = this.props;\n\n    //  Links to the display name.\n    const displayName = account.get('display_name_html') || account.get('username');\n    const link = (\n      <bdi><Permalink\n        className='notification__display-name'\n        href={account.get('url')}\n        title={account.get('acct')}\n        to={`/@${account.get('acct')}`}\n        dangerouslySetInnerHTML={{ __html: displayName }}\n      /></bdi>\n    );\n\n    //  Renders.\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-admin-sign-up focusable', { unread })} tabIndex='0'>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon fixedWidth id='user-plus' />\n            </div>\n\n            <FormattedMessage\n              id='notification.admin.sign_up'\n              defaultMessage='{name} signed up'\n              values={{ name: link }}\n            />\n          </div>\n\n          <AccountContainer hidden={hidden} id={account.get('id')} withNote={false} />\n          <NotificationOverlayContainer notification={notification} />\n        </div>\n      </HotKeys>\n    );\n  }\n\n}\n","import React, { Fragment } from 'react';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport AvatarOverlay from 'flavours/glitch/components/avatar_overlay';\nimport RelativeTimestamp from 'flavours/glitch/components/relative_timestamp';\n\nconst messages = defineMessages({\n  openReport: { id: 'report_notification.open', defaultMessage: 'Open report' },\n  other: { id: 'report_notification.categories.other', defaultMessage: 'Other' },\n  spam: { id: 'report_notification.categories.spam', defaultMessage: 'Spam' },\n  violation: { id: 'report_notification.categories.violation', defaultMessage: 'Rule violation' },\n});\n\nexport default @injectIntl\nclass Report extends ImmutablePureComponent {\n\n  static propTypes = {\n    account: ImmutablePropTypes.map.isRequired,\n    report: ImmutablePropTypes.map.isRequired,\n    hidden: PropTypes.bool,\n    intl: PropTypes.object.isRequired,\n  };\n\n  render () {\n    const { intl, hidden, report, account } = this.props;\n\n    if (!report) {\n      return null;\n    }\n\n    if (hidden) {\n      return (\n        <Fragment>\n          {report.get('id')}\n        </Fragment>\n      );\n    }\n\n    return (\n      <div className='notification__report'>\n        <div className='notification__report__avatar'>\n          <AvatarOverlay account={report.get('target_account')} friend={account} />\n        </div>\n\n        <div className='notification__report__details'>\n          <div>\n            <RelativeTimestamp timestamp={report.get('created_at')} short={false} /> · <FormattedMessage id='report_notification.attached_statuses' defaultMessage='{count, plural, one {{count} post} other {{count} posts}} attached' values={{ count: report.get('status_ids').size }} />\n            <br />\n            <strong>{intl.formatMessage(messages[report.get('category')])}</strong>\n          </div>\n\n          <div className='notification__report__actions'>\n            <a href={`/admin/reports/${report.get('id')}`} className='button' target='_blank' rel='noopener noreferrer'>{intl.formatMessage(messages.openReport)}</a>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n","//  Package imports.\nimport React from 'react';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { HotKeys } from 'react-hotkeys';\nimport classNames from 'classnames';\n\n// Our imports.\nimport Permalink from 'flavours/glitch/components/permalink';\nimport AccountContainer from 'flavours/glitch/containers/account_container';\nimport NotificationOverlayContainer from '../containers/overlay_container';\nimport Icon from 'flavours/glitch/components/icon';\nimport Report from './report';\n\nconst messages = defineMessages({\n  adminReport: { id: 'notification.admin.report', defaultMessage: '{name} reported {target}' },\n});\n\nexport default class AdminReport extends ImmutablePureComponent {\n\n  static propTypes = {\n    hidden: PropTypes.bool,\n    id: PropTypes.string.isRequired,\n    account: ImmutablePropTypes.map.isRequired,\n    notification: ImmutablePropTypes.map.isRequired,\n    unread: PropTypes.bool,\n    report: ImmutablePropTypes.map.isRequired,\n  };\n\n  handleMoveUp = () => {\n    const { notification, onMoveUp } = this.props;\n    onMoveUp(notification.get('id'));\n  };\n\n  handleMoveDown = () => {\n    const { notification, onMoveDown } = this.props;\n    onMoveDown(notification.get('id'));\n  };\n\n  handleOpen = () => {\n    this.handleOpenProfile();\n  };\n\n  handleOpenProfile = () => {\n    const { notification } = this.props;\n    this.context.router.history.push(`/@${notification.getIn(['account', 'acct'])}`);\n  };\n\n  handleMention = e => {\n    e.preventDefault();\n\n    const { notification, onMention } = this.props;\n    onMention(notification.get('account'), this.context.router.history);\n  };\n\n  getHandlers () {\n    return {\n      moveUp: this.handleMoveUp,\n      moveDown: this.handleMoveDown,\n      open: this.handleOpen,\n      openProfile: this.handleOpenProfile,\n      mention: this.handleMention,\n      reply: this.handleMention,\n    };\n  }\n\n  render () {\n    const { intl, account, notification, unread, report } = this.props;\n\n    if (!report) {\n      return null;\n    }\n\n    //  Links to the display name.\n    const displayName = account.get('display_name_html') || account.get('username');\n    const link = (\n      <bdi><Permalink\n        className='notification__display-name'\n        href={account.get('url')}\n        title={account.get('acct')}\n        to={`/@${account.get('acct')}`}\n        dangerouslySetInnerHTML={{ __html: displayName }}\n      /></bdi>\n    );\n\n    const targetAccount = report.get('target_account');\n    const targetDisplayNameHtml = { __html: targetAccount.get('display_name_html') };\n    const targetLink = <bdi><Permalink className='notification__display-name' href={targetAccount.get('url')} title={targetAccount.get('acct')} to={`/@${targetAccount.get('acct')}`} dangerouslySetInnerHTML={targetDisplayNameHtml} /></bdi>;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-admin-report focusable', { unread })} tabIndex='0'>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='flag' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.admin.report' defaultMessage='{name} reported {target}' values={{ name: link, target: targetLink }} />\n            </span>\n          </div>\n\n          <Report account={account} report={notification.get('report')} hidden={this.props.hidden} />\n          <NotificationOverlayContainer notification={notification} />\n        </div>\n      </HotKeys>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport { makeGetReport } from 'flavours/glitch/selectors';\nimport AdminReport from '../components/admin_report';\n\nconst mapStateToProps = (state, { notification }) => {\n  const getReport = makeGetReport();\n\n  return {\n    report: notification.get('report') ? getReport(state, notification.get('report'), notification.getIn(['report', 'target_account', 'id'])) : null,\n  };\n};\n\nexport default connect(mapStateToProps)(AdminReport);\n","//  Package imports.\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\n//  Our imports,\nimport StatusContainer from 'flavours/glitch/containers/status_container';\nimport NotificationFollow from './follow';\nimport NotificationFollowRequestContainer from '../containers/follow_request_container';\nimport NotificationAdminSignup from './admin_signup';\nimport NotificationAdminReportContainer from '../containers/admin_report_container';\n\nexport default class Notification extends ImmutablePureComponent {\n\n  static propTypes = {\n    notification: ImmutablePropTypes.map.isRequired,\n    hidden: PropTypes.bool,\n    onMoveUp: PropTypes.func.isRequired,\n    onMoveDown: PropTypes.func.isRequired,\n    onMention: PropTypes.func.isRequired,\n    getScrollPosition: PropTypes.func,\n    updateScrollBottom: PropTypes.func,\n    cacheMediaWidth: PropTypes.func,\n    cachedMediaWidth: PropTypes.number,\n    onUnmount: PropTypes.func,\n    unread: PropTypes.bool,\n  };\n\n  render () {\n    const {\n      hidden,\n      notification,\n      onMoveDown,\n      onMoveUp,\n      onMention,\n      getScrollPosition,\n      updateScrollBottom,\n    } = this.props;\n\n    switch(notification.get('type')) {\n    case 'follow':\n      return (\n        <NotificationFollow\n          hidden={hidden}\n          id={notification.get('id')}\n          account={notification.get('account')}\n          notification={notification}\n          onMoveDown={onMoveDown}\n          onMoveUp={onMoveUp}\n          onMention={onMention}\n          unread={this.props.unread}\n        />\n      );\n    case 'follow_request':\n      return (\n        <NotificationFollowRequestContainer\n          hidden={hidden}\n          id={notification.get('id')}\n          account={notification.get('account')}\n          notification={notification}\n          onMoveDown={onMoveDown}\n          onMoveUp={onMoveUp}\n          onMention={onMention}\n          unread={this.props.unread}\n        />\n      );\n    case 'admin.sign_up':\n      return (\n        <NotificationAdminSignup\n          hidden={hidden}\n          id={notification.get('id')}\n          account={notification.get('account')}\n          notification={notification}\n          onMoveDown={onMoveDown}\n          onMoveUp={onMoveUp}\n          onMention={onMention}\n          unread={this.props.unread}\n        />\n      );\n    case 'admin.report':\n      return (\n        <NotificationAdminReportContainer\n          hidden={hidden}\n          id={notification.get('id')}\n          account={notification.get('account')}\n          notification={notification}\n          onMoveDown={onMoveDown}\n          onMoveUp={onMoveUp}\n          onMention={onMention}\n          unread={this.props.unread}\n        />\n      );\n    case 'mention':\n      return (\n        <StatusContainer\n          containerId={notification.get('id')}\n          hidden={hidden}\n          id={notification.get('status')}\n          notification={notification}\n          onMoveDown={onMoveDown}\n          onMoveUp={onMoveUp}\n          onMention={onMention}\n          contextType='notifications'\n          getScrollPosition={getScrollPosition}\n          updateScrollBottom={updateScrollBottom}\n          cachedMediaWidth={this.props.cachedMediaWidth}\n          cacheMediaWidth={this.props.cacheMediaWidth}\n          onUnmount={this.props.onUnmount}\n          withDismiss\n          unread={this.props.unread}\n        />\n      );\n    case 'status':\n      return (\n        <StatusContainer\n          containerId={notification.get('id')}\n          hidden={hidden}\n          id={notification.get('status')}\n          account={notification.get('account')}\n          prepend='status'\n          muted\n          notification={notification}\n          onMoveDown={onMoveDown}\n          onMoveUp={onMoveUp}\n          onMention={onMention}\n          contextType='notifications'\n          getScrollPosition={getScrollPosition}\n          updateScrollBottom={updateScrollBottom}\n          cachedMediaWidth={this.props.cachedMediaWidth}\n          cacheMediaWidth={this.props.cacheMediaWidth}\n          onUnmount={this.props.onUnmount}\n          withDismiss\n          unread={this.props.unread}\n        />\n      );\n    case 'favourite':\n      return (\n        <StatusContainer\n          containerId={notification.get('id')}\n          hidden={hidden}\n          id={notification.get('status')}\n          account={notification.get('account')}\n          prepend='favourite'\n          muted\n          notification={notification}\n          onMoveDown={onMoveDown}\n          onMoveUp={onMoveUp}\n          onMention={onMention}\n          contextType='notifications'\n          getScrollPosition={getScrollPosition}\n          updateScrollBottom={updateScrollBottom}\n          cachedMediaWidth={this.props.cachedMediaWidth}\n          cacheMediaWidth={this.props.cacheMediaWidth}\n          onUnmount={this.props.onUnmount}\n          withDismiss\n          unread={this.props.unread}\n        />\n      );\n    case 'reaction':\n      return (\n        <StatusContainer\n          containerId={notification.get('id')}\n          hidden={hidden}\n          id={notification.get('status')}\n          account={notification.get('account')}\n          prepend='reaction'\n          muted\n          notification={notification}\n          onMoveDown={onMoveDown}\n          onMoveUp={onMoveUp}\n          onMention={onMention}\n          getScrollPosition={getScrollPosition}\n          updateScrollBottom={updateScrollBottom}\n          cachedMediaWidth={this.props.cachedMediaWidth}\n          cacheMediaWidth={this.props.cacheMediaWidth}\n          onUnmount={this.props.onUnmount}\n          withDismiss\n          unread={this.props.unread}\n        />\n      );\n    case 'reblog':\n      return (\n        <StatusContainer\n          containerId={notification.get('id')}\n          hidden={hidden}\n          id={notification.get('status')}\n          account={notification.get('account')}\n          prepend='reblog'\n          muted\n          notification={notification}\n          onMoveDown={onMoveDown}\n          onMoveUp={onMoveUp}\n          onMention={onMention}\n          contextType='notifications'\n          getScrollPosition={getScrollPosition}\n          updateScrollBottom={updateScrollBottom}\n          cachedMediaWidth={this.props.cachedMediaWidth}\n          cacheMediaWidth={this.props.cacheMediaWidth}\n          onUnmount={this.props.onUnmount}\n          withDismiss\n          unread={this.props.unread}\n        />\n      );\n    case 'poll':\n      return (\n        <StatusContainer\n          containerId={notification.get('id')}\n          hidden={hidden}\n          id={notification.get('status')}\n          account={notification.get('account')}\n          prepend='poll'\n          muted\n          notification={notification}\n          onMoveDown={onMoveDown}\n          onMoveUp={onMoveUp}\n          onMention={onMention}\n          contextType='notifications'\n          getScrollPosition={getScrollPosition}\n          updateScrollBottom={updateScrollBottom}\n          cachedMediaWidth={this.props.cachedMediaWidth}\n          cacheMediaWidth={this.props.cacheMediaWidth}\n          onUnmount={this.props.onUnmount}\n          withDismiss\n          unread={this.props.unread}\n        />\n      );\n    case 'update':\n      return (\n        <StatusContainer\n          containerId={notification.get('id')}\n          hidden={hidden}\n          id={notification.get('status')}\n          account={notification.get('account')}\n          prepend='update'\n          muted\n          notification={notification}\n          onMoveDown={onMoveDown}\n          onMoveUp={onMoveUp}\n          onMention={onMention}\n          contextType='notifications'\n          getScrollPosition={getScrollPosition}\n          updateScrollBottom={updateScrollBottom}\n          cachedMediaWidth={this.props.cachedMediaWidth}\n          cacheMediaWidth={this.props.cacheMediaWidth}\n          onUnmount={this.props.onUnmount}\n          withDismiss\n          unread={this.props.unread}\n        />\n      );\n    default:\n      return null;\n    }\n  }\n\n}\n","//  Package imports.\nimport { connect } from 'react-redux';\n\n//  Our imports.\nimport { makeGetNotification } from 'flavours/glitch/selectors';\nimport Notification from '../components/notification';\nimport { mentionCompose } from 'flavours/glitch/actions/compose';\n\nconst makeMapStateToProps = () => {\n  const getNotification = makeGetNotification();\n\n  const mapStateToProps = (state, props) => ({\n    notification: getNotification(state, props.notification, props.accountId),\n    notifCleaning: state.getIn(['notifications', 'cleaningMode']),\n  });\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onMention: (account, router) => {\n    dispatch(mentionCompose(account, router));\n  },\n});\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(Notification);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport Icon from 'flavours/glitch/components/icon';\n\nexport default class ClearColumnButton extends React.Component {\n\n  static propTypes = {\n    onClick: PropTypes.func.isRequired,\n  };\n\n  render () {\n    return (\n      <button className='text-btn column-header__setting-btn' tabIndex='0' onClick={this.props.onClick}><Icon id='eraser' /> <FormattedMessage id='notifications.clear' defaultMessage='Clear notifications' /></button>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\n\nexport default class GrantPermissionButton extends React.PureComponent {\n\n  static propTypes = {\n    onClick: PropTypes.func.isRequired,\n  };\n\n  render () {\n    return (\n      <button className='text-btn column-header__permission-btn' tabIndex='0' onClick={this.props.onClick}>\n        <FormattedMessage id='notifications.grant_permission' defaultMessage='Grant permission.' />\n      </button>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport classNames from 'classnames';\n\nexport default class PillBarButton extends React.PureComponent {\n\n  static propTypes = {\n    prefix: PropTypes.string,\n    settings: ImmutablePropTypes.map.isRequired,\n    settingPath: PropTypes.array.isRequired,\n    label: PropTypes.node.isRequired,\n    onChange: PropTypes.func.isRequired,\n    disabled: PropTypes.bool,\n  };\n\n  onChange = () => {\n    const { settings, settingPath } = this.props;\n    this.props.onChange(settingPath, !settings.getIn(settingPath));\n  };\n\n  render () {\n    const { prefix, settings, settingPath, label, disabled } = this.props;\n    const id = ['setting-pillbar-button', prefix, ...settingPath].filter(Boolean).join('-');\n    const active = settings.getIn(settingPath);\n\n    return (\n      <button\n        key={id}\n        id={id}\n        className={classNames('pillbar-button', { active })}\n        disabled={disabled}\n        onClick={this.onChange}\n        aria-pressed={active}\n      >\n        {label}\n      </button>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { FormattedMessage } from 'react-intl';\nimport ClearColumnButton from './clear_column_button';\nimport GrantPermissionButton from './grant_permission_button';\nimport SettingToggle from './setting_toggle';\nimport PillBarButton from './pill_bar_button';\nimport { PERMISSION_MANAGE_USERS, PERMISSION_MANAGE_REPORTS } from 'flavours/glitch/permissions';\n\nexport default class ColumnSettings extends React.PureComponent {\n\n  static contextTypes = {\n    identity: PropTypes.object,\n  };\n\n  static propTypes = {\n    settings: ImmutablePropTypes.map.isRequired,\n    pushSettings: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    onClear: PropTypes.func.isRequired,\n    onRequestNotificationPermission: PropTypes.func,\n    alertsEnabled: PropTypes.bool,\n    browserSupport: PropTypes.bool,\n    browserPermission: PropTypes.string,\n  };\n\n  onPushChange = (path, checked) => {\n    this.props.onChange(['push', ...path], checked);\n  };\n\n  render () {\n    const { settings, pushSettings, onChange, onClear, alertsEnabled, browserSupport, browserPermission, onRequestNotificationPermission } = this.props;\n\n    const groupReactions = <FormattedMessage id='notifications.column_settings.notification_grouping.reaction' defaultMessage='Group Reactions' />;\n    const groupFavorites = <FormattedMessage id='notifications.column_settings.notification_grouping.favourite' defaultMessage='Group Favourites' />;\n    const groupBoosts = <FormattedMessage id='notifications.column_settings.notification_grouping.boost' defaultMessage='Group Boosts' />;\n    const unreadMarkersShowStr = <FormattedMessage id='notifications.column_settings.unread_notifications.highlight' defaultMessage='Highlight unread notifications' />;\n    const filterBarShowStr = <FormattedMessage id='notifications.column_settings.filter_bar.show_bar' defaultMessage='Show filter bar' />;\n    const filterAdvancedStr = <FormattedMessage id='notifications.column_settings.filter_bar.advanced' defaultMessage='Display all categories' />;\n    const alertStr = <FormattedMessage id='notifications.column_settings.alert' defaultMessage='Desktop notifications' />;\n    const showStr = <FormattedMessage id='notifications.column_settings.show' defaultMessage='Show in column' />;\n    const soundStr = <FormattedMessage id='notifications.column_settings.sound' defaultMessage='Play sound' />;\n\n    const showPushSettings = pushSettings.get('browserSupport') && pushSettings.get('isSubscribed');\n    const pushStr = showPushSettings && <FormattedMessage id='notifications.column_settings.push' defaultMessage='Push notifications' />;\n\n    return (\n      <div>\n        {alertsEnabled && browserSupport && browserPermission === 'denied' && (\n          <div className='column-settings__row column-settings__row--with-margin'>\n            <span className='warning-hint'><FormattedMessage id='notifications.permission_denied' defaultMessage='Desktop notifications are unavailable due to previously denied browser permissions request' /></span>\n          </div>\n        )}\n\n        {alertsEnabled && browserSupport && browserPermission === 'default' && (\n          <div className='column-settings__row column-settings__row--with-margin'>\n            <span className='warning-hint'>\n              <FormattedMessage id='notifications.permission_required' defaultMessage='Desktop notifications are unavailable because the required permission has not been granted.' /> <GrantPermissionButton onClick={onRequestNotificationPermission} />\n            </span>\n          </div>\n        )}\n\n        <div className='column-settings__row'>\n          <ClearColumnButton onClick={onClear} />\n        </div>\n\n        <div role='group' aria-labelledby='notifications-grouping'>\n          <span id='notifications-grouping' className='column-settings__section'>\n            <FormattedMessage id='notifications.column_settings.notification_grouping.category' defaultMessage='Notification Grouping' />\n          </span>\n\n          <div className='column-settings__row'>\n            <SettingToggle id='group-reactions' prefix='notifications' settings={settings} settingPath={['grouping', 'reaction']} onChange={onChange} label={groupReactions} />\n            <SettingToggle id='group-favourites' prefix='notifications' settings={settings} settingPath={['grouping', 'favourite']} onChange={onChange} label={groupFavorites} />\n            <SettingToggle id='group-boosts' prefix='notifications' settings={settings} settingPath={['grouping', 'reblog']} onChange={onChange} label={groupBoosts} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-unread-markers'>\n          <span id='notifications-unread-markers' className='column-settings__section'>\n            <FormattedMessage id='notifications.column_settings.unread_notifications.category' defaultMessage='Unread notifications' />\n          </span>\n\n          <div className='column-settings__row'>\n            <SettingToggle id='unread-notification-markers' prefix='notifications' settings={settings} settingPath={['showUnread']} onChange={onChange} label={unreadMarkersShowStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-filter-bar'>\n          <span id='notifications-filter-bar' className='column-settings__section'>\n            <FormattedMessage id='notifications.column_settings.filter_bar.category' defaultMessage='Quick filter bar' />\n          </span>\n\n          <div className='column-settings__row'>\n            <SettingToggle id='show-filter-bar' prefix='notifications' settings={settings} settingPath={['quickFilter', 'show']} onChange={onChange} label={filterBarShowStr} />\n            <SettingToggle id='show-filter-bar' prefix='notifications' settings={settings} settingPath={['quickFilter', 'advanced']} onChange={onChange} label={filterAdvancedStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-follow'>\n          <span id='notifications-follow' className='column-settings__section'><FormattedMessage id='notifications.column_settings.follow' defaultMessage='New followers:' /></span>\n\n          <div className='column-settings__pillbar'>\n            <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'follow']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'follow']} onChange={this.onPushChange} label={pushStr} />}\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'follow']} onChange={onChange} label={showStr} />\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'follow']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-follow-request'>\n          <span id='notifications-follow-request' className='column-settings__section'><FormattedMessage id='notifications.column_settings.follow_request' defaultMessage='New follow requests:' /></span>\n\n          <div className='column-settings__pillbar'>\n            <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'follow_request']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'follow_request']} onChange={this.onPushChange} label={pushStr} />}\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'follow_request']} onChange={onChange} label={showStr} />\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'follow_request']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-favourite'>\n          <span id='notifications-favourite' className='column-settings__section'><FormattedMessage id='notifications.column_settings.favourite' defaultMessage='Favourites:' /></span>\n\n          <div className='column-settings__pillbar'>\n            <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'favourite']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'favourite']} onChange={this.onPushChange} label={pushStr} />}\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'favourite']} onChange={onChange} label={showStr} />\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'favourite']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-reaction'>\n          <span id='notifications-reaction' className='column-settings__section'><FormattedMessage id='notifications.column_settings.reaction' defaultMessage='Reactions:' /></span>\n\n          <div className='column-settings__pillbar'>\n            <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'reaction']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'reaction']} onChange={this.onPushChange} label={pushStr} />}\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'reaction']} onChange={onChange} label={showStr} />\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'reaction']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-mention'>\n          <span id='notifications-mention' className='column-settings__section'><FormattedMessage id='notifications.column_settings.mention' defaultMessage='Mentions:' /></span>\n\n          <div className='column-settings__pillbar'>\n            <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'mention']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'mention']} onChange={this.onPushChange} label={pushStr} />}\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'mention']} onChange={onChange} label={showStr} />\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'mention']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-reblog'>\n          <span id='notifications-reblog' className='column-settings__section'><FormattedMessage id='notifications.column_settings.reblog' defaultMessage='Boosts:' /></span>\n\n          <div className='column-settings__pillbar'>\n            <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'reblog']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'reblog']} onChange={this.onPushChange} label={pushStr} />}\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'reblog']} onChange={onChange} label={showStr} />\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'reblog']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-poll'>\n          <span id='notifications-poll' className='column-settings__section'><FormattedMessage id='notifications.column_settings.poll' defaultMessage='Poll results:' /></span>\n\n          <div className='column-settings__pillbar'>\n            <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'poll']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'poll']} onChange={this.onPushChange} label={pushStr} />}\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'poll']} onChange={onChange} label={showStr} />\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'poll']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-status'>\n          <span id='notifications-status' className='column-settings__section'><FormattedMessage id='notifications.column_settings.status' defaultMessage='New posts:' /></span>\n\n          <div className='column-settings__pillbar'>\n            <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'status']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'status']} onChange={this.onPushChange} label={pushStr} />}\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'status']} onChange={onChange} label={showStr} />\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'status']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-update'>\n          <span id='notifications-update' className='column-settings__section'><FormattedMessage id='notifications.column_settings.update' defaultMessage='Edits:' /></span>\n\n          <div className='column-settings__pillbar'>\n            <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'update']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'update']} onChange={this.onPushChange} label={pushStr} />}\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'update']} onChange={onChange} label={showStr} />\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'update']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        {((this.context.identity.permissions & PERMISSION_MANAGE_USERS) === PERMISSION_MANAGE_USERS) && (\n          <div role='group' aria-labelledby='notifications-admin-sign-up'>\n            <span id='notifications-status' className='column-settings__section'><FormattedMessage id='notifications.column_settings.admin.sign_up' defaultMessage='New sign-ups:' /></span>\n\n            <div className='column-settings__pillbar'>\n              <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'admin.sign_up']} onChange={onChange} label={alertStr} />\n              {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'admin.sign_up']} onChange={this.onPushChange} label={pushStr} />}\n              <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'admin.sign_up']} onChange={onChange} label={showStr} />\n              <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'admin.sign_up']} onChange={onChange} label={soundStr} />\n            </div>\n          </div>\n        )}\n\n        {((this.context.identity.permissions & PERMISSION_MANAGE_REPORTS) === PERMISSION_MANAGE_REPORTS) && (\n          <div role='group' aria-labelledby='notifications-admin-report'>\n            <span id='notifications-status' className='column-settings__section'><FormattedMessage id='notifications.column_settings.admin.report' defaultMessage='New reports:' /></span>\n\n            <div className='column-settings__pillbar'>\n              <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'admin.report']} onChange={onChange} label={alertStr} />\n              {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'admin.report']} onChange={this.onPushChange} label={pushStr} />}\n              <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'admin.report']} onChange={onChange} label={showStr} />\n              <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'admin.report']} onChange={onChange} label={soundStr} />\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport ColumnSettings from '../components/column_settings';\nimport { changeSetting } from 'flavours/glitch/actions/settings';\nimport { setFilter, clearNotifications, requestBrowserPermission } from 'flavours/glitch/actions/notifications';\nimport { changeAlerts as changePushNotifications } from 'flavours/glitch/actions/push_notifications';\nimport { openModal } from 'flavours/glitch/actions/modal';\nimport { showAlert } from 'flavours/glitch/actions/alerts';\n\nconst messages = defineMessages({\n  clearMessage: { id: 'notifications.clear_confirmation', defaultMessage: 'Are you sure you want to permanently clear all your notifications?' },\n  clearConfirm: { id: 'notifications.clear', defaultMessage: 'Clear notifications' },\n  permissionDenied: { id: 'notifications.permission_denied_alert', defaultMessage: 'Desktop notifications can\\'t be enabled, as browser permission has been denied before' },\n});\n\nconst mapStateToProps = state => ({\n  settings: state.getIn(['settings', 'notifications']),\n  pushSettings: state.get('push_notifications'),\n  alertsEnabled: state.getIn(['settings', 'notifications', 'alerts']).includes(true),\n  browserSupport: state.getIn(['notifications', 'browserSupport']),\n  browserPermission: state.getIn(['notifications', 'browserPermission']),\n});\n\nconst mapDispatchToProps = (dispatch, { intl }) => ({\n\n  onChange (path, checked) {\n    if (path[0] === 'push') {\n      if (checked && typeof window.Notification !== 'undefined' && Notification.permission !== 'granted') {\n        dispatch(requestBrowserPermission((permission) => {\n          if (permission === 'granted') {\n            dispatch(changePushNotifications(path.slice(1), checked));\n          } else {\n            dispatch(showAlert(undefined, messages.permissionDenied));\n          }\n        }));\n      } else {\n        dispatch(changePushNotifications(path.slice(1), checked));\n      }\n    } else if (path[0] === 'quickFilter') {\n      dispatch(changeSetting(['notifications', ...path], checked));\n      dispatch(setFilter('all'));\n    } else if (path[0] === 'alerts' && checked && typeof window.Notification !== 'undefined' && Notification.permission !== 'granted') {\n      if (checked && typeof window.Notification !== 'undefined' && Notification.permission !== 'granted') {\n        dispatch(requestBrowserPermission((permission) => {\n          if (permission === 'granted') {\n            dispatch(changeSetting(['notifications', ...path], checked));\n          } else {\n            dispatch(showAlert(undefined, messages.permissionDenied));\n          }\n        }));\n      } else {\n        dispatch(changeSetting(['notifications', ...path], checked));\n      }\n    } else {\n      dispatch(changeSetting(['notifications', ...path], checked));\n    }\n  },\n\n  onClear () {\n    dispatch(openModal('CONFIRM', {\n      message: intl.formatMessage(messages.clearMessage),\n      confirm: intl.formatMessage(messages.clearConfirm),\n      onConfirm: () => dispatch(clearNotifications()),\n    }));\n  },\n\n  onRequestNotificationPermission () {\n    dispatch(requestBrowserPermission());\n  },\n\n});\n\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(ColumnSettings));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport Icon from 'flavours/glitch/components/icon';\n\nconst tooltips = defineMessages({\n  mentions: { id: 'notifications.filter.mentions', defaultMessage: 'Mentions' },\n  favourites: { id: 'notifications.filter.favourites', defaultMessage: 'Favourites' },\n  reactions: { id: 'notifications.filter.reactions', defaultMessage: 'Reactions' },\n  boosts: { id: 'notifications.filter.boosts', defaultMessage: 'Boosts' },\n  polls: { id: 'notifications.filter.polls', defaultMessage: 'Poll results' },\n  follows: { id: 'notifications.filter.follows', defaultMessage: 'Follows' },\n  statuses: { id: 'notifications.filter.statuses', defaultMessage: 'Updates from people you follow' },\n});\n\nexport default @injectIntl\nclass FilterBar extends React.PureComponent {\n\n  static propTypes = {\n    selectFilter: PropTypes.func.isRequired,\n    selectedFilter: PropTypes.string.isRequired,\n    advancedMode: PropTypes.bool.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  onClick (notificationType) {\n    return () => this.props.selectFilter(notificationType);\n  }\n\n  render () {\n    const { selectedFilter, advancedMode, intl } = this.props;\n    const renderedElement = !advancedMode ? (\n      <div className='notification__filter-bar'>\n        <button\n          className={selectedFilter === 'all' ? 'active' : ''}\n          onClick={this.onClick('all')}\n        >\n          <FormattedMessage\n            id='notifications.filter.all'\n            defaultMessage='All'\n          />\n        </button>\n        <button\n          className={selectedFilter === 'mention' ? 'active' : ''}\n          onClick={this.onClick('mention')}\n        >\n          <FormattedMessage\n            id='notifications.filter.mentions'\n            defaultMessage='Mentions'\n          />\n        </button>\n      </div>\n    ) : (\n      <div className='notification__filter-bar'>\n        <button\n          className={selectedFilter === 'all' ? 'active' : ''}\n          onClick={this.onClick('all')}\n        >\n          <FormattedMessage\n            id='notifications.filter.all'\n            defaultMessage='All'\n          />\n        </button>\n        <button\n          className={selectedFilter === 'mention' ? 'active' : ''}\n          onClick={this.onClick('mention')}\n          title={intl.formatMessage(tooltips.mentions)}\n        >\n          <Icon id='reply-all' fixedWidth />\n        </button>\n        <button\n          className={selectedFilter === 'favourite' ? 'active' : ''}\n          onClick={this.onClick('favourite')}\n          title={intl.formatMessage(tooltips.favourites)}\n        >\n          <Icon id='star' fixedWidth />\n        </button>\n        <button\n          className={selectedFilter === 'reaction' ? 'active' : ''}\n          onClick={this.onClick('reaction')}\n          title={intl.formatMessage(tooltips.reactions)}\n        >\n          <Icon id='plus' fixedWidth />\n        </button>\n        <button\n          className={selectedFilter === 'reblog' ? 'active' : ''}\n          onClick={this.onClick('reblog')}\n          title={intl.formatMessage(tooltips.boosts)}\n        >\n          <Icon id='retweet' fixedWidth />\n        </button>\n        <button\n          className={selectedFilter === 'poll' ? 'active' : ''}\n          onClick={this.onClick('poll')}\n          title={intl.formatMessage(tooltips.polls)}\n        >\n          <Icon id='tasks' fixedWidth />\n        </button>\n        <button\n          className={selectedFilter === 'status' ? 'active' : ''}\n          onClick={this.onClick('status')}\n          title={intl.formatMessage(tooltips.statuses)}\n        >\n          <Icon id='home' fixedWidth />\n        </button>\n        <button\n          className={selectedFilter === 'follow' ? 'active' : ''}\n          onClick={this.onClick('follow')}\n          title={intl.formatMessage(tooltips.follows)}\n        >\n          <Icon id='user-plus' fixedWidth />\n        </button>\n      </div>\n    );\n    return renderedElement;\n  }\n\n}\n","import { connect } from 'react-redux';\nimport FilterBar from '../components/filter_bar';\nimport { setFilter } from '../../../actions/notifications';\n\nconst makeMapStateToProps = state => ({\n  selectedFilter: state.getIn(['settings', 'notifications', 'quickFilter', 'active']),\n  advancedMode: state.getIn(['settings', 'notifications', 'quickFilter', 'advanced']),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  selectFilter (newActiveFilter) {\n    dispatch(setFilter(newActiveFilter));\n  },\n});\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(FilterBar);\n","import React from 'react';\nimport Icon from 'flavours/glitch/components/icon';\nimport Button from 'flavours/glitch/components/button';\nimport IconButton from 'flavours/glitch/components/icon_button';\nimport { requestBrowserPermission } from 'flavours/glitch/actions/notifications';\nimport { changeSetting } from 'flavours/glitch/actions/settings';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nconst messages = defineMessages({\n  close: { id: 'lightbox.close', defaultMessage: 'Close' },\n});\n\nexport default @connect()\n@injectIntl\nclass NotificationsPermissionBanner extends React.PureComponent {\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  handleClick = () => {\n    this.props.dispatch(requestBrowserPermission());\n  };\n\n  handleClose = () => {\n    this.props.dispatch(changeSetting(['notifications', 'dismissPermissionBanner'], true));\n  };\n\n  render () {\n    const { intl } = this.props;\n\n    return (\n      <div className='notifications-permission-banner'>\n        <div className='notifications-permission-banner__close'>\n          <IconButton icon='times' onClick={this.handleClose} title={intl.formatMessage(messages.close)} />\n        </div>\n\n        <h2><FormattedMessage id='notifications_permission_banner.title' defaultMessage='Never miss a thing' /></h2>\n        <p><FormattedMessage id='notifications_permission_banner.how_to_control' defaultMessage=\"To receive notifications when Mastodon isn't open, enable desktop notifications. You can control precisely which types of interactions generate desktop notifications through the {icon} button above once they're enabled.\" values={{ icon: <Icon id='sliders' /> }} /></p>\n        <Button onClick={this.handleClick}><FormattedMessage id='notifications_permission_banner.enable' defaultMessage='Enable desktop notifications' /></Button>\n      </div>\n    );\n  }\n\n}\n","/**\n * Buttons widget for controlling the notification clearing mode.\n * In idle state, the cleaning mode button is shown. When the mode is active,\n * a Confirm and Abort buttons are shown in its place.\n */\n\n\n//  Package imports  //\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport Icon from 'flavours/glitch/components/icon';\n\nconst messages = defineMessages({\n  btnAll : { id: 'notification_purge.btn_all', defaultMessage: 'Select\\nall' },\n  btnNone : { id: 'notification_purge.btn_none', defaultMessage: 'Select\\nnone' },\n  btnInvert : { id: 'notification_purge.btn_invert', defaultMessage: 'Invert\\nselection' },\n  btnApply : { id: 'notification_purge.btn_apply', defaultMessage: 'Clear\\nselected' },\n});\n\nexport default @injectIntl\nclass NotificationPurgeButtons extends ImmutablePureComponent {\n\n  static propTypes = {\n    onDeleteMarked : PropTypes.func.isRequired,\n    onMarkAll : PropTypes.func.isRequired,\n    onMarkNone : PropTypes.func.isRequired,\n    onInvert : PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    markNewForDelete: PropTypes.bool,\n  };\n\n  render () {\n    const { intl, markNewForDelete } = this.props;\n\n    //className='active'\n    return (\n      <div className='column-header__notif-cleaning-buttons'>\n        <button onClick={this.props.onMarkAll} className={markNewForDelete ? 'active' : ''}>\n          <b>∀</b><br />{intl.formatMessage(messages.btnAll)}\n        </button>\n\n        <button onClick={this.props.onMarkNone} className={!markNewForDelete ? 'active' : ''}>\n          <b>∅</b><br />{intl.formatMessage(messages.btnNone)}\n        </button>\n\n        <button onClick={this.props.onInvert}>\n          <b>¬</b><br />{intl.formatMessage(messages.btnInvert)}\n        </button>\n\n        <button onClick={this.props.onDeleteMarked}>\n          <Icon id='trash' /><br />{intl.formatMessage(messages.btnApply)}\n        </button>\n      </div>\n    );\n  }\n\n}\n","//  Package imports.\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl } from 'react-intl';\n\n//  Our imports.\nimport NotificationPurgeButtons from 'flavours/glitch/components/notification_purge_buttons';\nimport {\n  deleteMarkedNotifications,\n  enterNotificationClearingMode,\n  markAllNotifications,\n} from 'flavours/glitch/actions/notifications';\nimport { openModal } from 'flavours/glitch/actions/modal';\n\nconst messages = defineMessages({\n  clearMessage: { id: 'notifications.marked_clear_confirmation', defaultMessage: 'Are you sure you want to permanently clear all selected notifications?' },\n  clearConfirm: { id: 'notifications.marked_clear', defaultMessage: 'Clear selected notifications' },\n});\n\nconst mapDispatchToProps = (dispatch, { intl }) => ({\n  onEnterCleaningMode(yes) {\n    dispatch(enterNotificationClearingMode(yes));\n  },\n\n  onDeleteMarked() {\n    dispatch(openModal('CONFIRM', {\n      message: intl.formatMessage(messages.clearMessage),\n      confirm: intl.formatMessage(messages.clearConfirm),\n      onConfirm: () => dispatch(deleteMarkedNotifications()),\n    }));\n  },\n\n  onMarkAll() {\n    dispatch(markAllNotifications(true));\n  },\n\n  onMarkNone() {\n    dispatch(markAllNotifications(false));\n  },\n\n  onInvert() {\n    dispatch(markAllNotifications(null));\n  },\n});\n\nconst mapStateToProps = state => ({\n  markNewForDelete: state.getIn(['notifications', 'markNewForDelete']),\n});\n\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(NotificationPurgeButtons));\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport Column from 'flavours/glitch/components/column';\nimport ColumnHeader from 'flavours/glitch/components/column_header';\nimport {\n  enterNotificationClearingMode,\n  expandNotifications,\n  scrollTopNotifications,\n  mountNotifications,\n  unmountNotifications,\n  loadPending,\n  markNotificationsAsRead,\n} from 'flavours/glitch/actions/notifications';\nimport { addColumn, removeColumn, moveColumn } from 'flavours/glitch/actions/columns';\nimport { submitMarkers } from 'flavours/glitch/actions/markers';\nimport NotificationContainer from './containers/notification_container';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ColumnSettingsContainer from './containers/column_settings_container';\nimport FilterBarContainer from './containers/filter_bar_container';\nimport { createSelector } from 'reselect';\nimport { List as ImmutableList } from 'immutable';\nimport { debounce } from 'lodash';\nimport ScrollableList from 'flavours/glitch/components/scrollable_list';\nimport LoadGap from 'flavours/glitch/components/load_gap';\nimport Icon from 'flavours/glitch/components/icon';\nimport compareId from 'flavours/glitch/compare_id';\nimport NotificationsPermissionBanner from './components/notifications_permission_banner';\nimport NotSignedInIndicator from 'flavours/glitch/components/not_signed_in_indicator';\nimport { Helmet } from 'react-helmet';\n\nimport NotificationPurgeButtonsContainer from 'flavours/glitch/containers/notification_purge_buttons_container';\n\nconst messages = defineMessages({\n  title: { id: 'column.notifications', defaultMessage: 'Notifications' },\n  enterNotifCleaning : { id: 'notification_purge.start', defaultMessage: 'Enter notification cleaning mode' },\n  markAsRead : { id: 'notifications.mark_as_read', defaultMessage: 'Mark every notification as read' },\n});\n\nconst getExcludedTypes = createSelector([\n  state => state.getIn(['settings', 'notifications', 'shows']),\n], (shows) => {\n  return ImmutableList(shows.filter(item => !item).keys());\n});\n\nconst getNotifications = createSelector([\n  state => state.getIn(['settings', 'notifications', 'quickFilter', 'show']),\n  state => state.getIn(['settings', 'notifications', 'quickFilter', 'active']),\n  getExcludedTypes,\n  state => state.getIn(['notifications', 'items']),\n], (showFilterBar, allowedType, excludedTypes, notifications) => {\n  if (!showFilterBar || allowedType === 'all') {\n    // used if user changed the notification settings after loading the notifications from the server\n    // otherwise a list of notifications will come pre-filtered from the backend\n    // we need to turn it off for FilterBar in order not to block ourselves from seeing a specific category\n    return notifications.filterNot(item => item !== null && excludedTypes.includes(item.get('type')));\n  }\n  return notifications.filter(item => item === null || allowedType === item.get('type'));\n});\n\nconst mapStateToProps = state => ({\n  showFilterBar: state.getIn(['settings', 'notifications', 'quickFilter', 'show']),\n  notifications: getNotifications(state),\n  localSettings:  state.get('local_settings'),\n  isLoading: state.getIn(['notifications', 'isLoading'], 0) > 0,\n  isUnread: state.getIn(['notifications', 'unread']) > 0 || state.getIn(['notifications', 'pendingItems']).size > 0,\n  hasMore: state.getIn(['notifications', 'hasMore']),\n  numPending: state.getIn(['notifications', 'pendingItems'], ImmutableList()).size,\n  notifCleaningActive: state.getIn(['notifications', 'cleaningMode']),\n  lastReadId: state.getIn(['settings', 'notifications', 'showUnread']) ? state.getIn(['notifications', 'readMarkerId']) : '0',\n  canMarkAsRead: state.getIn(['settings', 'notifications', 'showUnread']) && state.getIn(['notifications', 'readMarkerId']) !== '0' && getNotifications(state).some(item => item !== null && compareId(item.get('id'), state.getIn(['notifications', 'readMarkerId'])) > 0),\n  needsNotificationPermission: state.getIn(['settings', 'notifications', 'alerts']).includes(true) && state.getIn(['notifications', 'browserSupport']) && state.getIn(['notifications', 'browserPermission']) === 'default' && !state.getIn(['settings', 'notifications', 'dismissPermissionBanner']),\n  grouping: state.getIn(['settings', 'notifications', 'grouping']),\n});\n\n/* glitch */\nconst mapDispatchToProps = dispatch => ({\n  onEnterCleaningMode(yes) {\n    dispatch(enterNotificationClearingMode(yes));\n  },\n  onMarkAsRead() {\n    dispatch(markNotificationsAsRead());\n    dispatch(submitMarkers({ immediate: true }));\n  },\n  onMount() {\n    dispatch(mountNotifications());\n  },\n  onUnmount() {\n    dispatch(unmountNotifications());\n  },\n  dispatch,\n});\n\nexport default @connect(mapStateToProps, mapDispatchToProps)\n@injectIntl\nclass Notifications extends React.PureComponent {\n\n  static contextTypes = {\n    identity: PropTypes.object,\n  };\n\n  static propTypes = {\n    columnId: PropTypes.string,\n    notifications: ImmutablePropTypes.list.isRequired,\n    showFilterBar: PropTypes.bool.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    isLoading: PropTypes.bool,\n    isUnread: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    hasMore: PropTypes.bool,\n    numPending: PropTypes.number,\n    localSettings: ImmutablePropTypes.map,\n    notifCleaningActive: PropTypes.bool,\n    onEnterCleaningMode: PropTypes.func,\n    onMount: PropTypes.func,\n    onUnmount: PropTypes.func,\n    lastReadId: PropTypes.string,\n    canMarkAsRead: PropTypes.bool,\n    needsNotificationPermission: PropTypes.bool,\n    grouping: ImmutablePropTypes.map,\n  };\n\n  static defaultProps = {\n    trackScroll: true,\n  };\n\n  state = {\n    animatingNCD: false,\n  };\n\n  handleLoadGap = (maxId) => {\n    this.props.dispatch(expandNotifications({ maxId }));\n  };\n\n  handleLoadOlder = debounce(() => {\n    const last = this.props.notifications.last();\n    this.props.dispatch(expandNotifications({ maxId: last && last.get('id') }));\n  }, 300, { leading: true });\n\n  handleLoadPending = () => {\n    this.props.dispatch(loadPending());\n  };\n\n  handleScrollToTop = debounce(() => {\n    this.props.dispatch(scrollTopNotifications(true));\n  }, 100);\n\n  handleScroll = debounce(() => {\n    this.props.dispatch(scrollTopNotifications(false));\n  }, 100);\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('NOTIFICATIONS', {}));\n    }\n  };\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  };\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  };\n\n  setColumnRef = c => {\n    this.column = c;\n  };\n\n  handleMoveUp = id => {\n    const elementIndex = this.props.notifications.findIndex(item => item !== null && item.get('id') === id) - 1;\n    this._selectChild(elementIndex, true);\n  };\n\n  handleMoveDown = id => {\n    const elementIndex = this.props.notifications.findIndex(item => item !== null && item.get('id') === id) + 1;\n    this._selectChild(elementIndex, false);\n  };\n\n  _selectChild (index, align_top) {\n    const container = this.column.node;\n    const element = container.querySelector(`article:nth-of-type(${index + 1}) .focusable`);\n\n    if (element) {\n      if (align_top && container.scrollTop > element.offsetTop) {\n        element.scrollIntoView(true);\n      } else if (!align_top && container.scrollTop + container.clientHeight < element.offsetTop + element.offsetHeight) {\n        element.scrollIntoView(false);\n      }\n      element.focus();\n    }\n  }\n\n  componentDidMount () {\n    const { onMount } = this.props;\n    if (onMount) {\n      onMount();\n    }\n  }\n\n  componentWillUnmount () {\n    const { onUnmount } = this.props;\n    if (onUnmount) {\n      onUnmount();\n    }\n  }\n\n  handleTransitionEndNCD = () => {\n    this.setState({ animatingNCD: false });\n  };\n\n  onEnterCleaningMode = () => {\n    this.setState({ animatingNCD: true });\n    this.props.onEnterCleaningMode(!this.props.notifCleaningActive);\n  };\n\n  handleMarkAsRead = () => {\n    this.props.onMarkAsRead();\n  };\n\n  /**\n   * Gets the list of notifications, grouped up (as per user settings) such that multiple users' interactions on the same\n   * post are collapsed into a single notification.\n   */\n  getGroupedNotifications() {\n    const { notifications, grouping } = this.props;\n    const groupedNotifications = [];\n\n    // if grouping is { \"favourite\": true, \"reblog\": false, \"foo\": true, \"bar\": false }\n    // then typesToGroup is [ \"favourite\", \"foo\" ]\n    const typesToGroup = grouping.reduce((acc, enabled, groupBy) => enabled ? acc.push(groupBy) : acc, ImmutableList.of());\n\n    // for each notification....\n    for (const notif of notifications) {\n\n      // `null` is used to signify that there is a \"loading gap\" in the notifications. We make sure that these loading gaps persist.\n      if (!notif) {\n        groupedNotifications.push(notif);\n        continue;\n      }\n\n      // Make sure that we only group up notifications of the provided types.\n      if (typesToGroup.includes(notif.get('type'))) {\n\n        // Get an already existing notification to collapse into\n        const matchingNotifIdx = groupedNotifications.findIndex(\n          other => other?.get('type') === notif.get('type') && other?.get('status') === notif.get('status'),\n        );\n        const matchingNotif = groupedNotifications[matchingNotifIdx];\n\n        // Collapse this notifcation into the existing notification if it exists,\n        // otherwise push it as a new notification.\n        if (matchingNotif) {\n          groupedNotifications[matchingNotifIdx] = matchingNotif.update(\n            'account',\n            ImmutableList(),\n            accounts => accounts.push(notif.get('account')),\n          );\n        } else {\n          groupedNotifications.push(notif.update('account', singleAccount => ImmutableList.of(singleAccount)));\n        }\n      } else {\n        groupedNotifications.push(notif);\n      }\n    }\n    return ImmutableList(groupedNotifications);\n  }\n\n  render () {\n    const { intl, isLoading, isUnread, columnId, multiColumn, hasMore, numPending, showFilterBar, lastReadId, canMarkAsRead, needsNotificationPermission } = this.props;\n    const { notifCleaning, notifCleaningActive } = this.props;\n    const { animatingNCD } = this.state;\n    const pinned = !!columnId;\n    const emptyMessage = <FormattedMessage id='empty_column.notifications' defaultMessage=\"You don't have any notifications yet. When other people interact with you, you will see it here.\" />;\n    const { signedIn } = this.context.identity;\n\n    let scrollableContent = null;\n\n    const filterBarContainer = (signedIn && showFilterBar)\n      ? (<FilterBarContainer />)\n      : null;\n\n    const notifications = this.getGroupedNotifications();\n\n    if (isLoading && this.scrollableContent) {\n      scrollableContent = this.scrollableContent;\n    } else if (notifications.size > 0 || hasMore) {\n      scrollableContent = notifications.map((item, index) => item === null ? (\n        <LoadGap\n          key={'gap:' + notifications.getIn([index + 1, 'id'])}\n          disabled={isLoading}\n          maxId={index > 0 ? notifications.getIn([index - 1, 'id']) : null}\n          onClick={this.handleLoadGap}\n        />\n      ) : (\n        <NotificationContainer\n          key={item.get('id')}\n          notification={item}\n          accountId={item.get('account')}\n          onMoveUp={this.handleMoveUp}\n          onMoveDown={this.handleMoveDown}\n          unread={lastReadId !== '0' && compareId(item.get('id'), lastReadId) > 0}\n        />\n      ));\n    } else {\n      scrollableContent = null;\n    }\n\n    this.scrollableContent = scrollableContent;\n\n    let scrollContainer;\n\n    if (signedIn) {\n      scrollContainer = (\n        <ScrollableList\n          scrollKey={`notifications-${columnId}`}\n          trackScroll={!pinned}\n          isLoading={isLoading}\n          showLoading={isLoading && notifications.size === 0}\n          hasMore={hasMore}\n          numPending={numPending}\n          prepend={needsNotificationPermission && <NotificationsPermissionBanner />}\n          alwaysPrepend\n          emptyMessage={emptyMessage}\n          onLoadMore={this.handleLoadOlder}\n          onLoadPending={this.handleLoadPending}\n          onScrollToTop={this.handleScrollToTop}\n          onScroll={this.handleScroll}\n          bindToDocument={!multiColumn}\n        >\n          {scrollableContent}\n        </ScrollableList>\n      );\n    } else {\n      scrollContainer = <NotSignedInIndicator />;\n    }\n\n    const extraButtons = [];\n\n    if (canMarkAsRead) {\n      extraButtons.push(\n        <button\n          key='mark-as-read'\n          aria-label={intl.formatMessage(messages.markAsRead)}\n          title={intl.formatMessage(messages.markAsRead)}\n          onClick={this.handleMarkAsRead}\n          className='column-header__button'\n        >\n          <Icon id='check' />\n        </button>,\n      );\n    }\n\n    const notifCleaningButtonClassName = classNames('column-header__button', {\n      'active': notifCleaningActive,\n    });\n\n    const notifCleaningDrawerClassName = classNames('ncd column-header__collapsible', {\n      'collapsed': !notifCleaningActive,\n      'animating': animatingNCD,\n    });\n\n    const msgEnterNotifCleaning = intl.formatMessage(messages.enterNotifCleaning);\n\n    extraButtons.push(\n      <button\n        key='notif-cleaning'\n        aria-label={msgEnterNotifCleaning}\n        title={msgEnterNotifCleaning}\n        onClick={this.onEnterCleaningMode}\n        className={notifCleaningButtonClassName}\n      >\n        <Icon id='eraser' />\n      </button>,\n    );\n\n    const notifCleaningDrawer = (\n      <div className={notifCleaningDrawerClassName} onTransitionEnd={this.handleTransitionEndNCD}>\n        <div className='column-header__collapsible-inner nopad-drawer'>\n          {(notifCleaningActive || animatingNCD) ? (<NotificationPurgeButtonsContainer />) : null }\n        </div>\n      </div>\n    );\n\n    const extraButton = (\n      <>\n        {extraButtons}\n      </>\n    );\n\n    return (\n      <Column\n        bindToDocument={!multiColumn}\n        ref={this.setColumnRef}\n        name='notifications'\n        extraClasses={this.props.notifCleaningActive ? 'notif-cleaning' : null}\n        label={intl.formatMessage(messages.title)}\n      >\n        <ColumnHeader\n          icon='bell'\n          active={isUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n          localSettings={this.props.localSettings}\n          extraButton={extraButton}\n          appendContent={notifCleaningDrawer}\n        >\n          <ColumnSettingsContainer />\n        </ColumnHeader>\n\n        {filterBarContainer}\n        {scrollContainer}\n\n        <Helmet>\n          <title>{intl.formatMessage(messages.title)}</title>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}