{"version":3,"sources":["webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/followers/index.jsx"],"names":["RemoteHint","_ref2","url","_jsx","TimelineHint","resource","FormattedMessage","id","defaultMessage","Followers","connect","mapStateToProps","state","_ref","params","acct","accountId","getIn","normalizeForLookup","remote","remoteUrl","isAccount","accountIds","hasMore","isLoading","suspended","hidden","getAccountHidden","_dec","_class2","ImmutablePureComponent","constructor","arguments","handleLoadMore","_debounce","this","props","dispatch","expandFollowers","leading","setRef","c","column","handleHeaderClick","scrollTop","_load","fetchAccount","fetchFollowers","componentDidMount","lookupAccount","componentDidUpdate","prevProps","render","multiColumn","Column","MissingIndicator","LoadingIndicator","emptyMessage","forceEmptyState","LimitedAccountHint","isEmpty","remoteMessage","React","createElement","ref","ProfileColumnHeader","onClick","ScrollableList","scrollKey","onLoadMore","prepend","HeaderContainer","hideTabs","alwaysPrepend","append","bindToDocument","map","AccountContainer","withNote","propTypes","PropTypes","shape","string","isRequired","func","ImmutablePropTypes","list","bool","_class"],"mappings":"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","file":"js/flavours/glitch/async/followers-752a9c2f161f536172a8.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { debounce } from 'lodash';\nimport LoadingIndicator from 'flavours/glitch/components/loading_indicator';\nimport {\n  lookupAccount,\n  fetchAccount,\n  fetchFollowers,\n  expandFollowers,\n} from 'flavours/glitch/actions/accounts';\nimport { FormattedMessage } from 'react-intl';\nimport AccountContainer from 'flavours/glitch/containers/account_container';\nimport Column from 'flavours/glitch/features/ui/components/column';\nimport ProfileColumnHeader from 'flavours/glitch/features/account/components/profile_column_header';\nimport HeaderContainer from 'flavours/glitch/features/account_timeline/containers/header_container';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport MissingIndicator from 'flavours/glitch/components/missing_indicator';\nimport ScrollableList from 'flavours/glitch/components/scrollable_list';\nimport TimelineHint from 'flavours/glitch/components/timeline_hint';\nimport LimitedAccountHint from '../account_timeline/components/limited_account_hint';\nimport { getAccountHidden } from 'flavours/glitch/selectors';\nimport { normalizeForLookup } from 'flavours/glitch/reducers/accounts_map';\n\nconst mapStateToProps = (state, { params: { acct, id } }) => {\n  const accountId = id || state.getIn(['accounts_map', normalizeForLookup(acct)]);\n\n  if (!accountId) {\n    return {\n      isLoading: true,\n    };\n  }\n\n  return {\n    accountId,\n    remote: !!(state.getIn(['accounts', accountId, 'acct']) !== state.getIn(['accounts', accountId, 'username'])),\n    remoteUrl: state.getIn(['accounts', accountId, 'url']),\n    isAccount: !!state.getIn(['accounts', accountId]),\n    accountIds: state.getIn(['user_lists', 'followers', accountId, 'items']),\n    hasMore: !!state.getIn(['user_lists', 'followers', accountId, 'next']),\n    isLoading: state.getIn(['user_lists', 'followers', accountId, 'isLoading'], true),\n    suspended: state.getIn(['accounts', accountId, 'suspended'], false),\n    hidden: getAccountHidden(state, accountId),\n  };\n};\n\nconst RemoteHint = ({ url }) => (\n  <TimelineHint url={url} resource={<FormattedMessage id='timeline_hint.resources.followers' defaultMessage='Followers' />} />\n);\n\nRemoteHint.propTypes = {\n  url: PropTypes.string.isRequired,\n};\n\nexport default @connect(mapStateToProps)\nclass Followers extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.shape({\n      acct: PropTypes.string,\n      id: PropTypes.string,\n    }).isRequired,\n    accountId: PropTypes.string,\n    dispatch: PropTypes.func.isRequired,\n    accountIds: ImmutablePropTypes.list,\n    hasMore: PropTypes.bool,\n    isLoading: PropTypes.bool,\n    isAccount: PropTypes.bool,\n    suspended: PropTypes.bool,\n    hidden: PropTypes.bool,\n    remote: PropTypes.bool,\n    remoteUrl: PropTypes.string,\n    multiColumn: PropTypes.bool,\n  };\n\n  _load () {\n    const { accountId, isAccount, dispatch } = this.props;\n\n    if (!isAccount) dispatch(fetchAccount(accountId));\n    dispatch(fetchFollowers(accountId));\n  }\n\n  componentDidMount () {\n    const { params: { acct }, accountId, dispatch } = this.props;\n\n    if (accountId) {\n      this._load();\n    } else {\n      dispatch(lookupAccount(acct));\n    }\n  }\n\n  componentDidUpdate (prevProps) {\n    const { params: { acct }, accountId, dispatch } = this.props;\n\n    if (prevProps.accountId !== accountId && accountId) {\n      this._load();\n    } else if (prevProps.params.acct !== acct) {\n      dispatch(lookupAccount(acct));\n    }\n  }\n\n  handleLoadMore = debounce(() => {\n    this.props.dispatch(expandFollowers(this.props.accountId));\n  }, 300, { leading: true });\n\n  setRef = c => {\n    this.column = c;\n  };\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  };\n\n  render () {\n    const { accountId, accountIds, hasMore, isAccount, multiColumn, isLoading, suspended, hidden, remote, remoteUrl } = this.props;\n\n    if (!isAccount) {\n      return (\n        <Column>\n          <MissingIndicator />\n        </Column>\n      );\n    }\n\n    if (!accountIds) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    let emptyMessage;\n\n    const forceEmptyState = suspended || hidden;\n\n    if (suspended) {\n      emptyMessage = <FormattedMessage id='empty_column.account_suspended' defaultMessage='Account suspended' />;\n    } else if (hidden) {\n      emptyMessage = <LimitedAccountHint accountId={accountId} />;\n    } else if (remote && accountIds.isEmpty()) {\n      emptyMessage = <RemoteHint url={remoteUrl} />;\n    } else {\n      emptyMessage = <FormattedMessage id='account.followers.empty' defaultMessage='No one follows this user yet.' />;\n    }\n\n    const remoteMessage = remote ? <RemoteHint url={remoteUrl} /> : null;\n\n    return (\n      <Column ref={this.setRef}>\n        <ProfileColumnHeader onClick={this.handleHeaderClick} multiColumn={multiColumn} />\n\n        <ScrollableList\n          scrollKey='followers'\n          hasMore={!forceEmptyState && hasMore}\n          isLoading={isLoading}\n          onLoadMore={this.handleLoadMore}\n          prepend={<HeaderContainer accountId={this.props.accountId} hideTabs />}\n          alwaysPrepend\n          append={remoteMessage}\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n        >\n          {accountIds.map(id =>\n            <AccountContainer key={id} id={id} withNote={false} />,\n          )}\n        </ScrollableList>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}