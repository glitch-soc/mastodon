{"version":3,"sources":["webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/mutes/index.jsx"],"names":["messages","defineMessages","heading","Mutes","connect","state","accountIds","getIn","hasMore","isLoading","_dec","_class","injectIntl","_class2","ImmutablePureComponent","constructor","arguments","handleLoadMore","_debounce","this","props","dispatch","expandMutes","leading","componentWillMount","fetchMutes","render","intl","multiColumn","_jsx","Column","LoadingIndicator","emptyMessage","FormattedMessage","id","defaultMessage","bindToDocument","name","icon","formatMessage","ColumnBackButtonSlim","ScrollableList","scrollKey","onLoadMore","map","AccountContainer","defaultAction","Helmet","content","propTypes","params","PropTypes","object","isRequired","func","bool","ImmutablePropTypes","list"],"mappings":"4SAeA,MAAMA,EAAWC,YAAe,CAC9BC,QAAQ,CAAD,kDAON,IAIGC,EAFUC,mBANQC,IAAK,CAC3BC,WAAYD,EAAME,MAAM,CAAC,aAAc,QAAS,UAChDC,UAAWH,EAAME,MAAM,CAAC,aAAc,QAAS,SAC/CE,UAAWJ,EAAME,MAAM,CAAC,aAAc,QAAS,cAAc,MAGvBG,CAAAC,EACvCC,aAAUC,EADI,cAEKC,IAAuBC,cAAA,SAAAC,WAAA,KAgBzCC,eAAiBC,KAAS,KACxBC,KAAKC,MAAMC,SAASC,iBACnB,IAAK,CAAEC,SAAS,IANnBC,qBACEL,KAAKC,MAAMC,SAASI,eAOtBC,SACE,MAAM,KAAEC,EAAI,WAAErB,EAAU,QAAEE,EAAO,YAAEoB,EAAW,UAAEnB,GAAcU,KAAKC,MAEnE,IAAKd,EACH,OACEuB,YAACC,IAAM,UACLD,YAACE,IAAgB,KAKvB,MAAMC,EAAeH,YAACI,IAAgB,CAACC,GAAG,qBAAqBC,eAAe,qCAE9E,OACEN,YAACC,IAAM,CAACM,gBAAiBR,EAAaS,KAAK,QAAQC,KAAK,aAAapC,QAASyB,EAAKY,cAAcvC,EAASE,eAAS,EACjH2B,YAACW,IAAoB,IACrBX,YAACY,IAAc,CACbC,UAAU,QACVC,WAAYxB,KAAKF,eACjBT,QAASA,EACTC,UAAWA,EACXuB,aAAcA,EACdI,gBAAiBR,QAAY,EAE5BtB,EAAWsC,KAAIV,GACdL,YAACgB,IAAgB,CAAUX,GAAIA,EAAIY,cAAc,QAA1BZ,MAI3BL,YAACkB,IAAM,UACLlB,YAAA,QAAMQ,KAAK,SAASW,QAAQ,gBAMrCnC,EAtDQoC,UAAY,CACjBC,OAAQC,IAAUC,OAAOC,WACzBhC,SAAU8B,IAAUG,KAAKD,WACzB7C,QAAS2C,IAAUI,KACnB9C,UAAW0C,IAAUI,KACrBjD,WAAYkD,IAAmBC,KAC/B9B,KAAMwB,IAAUC,OAAOC,WACvBzB,YAAauB,IAAUI,MAVhB5C,EAWRE,KAAAF","file":"js/flavours/glitch/async/mutes-f669104e2fd2c22185cc.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { debounce } from 'lodash';\nimport LoadingIndicator from 'flavours/glitch/components/loading_indicator';\nimport Column from 'flavours/glitch/features/ui/components/column';\nimport ColumnBackButtonSlim from 'flavours/glitch/components/column_back_button_slim';\nimport AccountContainer from 'flavours/glitch/containers/account_container';\nimport { fetchMutes, expandMutes } from 'flavours/glitch/actions/mutes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport ScrollableList from 'flavours/glitch/components/scrollable_list';\nimport { Helmet } from 'react-helmet';\n\nconst messages = defineMessages({\n  heading: { id: 'column.mutes', defaultMessage: 'Muted users' },\n});\n\nconst mapStateToProps = state => ({\n  accountIds: state.getIn(['user_lists', 'mutes', 'items']),\n  hasMore: !!state.getIn(['user_lists', 'mutes', 'next']),\n  isLoading: state.getIn(['user_lists', 'mutes', 'isLoading'], true),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass Mutes extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    hasMore: PropTypes.bool,\n    isLoading: PropTypes.bool,\n    accountIds: ImmutablePropTypes.list,\n    intl: PropTypes.object.isRequired,\n    multiColumn: PropTypes.bool,\n  };\n\n  componentWillMount () {\n    this.props.dispatch(fetchMutes());\n  }\n\n  handleLoadMore = debounce(() => {\n    this.props.dispatch(expandMutes());\n  }, 300, { leading: true });\n\n  render () {\n    const { intl, accountIds, hasMore, multiColumn, isLoading } = this.props;\n\n    if (!accountIds) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    const emptyMessage = <FormattedMessage id='empty_column.mutes' defaultMessage=\"You haven't muted any users yet.\" />;\n\n    return (\n      <Column bindToDocument={!multiColumn} name='mutes' icon='volume-off' heading={intl.formatMessage(messages.heading)}>\n        <ColumnBackButtonSlim />\n        <ScrollableList\n          scrollKey='mutes'\n          onLoadMore={this.handleLoadMore}\n          hasMore={hasMore}\n          isLoading={isLoading}\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n        >\n          {accountIds.map(id =>\n            <AccountContainer key={id} id={id} defaultAction='mute' />,\n          )}\n        </ScrollableList>\n\n        <Helmet>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}