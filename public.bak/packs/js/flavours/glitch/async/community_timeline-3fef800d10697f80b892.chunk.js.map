{"version":3,"sources":["webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/community_timeline/components/column_settings.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/community_timeline/containers/column_settings_container.js","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/community_timeline/index.jsx"],"names":["messages","defineMessages","filter_regex","settings","ColumnSettings","injectIntl","_class","React","PureComponent","render","onChange","intl","this","props","_jsx","className","SettingToggle","settingPath","label","FormattedMessage","id","defaultMessage","SettingText","formatMessage","connect","mapStateToProps","state","_ref","columnId","uuid","columns","getIn","index","findIndex","c","get","mapDispatchToProps","dispatch","_ref2","key","checked","changeColumnParams","changeSetting","title","CommunityTimeline","_dec","onlyMedia","regex","timelineState","hasUnread","_class2","constructor","arguments","handlePin","removeColumn","addColumn","other","handleMove","dir","moveColumn","handleHeaderClick","column","scrollTop","setRef","handleLoadMore","maxId","expandCommunityTimeline","componentDidMount","signedIn","context","identity","disconnect","connectCommunityStream","componentDidUpdate","prevProps","componentWillUnmount","multiColumn","pinned","createElement","Column","ref","name","bindToDocument","ColumnHeader","icon","active","onPin","onMove","onClick","ColumnSettingsContainer","DismissableBanner","values","domain","StatusListContainer","trackScroll","scrollKey","timelineId","onLoadMore","emptyMessage","Helmet","content","defaultProps","contextTypes","router","PropTypes","object"],"mappings":"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","file":"js/flavours/glitch/async/community_timeline-3fef800d10697f80b892.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport SettingText from 'flavours/glitch/components/setting_text';\nimport SettingToggle from 'flavours/glitch/features/notifications/components/setting_toggle';\n\nconst messages = defineMessages({\n  filter_regex: { id: 'home.column_settings.filter_regex', defaultMessage: 'Filter out by regular expressions' },\n  settings: { id: 'home.settings', defaultMessage: 'Column settings' },\n});\n\nexport default @injectIntl\nclass ColumnSettings extends React.PureComponent {\n\n  static propTypes = {\n    settings: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    columnId: PropTypes.string,\n  };\n\n  render () {\n    const { settings, onChange, intl } = this.props;\n\n    return (\n      <div>\n        <div className='column-settings__row'>\n          <SettingToggle settings={settings} settingPath={['other', 'onlyMedia']} onChange={onChange} label={<FormattedMessage id='community.column_settings.media_only' defaultMessage='Media only' />} />\n        </div>\n\n        <span className='column-settings__section'><FormattedMessage id='home.column_settings.advanced' defaultMessage='Advanced' /></span>\n\n        <div className='column-settings__row'>\n          <SettingText settings={settings} settingPath={['regex', 'body']} onChange={onChange} label={intl.formatMessage(messages.filter_regex)} />\n        </div>\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport ColumnSettings from '../components/column_settings';\nimport { changeColumnParams } from 'flavours/glitch/actions/columns';\nimport { changeSetting } from 'flavours/glitch/actions/settings';\n\nconst mapStateToProps = (state, { columnId }) => {\n  const uuid = columnId;\n  const columns = state.getIn(['settings', 'columns']);\n  const index = columns.findIndex(c => c.get('uuid') === uuid);\n\n  return {\n    settings: (uuid && index >= 0) ? columns.get(index).get('params') : state.getIn(['settings', 'community']),\n  };\n};\n\nconst mapDispatchToProps = (dispatch, { columnId }) => {\n  return {\n    onChange (key, checked) {\n      if (columnId) {\n        dispatch(changeColumnParams(columnId, key, checked));\n      } else {\n        dispatch(changeSetting(['community', ...key], checked));\n      }\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ColumnSettings);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport StatusListContainer from 'flavours/glitch/features/ui/containers/status_list_container';\nimport Column from 'flavours/glitch/components/column';\nimport ColumnHeader from 'flavours/glitch/components/column_header';\nimport { expandCommunityTimeline } from 'flavours/glitch/actions/timelines';\nimport { addColumn, removeColumn, moveColumn } from 'flavours/glitch/actions/columns';\nimport ColumnSettingsContainer from './containers/column_settings_container';\nimport { connectCommunityStream } from 'flavours/glitch/actions/streaming';\nimport { Helmet } from 'react-helmet';\nimport { domain } from 'flavours/glitch/initial_state';\nimport DismissableBanner from 'flavours/glitch/components/dismissable_banner';\n\nconst messages = defineMessages({\n  title: { id: 'column.community', defaultMessage: 'Local timeline' },\n});\n\nconst mapStateToProps = (state, { columnId }) => {\n  const uuid = columnId;\n  const columns = state.getIn(['settings', 'columns']);\n  const index = columns.findIndex(c => c.get('uuid') === uuid);\n  const onlyMedia = (columnId && index >= 0) ? columns.get(index).getIn(['params', 'other', 'onlyMedia']) : state.getIn(['settings', 'community', 'other', 'onlyMedia']);\n  const regex = (columnId && index >= 0) ? columns.get(index).getIn(['params', 'regex', 'body']) : state.getIn(['settings', 'community', 'regex', 'body']);\n  const timelineState = state.getIn(['timelines', `community${onlyMedia ? ':media' : ''}`]);\n\n  return {\n    hasUnread: !!timelineState && timelineState.get('unread') > 0,\n    onlyMedia,\n    regex,\n  };\n};\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass CommunityTimeline extends React.PureComponent {\n\n  static defaultProps = {\n    onlyMedia: false,\n  };\n\n  static contextTypes = {\n    router: PropTypes.object,\n    identity: PropTypes.object,\n  };\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    columnId: PropTypes.string,\n    intl: PropTypes.object.isRequired,\n    hasUnread: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    onlyMedia: PropTypes.bool,\n    regex: PropTypes.string,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch, onlyMedia } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('COMMUNITY', { other: { onlyMedia } }));\n    }\n  };\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  };\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  };\n\n  componentDidMount () {\n    const { dispatch, onlyMedia } = this.props;\n    const { signedIn } = this.context.identity;\n\n    dispatch(expandCommunityTimeline({ onlyMedia }));\n\n    if (signedIn) {\n      this.disconnect = dispatch(connectCommunityStream({ onlyMedia }));\n    }\n  }\n\n  componentDidUpdate (prevProps) {\n    const { signedIn } = this.context.identity;\n\n    if (prevProps.onlyMedia !== this.props.onlyMedia) {\n      const { dispatch, onlyMedia } = this.props;\n\n      if (this.disconnect) {\n        this.disconnect();\n      }\n\n      dispatch(expandCommunityTimeline({ onlyMedia }));\n\n      if (signedIn) {\n        this.disconnect = dispatch(connectCommunityStream({ onlyMedia }));\n      }\n    }\n  }\n\n  componentWillUnmount () {\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  setRef = c => {\n    this.column = c;\n  };\n\n  handleLoadMore = maxId => {\n    const { dispatch, onlyMedia } = this.props;\n\n    dispatch(expandCommunityTimeline({ maxId, onlyMedia }));\n  };\n\n  render () {\n    const { intl, hasUnread, columnId, multiColumn, onlyMedia } = this.props;\n    const pinned = !!columnId;\n\n    return (\n      <Column ref={this.setRef} name='local' bindToDocument={!multiColumn} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='users'\n          active={hasUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n        >\n          <ColumnSettingsContainer columnId={columnId} />\n        </ColumnHeader>\n\n        <DismissableBanner id='community_timeline'>\n          <FormattedMessage id='dismissable_banner.community_timeline' defaultMessage='These are the most recent public posts from people whose accounts are hosted by {domain}.' values={{ domain }} />\n        </DismissableBanner>\n\n        <StatusListContainer\n          trackScroll={!pinned}\n          scrollKey={`community_timeline-${columnId}`}\n          timelineId={`community${onlyMedia ? ':media' : ''}`}\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={<FormattedMessage id='empty_column.community' defaultMessage='The local timeline is empty. Write something publicly to get the ball rolling!' />}\n          bindToDocument={!multiColumn}\n          regex={this.props.regex}\n        />\n\n        <Helmet>\n          <title>{intl.formatMessage(messages.title)}</title>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}