{"version":3,"sources":["webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/list_timeline/index.jsx"],"names":["messages","defineMessages","deleteMessage","deleteConfirm","followed","none","list","ListTimeline","connect","mapStateToProps","state","props","getIn","params","id","hasUnread","_dec","_class","injectIntl","_class2","React","PureComponent","constructor","arguments","handlePin","columnId","dispatch","this","removeColumn","addColumn","context","router","history","push","handleMove","dir","moveColumn","handleHeaderClick","column","scrollTop","setRef","c","handleLoadMore","maxId","expandListTimeline","handleEditClick","openModal","listId","handleDeleteClick","intl","message","formatMessage","confirm","onConfirm","deleteList","handleRepliesPolicyChange","_ref","target","updateList","undefined","value","componentDidMount","fetchList","disconnect","connectListStream","componentWillReceiveProps","nextProps","componentWillUnmount","render","multiColumn","pinned","title","get","replies_policy","_jsx","Column","className","LoadingIndicator","MissingIndicator","createElement","bindToDocument","ref","label","ColumnHeader","icon","active","onPin","onMove","onClick","tabIndex","Icon","FormattedMessage","defaultMessage","role","map","policy","RadioButton","name","checked","onChange","StatusListContainer","trackScroll","scrollKey","timelineId","onLoadMore","emptyMessage","Helmet","content","contextTypes","PropTypes","object"],"mappings":"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","file":"js/flavours/glitch/async/list_timeline-c2c07942d0d944dda194.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { addColumn, removeColumn, moveColumn } from 'flavours/glitch/actions/columns';\nimport { fetchList, deleteList, updateList } from 'flavours/glitch/actions/lists';\nimport { openModal } from 'flavours/glitch/actions/modal';\nimport { connectListStream } from 'flavours/glitch/actions/streaming';\nimport { expandListTimeline } from 'flavours/glitch/actions/timelines';\nimport Column from 'flavours/glitch/components/column';\nimport ColumnBackButton from 'flavours/glitch/components/column_back_button';\nimport ColumnHeader from 'flavours/glitch/components/column_header';\nimport Icon from 'flavours/glitch/components/icon';\nimport LoadingIndicator from 'flavours/glitch/components/loading_indicator';\nimport MissingIndicator from 'flavours/glitch/components/missing_indicator';\nimport RadioButton from 'flavours/glitch/components/radio_button';\nimport StatusListContainer from 'flavours/glitch/features/ui/containers/status_list_container';\n\nconst messages = defineMessages({\n  deleteMessage: { id: 'confirmations.delete_list.message', defaultMessage: 'Are you sure you want to permanently delete this list?' },\n  deleteConfirm: { id: 'confirmations.delete_list.confirm', defaultMessage: 'Delete' },\n  followed:   { id: 'lists.replies_policy.followed', defaultMessage: 'Any followed user' },\n  none:    { id: 'lists.replies_policy.none', defaultMessage: 'No one' },\n  list:  { id: 'lists.replies_policy.list', defaultMessage: 'Members of the list' },\n});\n\nconst mapStateToProps = (state, props) => ({\n  list: state.getIn(['lists', props.params.id]),\n  hasUnread: state.getIn(['timelines', `list:${props.params.id}`, 'unread']) > 0,\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass ListTimeline extends React.PureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    columnId: PropTypes.string,\n    hasUnread: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    list: PropTypes.oneOfType([ImmutablePropTypes.map, PropTypes.bool]),\n    intl: PropTypes.object.isRequired,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('LIST', { id: this.props.params.id }));\n      this.context.router.history.push('/');\n    }\n  };\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  };\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  };\n\n  componentDidMount () {\n    const { dispatch } = this.props;\n    const { id } = this.props.params;\n\n    dispatch(fetchList(id));\n    dispatch(expandListTimeline(id));\n\n    this.disconnect = dispatch(connectListStream(id));\n  }\n\n  componentWillReceiveProps (nextProps) {\n    const { dispatch } = this.props;\n    const { id } = nextProps.params;\n\n    if (id !== this.props.params.id) {\n      if (this.disconnect) {\n        this.disconnect();\n        this.disconnect = null;\n      }\n\n      dispatch(fetchList(id));\n      dispatch(expandListTimeline(id));\n\n      this.disconnect = dispatch(connectListStream(id));\n    }\n  }\n\n  componentWillUnmount () {\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  setRef = c => {\n    this.column = c;\n  };\n\n  handleLoadMore = maxId => {\n    const { id } = this.props.params;\n    this.props.dispatch(expandListTimeline(id, { maxId }));\n  };\n\n  handleEditClick = () => {\n    this.props.dispatch(openModal('LIST_EDITOR', { listId: this.props.params.id }));\n  };\n\n  handleDeleteClick = () => {\n    const { dispatch, columnId, intl } = this.props;\n    const { id } = this.props.params;\n\n    dispatch(openModal('CONFIRM', {\n      message: intl.formatMessage(messages.deleteMessage),\n      confirm: intl.formatMessage(messages.deleteConfirm),\n      onConfirm: () => {\n        dispatch(deleteList(id));\n\n        if (columnId) {\n          dispatch(removeColumn(columnId));\n        } else {\n          this.context.router.history.push('/lists');\n        }\n      },\n    }));\n  };\n\n  handleRepliesPolicyChange = ({ target }) => {\n    const { dispatch, list } = this.props;\n    const { id } = this.props.params;\n    this.props.dispatch(updateList(id, undefined, false, target.value));\n  };\n\n  render () {\n    const { hasUnread, columnId, multiColumn, list, intl } = this.props;\n    const { id } = this.props.params;\n    const pinned = !!columnId;\n    const title  = list ? list.get('title') : id;\n    const replies_policy = list ? list.get('replies_policy') : undefined;\n\n    if (typeof list === 'undefined') {\n      return (\n        <Column>\n          <div className='scrollable'>\n            <LoadingIndicator />\n          </div>\n        </Column>\n      );\n    } else if (list === false) {\n      return (\n        <Column>\n          <div className='scrollable'>\n            <MissingIndicator />\n          </div>\n        </Column>\n      );\n    }\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={title}>\n        <ColumnHeader\n          icon='list-ul'\n          active={hasUnread}\n          title={title}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n        >\n          <div className='column-settings__row column-header__links'>\n            <button className='text-btn column-header__setting-btn' tabIndex='0' onClick={this.handleEditClick}>\n              <Icon id='pencil' /> <FormattedMessage id='lists.edit' defaultMessage='Edit list' />\n            </button>\n\n            <button className='text-btn column-header__setting-btn' tabIndex='0' onClick={this.handleDeleteClick}>\n              <Icon id='trash' /> <FormattedMessage id='lists.delete' defaultMessage='Delete list' />\n            </button>\n          </div>\n\n          { replies_policy !== undefined && (\n            <div role='group' aria-labelledby={`list-${id}-replies-policy`}>\n              <span id={`list-${id}-replies-policy`} className='column-settings__section'>\n                <FormattedMessage id='lists.replies_policy.title' defaultMessage='Show replies to:' />\n              </span>\n              <div className='column-settings__row'>\n                { ['none', 'list', 'followed'].map(policy => (\n                  <RadioButton name='order' key={policy} value={policy} label={intl.formatMessage(messages[policy])} checked={replies_policy === policy} onChange={this.handleRepliesPolicyChange} />\n                ))}\n              </div>\n            </div>\n          )}\n\n          <hr />\n        </ColumnHeader>\n\n        <StatusListContainer\n          trackScroll={!pinned}\n          scrollKey={`list_timeline-${columnId}`}\n          timelineId={`list:${id}`}\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={<FormattedMessage id='empty_column.list' defaultMessage='There is nothing in this list yet.' />}\n          bindToDocument={!multiColumn}\n        />\n\n        <Helmet>\n          <title>{title}</title>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}