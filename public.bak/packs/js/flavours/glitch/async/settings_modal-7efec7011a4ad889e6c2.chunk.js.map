{"version":3,"sources":["webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/local_settings/page/item/index.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/local_settings/page/deprecated_item/index.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/local_settings/page/index.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/local_settings/navigation/item/index.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/local_settings/navigation/index.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/local_settings/index.jsx"],"names":["LocalSettingsPageItem","React","PureComponent","constructor","arguments","handleChange","e","target","item","onChange","options","placeholder","this","props","length","value","checked","render","settings","id","inputProps","children","dependsOn","dependsOnNot","disabled","enabled","i","getIn","currentValue","optionElems","map","opt","optionId","_jsx","htmlFor","createElement","_extends","type","name","key","onBlur","message","hint","className","messages","defineMessages","layout_auto","layout_auto_hint","layout_desktop","layout_desktop_hint","layout_mobile","layout_mobile_hint","side_arm_none","side_arm_keep","side_arm_copy","side_arm_restrict","regexp","rewrite_mentions_no","rewrite_mentions_acct","rewrite_mentions_username","pop_in_left","pop_in_right","LocalSettingsPage","injectIntl","_class","pages","_ref","intl","FormattedMessage","defaultMessage","formatMessage","_ref2","_ref3","DeprecatedLocalSettingsPageItem","expandSpoilers","values","settings_page_link","href","preferenceLink","_ref4","min","max","_ref5","index","CurrentPage","handleClick","onNavigate","preventDefault","active","icon","textIcon","title","finalClassName","classNames","iconElem","Icon","fixedWidth","onClick","role","tabIndex","general","compose","content_warnings","collapsed","media","preferences","close","LocalSettingsNavigation","onClose","LocalSettingsNavigationItem","preferencesLink","LocalSettings","state","currentIndex","navigateTo","setState","connect","get","dispatch","setting","changeLocalSetting","closeModal"],"mappings":"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","file":"js/flavours/glitch/async/settings_modal-7efec7011a4ad889e6c2.chunk.js","sourcesContent":["//  Package imports\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\n\n//  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\nexport default class LocalSettingsPageItem extends React.PureComponent {\n\n  static propTypes = {\n    children: PropTypes.node.isRequired,\n    dependsOn: PropTypes.array,\n    dependsOnNot: PropTypes.array,\n    id: PropTypes.string.isRequired,\n    item: PropTypes.array.isRequired,\n    onChange: PropTypes.func.isRequired,\n    inputProps: PropTypes.object,\n    options: PropTypes.arrayOf(PropTypes.shape({\n      value: PropTypes.string.isRequired,\n      message: PropTypes.string.isRequired,\n      hint: PropTypes.string,\n    })),\n    settings: ImmutablePropTypes.map.isRequired,\n    placeholder: PropTypes.string,\n    disabled: PropTypes.bool,\n  };\n\n  handleChange = e => {\n    const { target } = e;\n    const { item, onChange, options, placeholder } = this.props;\n\n    if (options && options.length > 0) onChange(item, target.value);\n    else if (placeholder) onChange(item, target.value);\n    else onChange(item, target.checked);\n  };\n\n  render () {\n    const { handleChange } = this;\n    const { settings, item, id, inputProps, options, children, dependsOn, dependsOnNot, placeholder, disabled } = this.props;\n    let enabled = !disabled;\n\n    if (dependsOn) {\n      for (let i = 0; i < dependsOn.length; i++) {\n        enabled = enabled && settings.getIn(dependsOn[i]);\n      }\n    }\n    if (dependsOnNot) {\n      for (let i = 0; i < dependsOnNot.length; i++) {\n        enabled = enabled && !settings.getIn(dependsOnNot[i]);\n      }\n    }\n\n    if (options && options.length > 0) {\n      const currentValue = settings.getIn(item);\n      const optionElems = options && options.length > 0 && options.map((opt) => {\n        let optionId = `${id}--${opt.value}`;\n        return (\n          <label htmlFor={optionId}>\n            <input\n              type='radio'\n              name={id}\n              id={optionId}\n              key={optionId}\n              value={opt.value}\n              onBlur={handleChange}\n              onChange={handleChange}\n              checked={currentValue === opt.value}\n              disabled={!enabled}\n              {...inputProps}\n            />\n            {opt.message}\n            {opt.hint && <span className='hint'>{opt.hint}</span>}\n          </label>\n        );\n      });\n      return (\n        <div className='glitch local-settings__page__item radio_buttons'>\n          <fieldset>\n            <legend>{children}</legend>\n            {optionElems}\n          </fieldset>\n        </div>\n      );\n    } else if (placeholder) {\n      return (\n        <div className='glitch local-settings__page__item string'>\n          <label htmlFor={id}>\n            <p>{children}</p>\n            <p>\n              <input\n                id={id}\n                type='text'\n                value={settings.getIn(item)}\n                placeholder={placeholder}\n                onChange={handleChange}\n                disabled={!enabled}\n                {...inputProps}\n              />\n            </p>\n          </label>\n        </div>\n      );\n    } else return (\n      <div className='glitch local-settings__page__item boolean'>\n        <label htmlFor={id}>\n          <input\n            id={id}\n            type='checkbox'\n            checked={settings.getIn(item)}\n            onChange={handleChange}\n            disabled={!enabled}\n            {...inputProps}\n          />\n          {children}\n        </label>\n      </div>\n    );\n  }\n\n}\n","//  Package imports\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n//  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\nexport default class LocalSettingsPageItem extends React.PureComponent {\n\n  static propTypes = {\n    children: PropTypes.node.isRequired,\n    id: PropTypes.string.isRequired,\n    options: PropTypes.arrayOf(PropTypes.shape({\n      value: PropTypes.string.isRequired,\n      message: PropTypes.string.isRequired,\n      hint: PropTypes.string,\n    })),\n    value: PropTypes.any,\n    placeholder: PropTypes.string,\n  };\n\n  render () {\n    const { id, options, children, placeholder, value } = this.props;\n\n    if (options && options.length > 0) {\n      const currentValue = value;\n      const optionElems = options && options.length > 0 && options.map((opt) => {\n        let optionId = `${id}--${opt.value}`;\n        return (\n          <label htmlFor={optionId}>\n            <input\n              type='radio'\n              name={id}\n              id={optionId}\n              value={opt.value}\n              checked={currentValue === opt.value}\n              disabled\n            />\n            {opt.message}\n            {opt.hint && <span className='hint'>{opt.hint}</span>}\n          </label>\n        );\n      });\n      return (\n        <div className='glitch local-settings__page__item radio_buttons'>\n          <fieldset>\n            <legend>{children}</legend>\n            {optionElems}\n          </fieldset>\n        </div>\n      );\n    } else if (placeholder) {\n      return (\n        <div className='glitch local-settings__page__item string'>\n          <label htmlFor={id}>\n            <p>{children}</p>\n            <p>\n              <input\n                id={id}\n                type='text'\n                value={value}\n                placeholder={placeholder}\n                disabled\n              />\n            </p>\n          </label>\n        </div>\n      );\n    } else return (\n      <div className='glitch local-settings__page__item boolean'>\n        <label htmlFor={id}>\n          <input\n            id={id}\n            type='checkbox'\n            checked={value}\n            disabled\n          />\n          {children}\n        </label>\n      </div>\n    );\n  }\n\n}\n","//  Package imports\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\n\n//  Our imports\nimport { expandSpoilers } from 'flavours/glitch/initial_state';\nimport { preferenceLink } from 'flavours/glitch/utils/backend_links';\nimport LocalSettingsPageItem from './item';\nimport DeprecatedLocalSettingsPageItem from './deprecated_item';\n\n//  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\nconst messages = defineMessages({\n  layout_auto: {  id: 'layout.auto', defaultMessage: 'Auto' },\n  layout_auto_hint: {  id: 'layout.hint.auto', defaultMessage: 'Automatically chose layout based on “Enable advanced web interface” setting and screen size.' },\n  layout_desktop: { id: 'layout.desktop', defaultMessage: 'Desktop' },\n  layout_desktop_hint: { id: 'layout.hint.desktop', defaultMessage: 'Use multiple-column layout regardless of the “Enable advanced web interface” setting or screen size.' },\n  layout_mobile: { id: 'layout.single', defaultMessage: 'Mobile' },\n  layout_mobile_hint: { id: 'layout.hint.single', defaultMessage: 'Use single-column layout regardless of the “Enable advanced web interface” setting or screen size.' },\n  side_arm_none: { id: 'settings.side_arm.none', defaultMessage: 'None' },\n  side_arm_keep: { id: 'settings.side_arm_reply_mode.keep', defaultMessage: 'Keep its set privacy' },\n  side_arm_copy: { id: 'settings.side_arm_reply_mode.copy', defaultMessage: 'Copy privacy setting of the toot being replied to' },\n  side_arm_restrict: { id: 'settings.side_arm_reply_mode.restrict', defaultMessage: 'Restrict privacy setting to that of the toot being replied to' },\n  regexp: { id: 'settings.content_warnings.regexp', defaultMessage: 'Regular expression' },\n  rewrite_mentions_no: { id: 'settings.rewrite_mentions_no', defaultMessage: 'Do not rewrite mentions' },\n  rewrite_mentions_acct: { id: 'settings.rewrite_mentions_acct', defaultMessage: 'Rewrite with username and domain (when the account is remote)' },\n  rewrite_mentions_username: { id: 'settings.rewrite_mentions_username', defaultMessage:  'Rewrite with username' },\n  pop_in_left: { id: 'settings.pop_in_left', defaultMessage: 'Left' },\n  pop_in_right: { id: 'settings.pop_in_right', defaultMessage:  'Right' },\n});\n\nexport default @injectIntl\nclass LocalSettingsPage extends React.PureComponent {\n\n  static propTypes = {\n    index    : PropTypes.number,\n    intl     : PropTypes.object.isRequired,\n    onChange : PropTypes.func.isRequired,\n    settings : ImmutablePropTypes.map.isRequired,\n  };\n\n  pages = [\n    ({ intl, onChange, settings }) => (\n      <div className='glitch local-settings__page general'>\n        <h1><FormattedMessage id='settings.general' defaultMessage='General' /></h1>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['show_reply_count']}\n          id='mastodon-settings--reply-count'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.show_reply_counter' defaultMessage='Display an estimate of the reply count' />\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['zoom_emojis_on_hover']}\n          id='mastodon-settings--zoom-on-hover'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.zoom_emojis_on_hover' defaultMessage='Zoom in on emojis when hovering over them' />\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['hicolor_privacy_icons']}\n          id='mastodon-settings--hicolor_privacy_icons'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.hicolor_privacy_icons' defaultMessage='High color privacy icons' />\n          <span className='hint'><FormattedMessage id='settings.hicolor_privacy_icons.hint' defaultMessage='Display privacy icons in bright and easily distinguishable colors' /></span>\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['confirm_boost_missing_media_description']}\n          id='mastodon-settings--confirm_boost_missing_media_description'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.confirm_boost_missing_media_description' defaultMessage='Show confirmation dialog before boosting toots lacking media descriptions' />\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['tag_misleading_links']}\n          id='mastodon-settings--tag_misleading_links'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.tag_misleading_links' defaultMessage='Tag misleading links' />\n          <span className='hint'><FormattedMessage id='settings.tag_misleading_links.hint' defaultMessage='Add a visual indication with the link target host to every link not mentioning it explicitly' /></span>\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['rewrite_mentions']}\n          id='mastodon-settings--rewrite_mentions'\n          options={[\n            { value: 'no', message: intl.formatMessage(messages.rewrite_mentions_no) },\n            { value: 'acct', message: intl.formatMessage(messages.rewrite_mentions_acct) },\n            { value: 'username', message: intl.formatMessage(messages.rewrite_mentions_username) },\n          ]}\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.rewrite_mentions' defaultMessage='Rewrite mentions in displayed statuses' />\n        </LocalSettingsPageItem>\n        <section>\n          <h2><FormattedMessage id='settings.notifications_opts' defaultMessage='Notifications options' /></h2>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['notifications', 'tab_badge']}\n            id='mastodon-settings--notifications-tab_badge'\n            onChange={onChange}\n          >\n            <FormattedMessage id='settings.notifications.tab_badge' defaultMessage='Unread notifications badge' />\n            <span className='hint'><FormattedMessage id='settings.notifications.tab_badge.hint' defaultMessage=\"Display a badge for unread notifications in the column icons when the notifications column isn't open\" /></span>\n          </LocalSettingsPageItem>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['notifications', 'favicon_badge']}\n            id='mastodon-settings--notifications-favicon_badge'\n            onChange={onChange}\n          >\n            <FormattedMessage id='settings.notifications.favicon_badge' defaultMessage='Unread notifications favicon badge' />\n            <span className='hint'><FormattedMessage id='settings.notifications.favicon_badge.hint' defaultMessage='Add a badge for unread notifications to the favicon' /></span>\n          </LocalSettingsPageItem>\n        </section>\n\n        <section>\n          <h2><FormattedMessage id='settings.status_icons' defaultMessage='Toot icons' /></h2>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['status_icons', 'language']}\n            id='mastodon-settings--status-icons-language'\n            onChange={onChange}\n          >\n            <FormattedMessage id='settings.status_icons_language' defaultMessage='Language indicator' />\n          </LocalSettingsPageItem>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['status_icons', 'reply']}\n            id='mastodon-settings--status-icons-reply'\n            onChange={onChange}\n          >\n            <FormattedMessage id='settings.status_icons_reply' defaultMessage='Reply indicator' />\n          </LocalSettingsPageItem>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['status_icons', 'local_only']}\n            id='mastodon-settings--status-icons-local_only'\n            onChange={onChange}\n          >\n            <FormattedMessage id='settings.status_icons_local_only' defaultMessage='Local-only indicator' />\n          </LocalSettingsPageItem>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['status_icons', 'media']}\n            id='mastodon-settings--status-icons-media'\n            onChange={onChange}\n          >\n            <FormattedMessage id='settings.status_icons_media' defaultMessage='Media and poll indicators' />\n          </LocalSettingsPageItem>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['status_icons', 'visibility']}\n            id='mastodon-settings--status-icons-visibility'\n            onChange={onChange}\n          >\n            <FormattedMessage id='settings.status_icons_visibility' defaultMessage='Toot privacy indicator' />\n          </LocalSettingsPageItem>\n        </section>\n        <section>\n          <h2><FormattedMessage id='settings.layout_opts' defaultMessage='Layout options' /></h2>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['layout']}\n            id='mastodon-settings--layout'\n            options={[\n              { value: 'auto', message: intl.formatMessage(messages.layout_auto), hint: intl.formatMessage(messages.layout_auto_hint) },\n              { value: 'multiple', message: intl.formatMessage(messages.layout_desktop), hint: intl.formatMessage(messages.layout_desktop_hint) },\n              { value: 'single', message: intl.formatMessage(messages.layout_mobile), hint: intl.formatMessage(messages.layout_mobile_hint) },\n            ]}\n            onChange={onChange}\n          >\n            <FormattedMessage id='settings.layout' defaultMessage='Layout:' />\n          </LocalSettingsPageItem>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['stretch']}\n            id='mastodon-settings--stretch'\n            onChange={onChange}\n          >\n            <FormattedMessage id='settings.wide_view' defaultMessage='Wide view (Desktop mode only)' />\n            <span className='hint'><FormattedMessage id='settings.wide_view_hint' defaultMessage='Stretches columns to better fill the available space.' /></span>\n          </LocalSettingsPageItem>\n        </section>\n      </div>\n    ),\n    ({ intl, onChange, settings }) => (\n      <div className='glitch local-settings__page compose_box_opts'>\n        <h1><FormattedMessage id='settings.compose_box_opts' defaultMessage='Compose box' /></h1>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['always_show_spoilers_field']}\n          id='mastodon-settings--always_show_spoilers_field'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.always_show_spoilers_field' defaultMessage='Always enable the Content Warning field' />\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['prepend_cw_re']}\n          id='mastodon-settings--prepend_cw_re'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.prepend_cw_re' defaultMessage='Prepend “re: ” to content warnings when replying' />\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['preselect_on_reply']}\n          id='mastodon-settings--preselect_on_reply'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.preselect_on_reply' defaultMessage='Pre-select usernames on reply' />\n          <span className='hint'><FormattedMessage id='settings.preselect_on_reply_hint' defaultMessage='When replying to a conversation with multiple participants, pre-select usernames past the first' /></span>\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['confirm_missing_media_description']}\n          id='mastodon-settings--confirm_missing_media_description'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.confirm_missing_media_description' defaultMessage='Show confirmation dialog before sending toots lacking media descriptions' />\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['confirm_before_clearing_draft']}\n          id='mastodon-settings--confirm_before_clearing_draft'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.confirm_before_clearing_draft' defaultMessage='Show confirmation dialog before overwriting the message being composed' />\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['show_content_type_choice']}\n          id='mastodon-settings--show_content_type_choice'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.show_content_type_choice' defaultMessage='Show content-type choice when authoring toots' />\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['side_arm']}\n          id='mastodon-settings--side_arm'\n          options={[\n            { value: 'none', message: intl.formatMessage(messages.side_arm_none) },\n            { value: 'direct', message: intl.formatMessage({ id: 'privacy.direct.short' }) },\n            { value: 'private', message: intl.formatMessage({ id: 'privacy.private.short' }) },\n            { value: 'unlisted', message: intl.formatMessage({ id: 'privacy.unlisted.short' }) },\n            { value: 'public', message: intl.formatMessage({ id: 'privacy.public.short' }) },\n          ]}\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.side_arm' defaultMessage='Secondary toot button:' />\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['side_arm_reply_mode']}\n          id='mastodon-settings--side_arm_reply_mode'\n          options={[\n            { value: 'keep', message: intl.formatMessage(messages.side_arm_keep) },\n            { value: 'copy', message: intl.formatMessage(messages.side_arm_copy) },\n            { value: 'restrict', message: intl.formatMessage(messages.side_arm_restrict) },\n          ]}\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.side_arm_reply_mode' defaultMessage='When replying to a toot, the secondary toot button should:' />\n        </LocalSettingsPageItem>\n      </div>\n    ),\n    ({ intl, onChange, settings }) => (\n      <div className='glitch local-settings__page content_warnings'>\n        <h1><FormattedMessage id='settings.content_warnings' defaultMessage='Content warnings' /></h1>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['content_warnings', 'shared_state']}\n          id='mastodon-settings--content_warnings-shared_state'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.content_warnings_shared_state' defaultMessage='Show/hide content of all copies at once' />\n          <span className='hint'><FormattedMessage id='settings.content_warnings_shared_state_hint' defaultMessage='Reproduce upstream Mastodon behavior by having the Content Warning button affect all copies of a post at once. This will prevent automatic collapsing of any copy of a toot with unfolded CW' /></span>\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['content_warnings', 'media_outside']}\n          id='mastodon-settings--content_warnings-media_outside'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.content_warnings_media_outside' defaultMessage='Display media attachments outside content warnings' />\n          <span className='hint'><FormattedMessage id='settings.content_warnings_media_outside_hint' defaultMessage='Reproduce upstream Mastodon behavior by having the Content Warning toggle not affect media attachments' /></span>\n        </LocalSettingsPageItem>\n        <section>\n          <h2><FormattedMessage id='settings.content_warnings_unfold_opts' defaultMessage='Auto-unfolding options' /></h2>\n          <DeprecatedLocalSettingsPageItem\n            id='mastodon-settings--content_warnings-auto_unfold'\n            value={expandSpoilers}\n          >\n            <FormattedMessage id='settings.enable_content_warnings_auto_unfold' defaultMessage='Automatically unfold content-warnings' />\n            <span className='hint'>\n              <FormattedMessage\n                id='settings.deprecated_setting'\n                defaultMessage=\"This setting is now controlled from Mastodon's {settings_page_link}\"\n                values={{\n                  settings_page_link: (\n                    <a href={preferenceLink('user_setting_expand_spoilers')}>\n                      <FormattedMessage\n                        id='settings.shared_settings_link'\n                        defaultMessage='user preferences'\n                      />\n                    </a>\n                  ),\n                }}\n              />\n            </span>\n          </DeprecatedLocalSettingsPageItem>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['content_warnings', 'filter']}\n            id='mastodon-settings--content_warnings-auto_unfold'\n            onChange={onChange}\n            placeholder={intl.formatMessage(messages.regexp)}\n            disabled={!expandSpoilers}\n          >\n            <FormattedMessage id='settings.content_warnings_filter' defaultMessage='Content warnings to not automatically unfold:' />\n          </LocalSettingsPageItem>\n        </section>\n      </div>\n    ),\n    ({ onChange, settings }) => (\n      <div className='glitch local-settings__page collapsed'>\n        <h1><FormattedMessage id='settings.collapsed_statuses' defaultMessage='Collapsed toots' /></h1>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['collapsed', 'enabled']}\n          id='mastodon-settings--collapsed-enabled'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.enable_collapsed' defaultMessage='Enable collapsed toots' />\n          <span className='hint'><FormattedMessage id='settings.enable_collapsed_hint' defaultMessage='Collapsed posts have parts of their contents hidden to take up less screen space. This is distinct from the Content Warning feature' /></span>\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['collapsed', 'show_action_bar']}\n          id='mastodon-settings--collapsed-show-action-bar'\n          onChange={onChange}\n          dependsOn={[['collapsed', 'enabled']]}\n        >\n          <FormattedMessage id='settings.show_action_bar' defaultMessage='Show action buttons in collapsed toots' />\n        </LocalSettingsPageItem>\n        <section>\n          <h2><FormattedMessage id='settings.auto_collapse' defaultMessage='Automatic collapsing' /></h2>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['collapsed', 'auto', 'all']}\n            id='mastodon-settings--collapsed-auto-all'\n            onChange={onChange}\n            dependsOn={[['collapsed', 'enabled']]}\n          >\n            <FormattedMessage id='settings.auto_collapse_all' defaultMessage='Everything' />\n          </LocalSettingsPageItem>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['collapsed', 'auto', 'notifications']}\n            id='mastodon-settings--collapsed-auto-notifications'\n            onChange={onChange}\n            dependsOn={[['collapsed', 'enabled']]}\n            dependsOnNot={[['collapsed', 'auto', 'all']]}\n          >\n            <FormattedMessage id='settings.auto_collapse_notifications' defaultMessage='Notifications' />\n          </LocalSettingsPageItem>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['collapsed', 'auto', 'lengthy']}\n            id='mastodon-settings--collapsed-auto-lengthy'\n            onChange={onChange}\n            dependsOn={[['collapsed', 'enabled']]}\n            dependsOnNot={[['collapsed', 'auto', 'all']]}\n          >\n            <FormattedMessage id='settings.auto_collapse_lengthy' defaultMessage='Lengthy toots' />\n          </LocalSettingsPageItem>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['collapsed', 'auto', 'reblogs']}\n            id='mastodon-settings--collapsed-auto-reblogs'\n            onChange={onChange}\n            dependsOn={[['collapsed', 'enabled']]}\n            dependsOnNot={[['collapsed', 'auto', 'all']]}\n          >\n            <FormattedMessage id='settings.auto_collapse_reblogs' defaultMessage='Boosts' />\n          </LocalSettingsPageItem>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['collapsed', 'auto', 'replies']}\n            id='mastodon-settings--collapsed-auto-replies'\n            onChange={onChange}\n            dependsOn={[['collapsed', 'enabled']]}\n            dependsOnNot={[['collapsed', 'auto', 'all']]}\n          >\n            <FormattedMessage id='settings.auto_collapse_replies' defaultMessage='Replies' />\n          </LocalSettingsPageItem>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['collapsed', 'auto', 'media']}\n            id='mastodon-settings--collapsed-auto-media'\n            onChange={onChange}\n            dependsOn={[['collapsed', 'enabled']]}\n            dependsOnNot={[['collapsed', 'auto', 'all']]}\n          >\n            <FormattedMessage id='settings.auto_collapse_media' defaultMessage='Toots with media' />\n          </LocalSettingsPageItem>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['collapsed', 'auto', 'height']}\n            id='mastodon-settings--collapsed-auto-height'\n            placeholder='500'\n            onChange={onChange}\n            dependsOn={[['collapsed', 'enabled']]}\n            dependsOnNot={[['collapsed', 'auto', 'all']]}\n            inputProps={{ type: 'number', min: '200', max: '999' }}\n          >\n            <FormattedMessage id='settings.auto_collapse_height' defaultMessage='Height (in pixels) for a toot to be considered lengthy' />\n          </LocalSettingsPageItem>\n        </section>\n        <section>\n          <h2><FormattedMessage id='settings.image_backgrounds' defaultMessage='Image backgrounds' /></h2>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['collapsed', 'backgrounds', 'user_backgrounds']}\n            id='mastodon-settings--collapsed-user-backgrouns'\n            onChange={onChange}\n            dependsOn={[['collapsed', 'enabled']]}\n          >\n            <FormattedMessage id='settings.image_backgrounds_users' defaultMessage='Give collapsed toots an image background' />\n          </LocalSettingsPageItem>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['collapsed', 'backgrounds', 'preview_images']}\n            id='mastodon-settings--collapsed-preview-images'\n            onChange={onChange}\n            dependsOn={[['collapsed', 'enabled']]}\n          >\n            <FormattedMessage id='settings.image_backgrounds_media' defaultMessage='Preview collapsed toot media' />\n            <span className='hint'><FormattedMessage id='settings.image_backgrounds_media_hint' defaultMessage='If the post has any media attachment, use the first one as a background' /></span>\n          </LocalSettingsPageItem>\n        </section>\n      </div>\n    ),\n    ({ intl, onChange, settings }) => (\n      <div className='glitch local-settings__page media'>\n        <h1><FormattedMessage id='settings.media' defaultMessage='Media' /></h1>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['media', 'letterbox']}\n          id='mastodon-settings--media-letterbox'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.media_letterbox' defaultMessage='Letterbox media' />\n          <span className='hint'><FormattedMessage id='settings.media_letterbox_hint' defaultMessage='Scale down and letterbox media to fill the image containers instead of stretching and cropping them' /></span>\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['media', 'fullwidth']}\n          id='mastodon-settings--media-fullwidth'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.media_fullwidth' defaultMessage='Full-width media previews' />\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['inline_preview_cards']}\n          id='mastodon-settings--inline-preview-cards'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.inline_preview_cards' defaultMessage='Inline preview cards for external links' />\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['media', 'reveal_behind_cw']}\n          id='mastodon-settings--reveal-behind-cw'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.media_reveal_behind_cw' defaultMessage='Reveal sensitive media behind a CW by default' />\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['media', 'pop_in_player']}\n          id='mastodon-settings--pop-in-player'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.pop_in_player' defaultMessage='Enable pop-in player' />\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['media', 'pop_in_position']}\n          id='mastodon-settings--pop-in-position'\n          options={[\n            { value: 'left', message: intl.formatMessage(messages.pop_in_left) },\n            { value: 'right', message: intl.formatMessage(messages.pop_in_right) },\n          ]}\n          onChange={onChange}\n          dependsOn={[['media', 'pop_in_player']]}\n        >\n          <FormattedMessage id='settings.pop_in_position' defaultMessage='Pop-in player position:' />\n        </LocalSettingsPageItem>\n      </div>\n    ),\n  ];\n\n  render () {\n    const { pages } = this;\n    const { index, intl, onChange, settings } = this.props;\n    const CurrentPage = pages[index] || pages[0];\n\n    return <CurrentPage intl={intl} onChange={onChange} settings={settings} />;\n  }\n\n}\n","//  Package imports\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport Icon from 'flavours/glitch/components/icon';\n\n//  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\nexport default class LocalSettingsPage extends React.PureComponent {\n\n  static propTypes = {\n    active: PropTypes.bool,\n    className: PropTypes.string,\n    href: PropTypes.string,\n    icon: PropTypes.string,\n    textIcon: PropTypes.string,\n    index: PropTypes.number.isRequired,\n    onNavigate: PropTypes.func,\n    title: PropTypes.string,\n  };\n\n  handleClick = (e) => {\n    const { index, onNavigate } = this.props;\n    if (onNavigate) {\n      onNavigate(index);\n      e.preventDefault();\n    }\n  };\n\n  render () {\n    const { handleClick } = this;\n    const {\n      active,\n      className,\n      href,\n      icon,\n      textIcon,\n      onNavigate,\n      title,\n    } = this.props;\n\n    const finalClassName = classNames('glitch', 'local-settings__navigation__item', {\n      active,\n    }, className);\n\n    const iconElem = icon ? <Icon fixedWidth id={icon} /> : (textIcon ? <span className='text-icon-button'>{textIcon}</span> : null);\n\n    if (href) return (\n      <a\n        href={href}\n        className={finalClassName}\n        title={title}\n        aria-label={title}\n      >\n        {iconElem} <span>{title}</span>\n      </a>\n    );\n    else if (onNavigate) return (\n      <a\n        onClick={handleClick}\n        role='button'\n        tabIndex='0'\n        className={finalClassName}\n        title={title}\n        aria-label={title}\n      >\n        {iconElem} <span>{title}</span>\n      </a>\n    );\n    else return null;\n  }\n\n}\n","//  Package imports\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl, defineMessages } from 'react-intl';\n\n//  Our imports\nimport LocalSettingsNavigationItem from './item';\nimport { preferencesLink } from 'flavours/glitch/utils/backend_links';\n\n//  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\nconst messages = defineMessages({\n  general: {  id: 'settings.general', defaultMessage: 'General' },\n  compose: {  id: 'settings.compose_box_opts', defaultMessage: 'Compose box' },\n  content_warnings: { id: 'settings.content_warnings', defaultMessage: 'Content Warnings' },\n  collapsed: { id: 'settings.collapsed_statuses', defaultMessage: 'Collapsed toots' },\n  media: { id: 'settings.media', defaultMessage: 'Media' },\n  preferences: { id: 'settings.preferences', defaultMessage: 'Preferences' },\n  close: { id: 'settings.close', defaultMessage: 'Close' },\n});\n\nexport default @injectIntl\nclass LocalSettingsNavigation extends React.PureComponent {\n\n  static propTypes = {\n    index      : PropTypes.number,\n    intl       : PropTypes.object.isRequired,\n    onClose    : PropTypes.func.isRequired,\n    onNavigate : PropTypes.func.isRequired,\n  };\n\n  render () {\n\n    const { index, intl, onClose, onNavigate } = this.props;\n\n    return (\n      <nav className='glitch local-settings__navigation'>\n        <LocalSettingsNavigationItem\n          active={index === 0}\n          index={0}\n          onNavigate={onNavigate}\n          icon='cogs'\n          title={intl.formatMessage(messages.general)}\n        />\n        <LocalSettingsNavigationItem\n          active={index === 1}\n          index={1}\n          onNavigate={onNavigate}\n          icon='pencil'\n          title={intl.formatMessage(messages.compose)}\n        />\n        <LocalSettingsNavigationItem\n          active={index === 2}\n          index={2}\n          onNavigate={onNavigate}\n          textIcon='CW'\n          title={intl.formatMessage(messages.content_warnings)}\n        />\n        <LocalSettingsNavigationItem\n          active={index === 3}\n          index={3}\n          onNavigate={onNavigate}\n          icon='angle-double-up'\n          title={intl.formatMessage(messages.collapsed)}\n        />\n        <LocalSettingsNavigationItem\n          active={index === 4}\n          index={4}\n          onNavigate={onNavigate}\n          icon='image'\n          title={intl.formatMessage(messages.media)}\n        />\n        <LocalSettingsNavigationItem\n          active={index === 5}\n          href={preferencesLink}\n          index={5}\n          icon='cog'\n          title={intl.formatMessage(messages.preferences)}\n        />\n        <LocalSettingsNavigationItem\n          active={index === 6}\n          className='close'\n          index={6}\n          onNavigate={onClose}\n          icon='times'\n          title={intl.formatMessage(messages.close)}\n        />\n      </nav>\n    );\n  }\n\n}\n","//  Package imports.\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\n\n//  Our imports\nimport LocalSettingsPage from './page';\nimport LocalSettingsNavigation from './navigation';\nimport { closeModal } from 'flavours/glitch/actions/modal';\nimport { changeLocalSetting } from 'flavours/glitch/actions/local_settings';\n\nconst mapStateToProps = state => ({\n  settings: state.get('local_settings'),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange (setting, value) {\n    dispatch(changeLocalSetting(setting, value));\n  },\n  onClose () {\n    dispatch(closeModal());\n  },\n});\n\nclass LocalSettings extends React.PureComponent {\n\n  static propTypes = {\n    onChange: PropTypes.func.isRequired,\n    onClose: PropTypes.func.isRequired,\n    settings: ImmutablePropTypes.map.isRequired,\n  };\n\n  state = {\n    currentIndex: 0,\n  };\n\n  navigateTo = (index) =>\n    this.setState({ currentIndex: +index });\n\n  render () {\n\n    const { navigateTo } = this;\n    const { onChange, onClose, settings } = this.props;\n    const { currentIndex } = this.state;\n\n    return (\n      <div className='glitch modal-root__modal local-settings'>\n        <LocalSettingsNavigation\n          index={currentIndex}\n          onClose={onClose}\n          onNavigate={navigateTo}\n        />\n        <LocalSettingsPage\n          index={currentIndex}\n          onChange={onChange}\n          settings={settings}\n        />\n      </div>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LocalSettings);\n"],"sourceRoot":""}