{"version":3,"sources":["webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/reblogs/index.jsx"],"names":["messages","defineMessages","heading","refresh","Reblogs","connect","mapStateToProps","state","props","accountIds","getIn","params","statusId","_dec","_class","injectIntl","_class2","ImmutablePureComponent","constructor","arguments","handleHeaderClick","this","column","scrollTop","setRef","c","handleRefresh","dispatch","fetchReblogs","componentWillMount","componentWillReceiveProps","nextProps","render","intl","multiColumn","_jsx","Column","LoadingIndicator","emptyMessage","FormattedMessage","id","defaultMessage","React","createElement","ref","ColumnHeader","icon","title","formatMessage","onClick","showBackButton","extraButton","className","Icon","ScrollableList","scrollKey","bindToDocument","map","AccountContainer","withNote","Helmet","name","content","propTypes","PropTypes","object","isRequired","func","ImmutablePropTypes","list","bool"],"mappings":"4SAeA,MAAMA,EAAWC,YAAe,CAC9BC,QAAQ,CAAD,sDACPC,QAAQ,CAAD,yCAKN,IAIGC,EAFUC,mBAJQC,CAACC,EAAOC,KAAK,CACnCC,WAAYF,EAAMG,MAAM,CAAC,aAAc,eAAgBF,EAAMG,OAAOC,cAG9BC,CAAAC,EACvCC,aAAUC,EADI,cAEOC,IAAuBC,cAAA,SAAAC,WAAA,KAsB3CC,kBAAoB,KAClBC,KAAKC,OAAOC,aACZ,KAEFC,OAASC,IACPJ,KAAKC,OAASG,GACd,KAEFC,cAAgB,KACdL,KAAKb,MAAMmB,SAASC,YAAaP,KAAKb,MAAMG,OAAOC,YArBrDiB,qBACOR,KAAKb,MAAMC,YACdY,KAAKb,MAAMmB,SAASC,YAAaP,KAAKb,MAAMG,OAAOC,WAIvDkB,0BAA0BC,GACpBA,EAAUpB,OAAOC,WAAaS,KAAKb,MAAMG,OAAOC,UAAYmB,EAAUpB,OAAOC,UAC/ES,KAAKb,MAAMmB,SAASC,YAAaG,EAAUpB,OAAOC,WAgBtDoB,SACE,MAAM,KAAEC,EAAI,WAAExB,EAAU,YAAEyB,GAAgBb,KAAKb,MAE/C,IAAKC,EACH,OACE0B,YAACC,IAAM,UACLD,YAACE,IAAgB,KAKvB,MAAMC,EAAeH,YAACI,IAAgB,CAACC,GAAG,uBAAuBC,eAAe,iFAEhF,OACEC,IAAAC,cAACP,IAAM,CAACQ,IAAKvB,KAAKG,QAChBW,YAACU,IAAY,CACXC,KAAK,UACLC,MAAOd,EAAKe,cAAchD,EAASE,SACnC+C,QAAS5B,KAAKD,kBACd8B,gBAAc,EACdhB,YAAaA,EACbiB,YACEhB,YAAA,UAAQiB,UAAU,wBAAwBL,MAAOd,EAAKe,cAAchD,EAASG,SAAU,aAAY8B,EAAKe,cAAchD,EAASG,SAAU8C,QAAS5B,KAAKK,oBAAc,EAACS,YAACkB,IAAI,CAACb,GAAG,eAInLL,YAACmB,IAAc,CACbC,UAAU,UACVjB,aAAcA,EACdkB,gBAAiBtB,QAAY,EAE5BzB,EAAWgD,KAAIjB,GACdL,YAACuB,IAAgB,CAAUlB,GAAIA,EAAImB,UAAU,GAAtBnB,MAI3BL,YAACyB,IAAM,UACLzB,YAAA,QAAM0B,KAAK,SAASC,QAAQ,gBAMrC9C,EA3EQ+C,UAAY,CACjBpD,OAAQqD,IAAUC,OAAOC,WACzBvC,SAAUqC,IAAUG,KAAKD,WACzBzD,WAAY2D,IAAmBC,KAC/BnC,YAAa8B,IAAUM,KACvBrC,KAAM+B,IAAUC,OAAOC,YARhBpD,EASRE,KAAAF","file":"js/flavours/glitch/async/reblogs-4f9982bac13b8910890c.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport LoadingIndicator from 'flavours/glitch/components/loading_indicator';\nimport { fetchReblogs } from 'flavours/glitch/actions/interactions';\nimport AccountContainer from 'flavours/glitch/containers/account_container';\nimport Column from 'flavours/glitch/features/ui/components/column';\nimport Icon from 'flavours/glitch/components/icon';\nimport ColumnHeader from 'flavours/glitch/components/column_header';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport ScrollableList from 'flavours/glitch/components/scrollable_list';\nimport { Helmet } from 'react-helmet';\n\nconst messages = defineMessages({\n  heading: { id: 'column.reblogged_by', defaultMessage: 'Boosted by' },\n  refresh: { id: 'refresh', defaultMessage: 'Refresh' },\n});\n\nconst mapStateToProps = (state, props) => ({\n  accountIds: state.getIn(['user_lists', 'reblogged_by', props.params.statusId]),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass Reblogs extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    accountIds: ImmutablePropTypes.list,\n    multiColumn: PropTypes.bool,\n    intl: PropTypes.object.isRequired,\n  };\n\n  componentWillMount () {\n    if (!this.props.accountIds) {\n      this.props.dispatch(fetchReblogs(this.props.params.statusId));\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.params.statusId !== this.props.params.statusId && nextProps.params.statusId) {\n      this.props.dispatch(fetchReblogs(nextProps.params.statusId));\n    }\n  }\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  };\n\n  setRef = c => {\n    this.column = c;\n  };\n\n  handleRefresh = () => {\n    this.props.dispatch(fetchReblogs(this.props.params.statusId));\n  };\n\n  render () {\n    const { intl, accountIds, multiColumn } = this.props;\n\n    if (!accountIds) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    const emptyMessage = <FormattedMessage id='status.reblogs.empty' defaultMessage='No one has boosted this post yet. When someone does, they will show up here.' />;\n\n    return (\n      <Column ref={this.setRef}>\n        <ColumnHeader\n          icon='retweet'\n          title={intl.formatMessage(messages.heading)}\n          onClick={this.handleHeaderClick}\n          showBackButton\n          multiColumn={multiColumn}\n          extraButton={(\n            <button className='column-header__button' title={intl.formatMessage(messages.refresh)} aria-label={intl.formatMessage(messages.refresh)} onClick={this.handleRefresh}><Icon id='refresh' /></button>\n          )}\n        />\n\n        <ScrollableList\n          scrollKey='reblogs'\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n        >\n          {accountIds.map(id =>\n            <AccountContainer key={id} id={id} withNote={false} />,\n          )}\n        </ScrollableList>\n\n        <Helmet>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}