{"version":3,"sources":["webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/blocks/index.jsx"],"names":["messages","defineMessages","heading","Blocks","connect","state","accountIds","getIn","hasMore","isLoading","_dec","_class","injectIntl","_class2","ImmutablePureComponent","constructor","arguments","handleLoadMore","_debounce","this","props","dispatch","expandBlocks","leading","componentWillMount","fetchBlocks","render","intl","multiColumn","_jsx","Column","LoadingIndicator","emptyMessage","FormattedMessage","id","defaultMessage","name","bindToDocument","icon","formatMessage","ColumnBackButtonSlim","ScrollableList","scrollKey","onLoadMore","map","AccountContainer","defaultAction","propTypes","params","PropTypes","object","isRequired","func","ImmutablePropTypes","list","bool"],"mappings":"mSAcA,MAAMA,EAAWC,YAAe,CAC9BC,QAAQ,CAAD,qDAON,IAIGC,EAFUC,mBANQC,IAAK,CAC3BC,WAAYD,EAAME,MAAM,CAAC,aAAc,SAAU,UACjDC,UAAWH,EAAME,MAAM,CAAC,aAAc,SAAU,SAChDE,UAAWJ,EAAME,MAAM,CAAC,aAAc,SAAU,cAAc,MAGxBG,CAAAC,EACvCC,aAAUC,EADI,cAEMC,IAAuBC,cAAA,SAAAC,WAAA,KAgB1CC,eAAiBC,KAAS,KACxBC,KAAKC,MAAMC,SAASC,iBACnB,IAAK,CAAEC,SAAS,IANnBC,qBACEL,KAAKC,MAAMC,SAASI,eAOtBC,SACE,MAAM,KAAEC,EAAI,WAAErB,EAAU,QAAEE,EAAO,YAAEoB,EAAW,UAAEnB,GAAcU,KAAKC,MAEnE,IAAKd,EACH,OACEuB,YAACC,IAAM,UACLD,YAACE,IAAgB,KAKvB,MAAMC,EAAeH,YAACI,IAAgB,CAACC,GAAG,sBAAsBC,eAAe,uCAE/E,OACEN,YAACC,IAAM,CAACM,KAAK,SAASC,gBAAiBT,EAAaU,KAAK,MAAMpC,QAASyB,EAAKY,cAAcvC,EAASE,eAAS,EAC3G2B,YAACW,IAAoB,IACrBX,YAACY,IAAc,CACbC,UAAU,SACVC,WAAYxB,KAAKF,eACjBT,QAASA,EACTC,UAAWA,EACXuB,aAAcA,EACdK,gBAAiBT,QAAY,EAE5BtB,EAAWsC,KAAIV,GACdL,YAACgB,IAAgB,CAAUX,GAAIA,EAAIY,cAAc,SAA1BZ,SAOlCrB,EAlDQkC,UAAY,CACjBC,OAAQC,IAAUC,OAAOC,WACzB9B,SAAU4B,IAAUG,KAAKD,WACzB7C,WAAY+C,IAAmBC,KAC/B9C,QAASyC,IAAUM,KACnB9C,UAAWwC,IAAUM,KACrB5B,KAAMsB,IAAUC,OAAOC,WACvBvB,YAAaqB,IAAUM,MAVhB5C,EAWRE,KAAAF","file":"js/flavours/glitch/async/blocks-14f51a3ad51649f9ce1a.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { debounce } from 'lodash';\nimport PropTypes from 'prop-types';\nimport LoadingIndicator from 'flavours/glitch/components/loading_indicator';\nimport ScrollableList from '../../components/scrollable_list';\nimport Column from 'flavours/glitch/features/ui/components/column';\nimport ColumnBackButtonSlim from 'flavours/glitch/components/column_back_button_slim';\nimport AccountContainer from 'flavours/glitch/containers/account_container';\nimport { fetchBlocks, expandBlocks } from 'flavours/glitch/actions/blocks';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\nconst messages = defineMessages({\n  heading: { id: 'column.blocks', defaultMessage: 'Blocked users' },\n});\n\nconst mapStateToProps = state => ({\n  accountIds: state.getIn(['user_lists', 'blocks', 'items']),\n  hasMore: !!state.getIn(['user_lists', 'blocks', 'next']),\n  isLoading: state.getIn(['user_lists', 'blocks', 'isLoading'], true),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass Blocks extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    accountIds: ImmutablePropTypes.list,\n    hasMore: PropTypes.bool,\n    isLoading: PropTypes.bool,\n    intl: PropTypes.object.isRequired,\n    multiColumn: PropTypes.bool,\n  };\n\n  componentWillMount () {\n    this.props.dispatch(fetchBlocks());\n  }\n\n  handleLoadMore = debounce(() => {\n    this.props.dispatch(expandBlocks());\n  }, 300, { leading: true });\n\n  render () {\n    const { intl, accountIds, hasMore, multiColumn, isLoading } = this.props;\n\n    if (!accountIds) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    const emptyMessage = <FormattedMessage id='empty_column.blocks' defaultMessage=\"You haven't blocked any users yet.\" />;\n\n    return (\n      <Column name='blocks' bindToDocument={!multiColumn} icon='ban' heading={intl.formatMessage(messages.heading)}>\n        <ColumnBackButtonSlim />\n        <ScrollableList\n          scrollKey='blocks'\n          onLoadMore={this.handleLoadMore}\n          hasMore={hasMore}\n          isLoading={isLoading}\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n        >\n          {accountIds.map(id =>\n            <AccountContainer key={id} id={id} defaultAction='block' />,\n          )}\n        </ScrollableList>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}