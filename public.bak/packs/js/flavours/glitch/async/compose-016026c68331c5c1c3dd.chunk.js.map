{"version":3,"sources":["webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/compose/components/search_results.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/compose/containers/search_results_container.js","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/compose/components/header.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/compose/containers/header_container.js","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/compose/index.jsx"],"names":["messages","defineMessages","dismissSuggestion","SearchResults","injectIntl","_class2","ImmutablePureComponent","constructor","arguments","handleLoadMoreAccounts","this","props","expandSearch","handleLoadMoreStatuses","handleLoadMoreHashtags","componentDidMount","searchTerm","fetchSuggestions","componentDidUpdate","render","intl","results","suggestions","accounts","statuses","hashtags","count","isEmpty","get","size","searchEnabled","startsWith","includes","_jsx","className","Icon","id","fixedWidth","FormattedMessage","defaultMessage","map","accountId","AccountContainer","LoadMore","visible","onClick","statusId","StatusContainer","hashtag","Hashtag","values","suggestion","actionIcon","actionTitle","formatMessage","onActionClick","propTypes","ImmutablePropTypes","isRequired","list","PropTypes","func","string","object","_class","connect","state","getIn","dispatch","type","account","community","home_timeline","logout","notifications","public","settings","start","Header","handleLogoutClick","e","preventDefault","stopPropagation","onLogout","columns","unreadNotifications","showNotificationsBadge","onSettingsClick","renderForColumn","conditionalRender","bind","columnId","some","column","Link","title","to","href","signOutLink","number","bool","logoutMessage","logoutConfirm","mapDispatchToProps","_ref","openModal","message","confirm","closeWhenConfirm","onConfirm","logOut","compose","Compose","mapStateToProps","ownProps","elefriend","showSearch","multiColumn","onClickElefriend","cycleElefriendCompose","onMount","mountCompose","onUnmount","unmountCompose","_dec","React","PureComponent","componentWillUnmount","computedClass","classNames","role","HeaderContainer","SearchContainer","NavigationContainer","ComposeFormContainer","mascot","alt","draggable","src","Motion","defaultStyle","x","style","spring","stiffness","damping","_ref2","transform","visibility","SearchResultsContainer","Column","Helmet","name","content"],"mappings":"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","file":"js/flavours/glitch/async/compose-016026c68331c5c1c3dd.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport AccountContainer from 'flavours/glitch/containers/account_container';\nimport StatusContainer from 'flavours/glitch/containers/status_container';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { ImmutableHashtag as Hashtag } from 'flavours/glitch/components/hashtag';\nimport Icon from 'flavours/glitch/components/icon';\nimport { searchEnabled } from 'flavours/glitch/initial_state';\nimport LoadMore from 'flavours/glitch/components/load_more';\n\nconst messages = defineMessages({\n  dismissSuggestion: { id: 'suggestions.dismiss', defaultMessage: 'Dismiss suggestion' },\n});\n\nexport default @injectIntl\nclass SearchResults extends ImmutablePureComponent {\n\n  static propTypes = {\n    results: ImmutablePropTypes.map.isRequired,\n    suggestions: ImmutablePropTypes.list.isRequired,\n    fetchSuggestions: PropTypes.func.isRequired,\n    expandSearch: PropTypes.func.isRequired,\n    dismissSuggestion: PropTypes.func.isRequired,\n    searchTerm: PropTypes.string,\n    intl: PropTypes.object.isRequired,\n  };\n\n  componentDidMount () {\n    if (this.props.searchTerm === '') {\n      this.props.fetchSuggestions();\n    }\n  }\n\n  componentDidUpdate () {\n    if (this.props.searchTerm === '') {\n      this.props.fetchSuggestions();\n    }\n  }\n\n  handleLoadMoreAccounts = () => this.props.expandSearch('accounts');\n\n  handleLoadMoreStatuses = () => this.props.expandSearch('statuses');\n\n  handleLoadMoreHashtags = () => this.props.expandSearch('hashtags');\n\n  render () {\n    const { intl, results, suggestions, dismissSuggestion, searchTerm } = this.props;\n\n    let accounts, statuses, hashtags;\n    let count = 0;\n\n    if (searchTerm === '' && !suggestions.isEmpty()) {\n      return (\n        <div className='drawer--results'>\n          <div className='trends'>\n            <div className='trends__header'>\n              <Icon fixedWidth id='user-plus' />\n              <FormattedMessage id='suggestions.header' defaultMessage='You might be interested in…' />\n            </div>\n\n            {suggestions && suggestions.map(suggestion => (\n              <AccountContainer\n                key={suggestion.get('account')}\n                id={suggestion.get('account')}\n                actionIcon={suggestion.get('source') === 'past_interaction' ? 'times' : null}\n                actionTitle={suggestion.get('source') === 'past_interaction' ? intl.formatMessage(messages.dismissSuggestion) : null}\n                onActionClick={dismissSuggestion}\n              />\n            ))}\n          </div>\n        </div>\n      );\n    } else if(results.get('statuses') && results.get('statuses').size === 0 && !searchEnabled && !(searchTerm.startsWith('@') || searchTerm.startsWith('#') || searchTerm.includes(' '))) {\n      statuses = (\n        <section className='search-results__section'>\n          <h5><Icon id='quote-right' fixedWidth /><FormattedMessage id='search_results.statuses' defaultMessage='Posts' /></h5>\n\n          <div className='search-results__info'>\n            <FormattedMessage id='search_results.statuses_fts_disabled' defaultMessage='Searching posts by their content is not enabled on this Mastodon server.' />\n          </div>\n        </section>\n      );\n    }\n\n    if (results.get('accounts') && results.get('accounts').size > 0) {\n      count   += results.get('accounts').size;\n      accounts = (\n        <section className='search-results__section'>\n          <h5><Icon id='users' fixedWidth /><FormattedMessage id='search_results.accounts' defaultMessage='People' /></h5>\n\n          {results.get('accounts').map(accountId => <AccountContainer id={accountId} key={accountId} />)}\n\n          {results.get('accounts').size >= 5 && <LoadMore visible onClick={this.handleLoadMoreAccounts} />}\n        </section>\n      );\n    }\n\n    if (results.get('statuses') && results.get('statuses').size > 0) {\n      count   += results.get('statuses').size;\n      statuses = (\n        <section className='search-results__section'>\n          <h5><Icon id='quote-right' fixedWidth /><FormattedMessage id='search_results.statuses' defaultMessage='Posts' /></h5>\n\n          {results.get('statuses').map(statusId => <StatusContainer id={statusId} key={statusId} />)}\n\n          {results.get('statuses').size >= 5 && <LoadMore visible onClick={this.handleLoadMoreStatuses} />}\n        </section>\n      );\n    }\n\n    if (results.get('hashtags') && results.get('hashtags').size > 0) {\n      count += results.get('hashtags').size;\n      hashtags = (\n        <section className='search-results__section'>\n          <h5><Icon id='hashtag' fixedWidth /><FormattedMessage id='search_results.hashtags' defaultMessage='Hashtags' /></h5>\n\n          {results.get('hashtags').map(hashtag => <Hashtag key={hashtag.get('name')} hashtag={hashtag} />)}\n\n          {results.get('hashtags').size >= 5 && <LoadMore visible onClick={this.handleLoadMoreHashtags} />}\n        </section>\n      );\n    }\n\n    //  The result.\n    return (\n      <div className='drawer--results'>\n        <header className='search-results__header'>\n          <Icon id='search' fixedWidth />\n          <FormattedMessage id='search_results.total' defaultMessage='{count, number} {count, plural, one {result} other {results}}' values={{ count }} />\n        </header>\n\n        {accounts}\n        {statuses}\n        {hashtags}\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport SearchResults from '../components/search_results';\nimport { fetchSuggestions, dismissSuggestion } from 'flavours/glitch/actions/suggestions';\nimport { expandSearch } from 'flavours/glitch/actions/search';\n\nconst mapStateToProps = state => ({\n  results: state.getIn(['search', 'results']),\n  suggestions: state.getIn(['suggestions', 'items']),\n  searchTerm: state.getIn(['search', 'searchTerm']),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchSuggestions: () => dispatch(fetchSuggestions()),\n  expandSearch: type => dispatch(expandSearch(type)),\n  dismissSuggestion: account => dispatch(dismissSuggestion(account.get('id'))),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchResults);\n","//  Package imports.\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { injectIntl, defineMessages } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\n//  Components.\nimport Icon from 'flavours/glitch/components/icon';\n\n//  Utils.\nimport { conditionalRender } from 'flavours/glitch/utils/react_helpers';\nimport { signOutLink } from 'flavours/glitch/utils/backend_links';\n\n//  Messages.\nconst messages = defineMessages({\n  community: {\n    defaultMessage: 'Local timeline',\n    id: 'navigation_bar.community_timeline',\n  },\n  home_timeline: {\n    defaultMessage: 'Home',\n    id: 'tabs_bar.home',\n  },\n  logout: {\n    defaultMessage: 'Logout',\n    id: 'navigation_bar.logout',\n  },\n  notifications: {\n    defaultMessage: 'Notifications',\n    id: 'tabs_bar.notifications',\n  },\n  public: {\n    defaultMessage: 'Federated timeline',\n    id: 'navigation_bar.public_timeline',\n  },\n  settings: {\n    defaultMessage: 'App settings',\n    id: 'navigation_bar.app_settings',\n  },\n  start: {\n    defaultMessage: 'Getting started',\n    id: 'getting_started.heading',\n  },\n});\n\nexport default @injectIntl\nclass Header extends ImmutablePureComponent {\n\n  static propTypes = {\n    columns: ImmutablePropTypes.list,\n    unreadNotifications: PropTypes.number,\n    showNotificationsBadge: PropTypes.bool,\n    intl: PropTypes.object,\n    onSettingsClick: PropTypes.func,\n    onLogout: PropTypes.func.isRequired,\n  };\n\n  handleLogoutClick = e => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    this.props.onLogout();\n\n    return false;\n  };\n\n  render () {\n    const { intl, columns, unreadNotifications, showNotificationsBadge, onSettingsClick } = this.props;\n\n    //  Only renders the component if the column isn't being shown.\n    const renderForColumn = conditionalRender.bind(null,\n      columnId => !columns || !columns.some(\n        column => column.get('id') === columnId,\n      ),\n    );\n\n    //  The result.\n    return (\n      <nav className='drawer--header'>\n        <Link\n          aria-label={intl.formatMessage(messages.start)}\n          title={intl.formatMessage(messages.start)}\n          to='/getting-started'\n        ><Icon id='asterisk' /></Link>\n        {renderForColumn('HOME', (\n          <Link\n            aria-label={intl.formatMessage(messages.home_timeline)}\n            title={intl.formatMessage(messages.home_timeline)}\n            to='/home'\n          ><Icon id='home' /></Link>\n        ))}\n        {renderForColumn('NOTIFICATIONS', (\n          <Link\n            aria-label={intl.formatMessage(messages.notifications)}\n            title={intl.formatMessage(messages.notifications)}\n            to='/notifications'\n          >\n            <span className='icon-badge-wrapper'>\n              <Icon id='bell' />\n              { showNotificationsBadge && unreadNotifications > 0 && <div className='icon-badge' />}\n            </span>\n          </Link>\n        ))}\n        {renderForColumn('COMMUNITY', (\n          <Link\n            aria-label={intl.formatMessage(messages.community)}\n            title={intl.formatMessage(messages.community)}\n            to='/public/local'\n          ><Icon id='users' /></Link>\n        ))}\n        {renderForColumn('PUBLIC', (\n          <Link\n            aria-label={intl.formatMessage(messages.public)}\n            title={intl.formatMessage(messages.public)}\n            to='/public'\n          ><Icon id='globe' /></Link>\n        ))}\n        <a\n          aria-label={intl.formatMessage(messages.settings)}\n          onClick={onSettingsClick}\n          href='/settings/preferences'\n          title={intl.formatMessage(messages.settings)}\n        ><Icon id='cogs' /></a>\n        <a\n          aria-label={intl.formatMessage(messages.logout)}\n          onClick={this.handleLogoutClick}\n          href={signOutLink}\n          title={intl.formatMessage(messages.logout)}\n        ><Icon id='sign-out' /></a>\n      </nav>\n    );\n  }\n\n}\n","import { openModal } from 'flavours/glitch/actions/modal';\nimport { connect }   from 'react-redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport Header from '../components/header';\nimport { logOut } from 'flavours/glitch/utils/log_out';\n\nconst messages = defineMessages({\n  logoutMessage: { id: 'confirmations.logout.message', defaultMessage: 'Are you sure you want to log out?' },\n  logoutConfirm: { id: 'confirmations.logout.confirm', defaultMessage: 'Log out' },\n});\n\nconst mapStateToProps = state => {\n  return {\n    columns: state.getIn(['settings', 'columns']),\n    unreadNotifications: state.getIn(['notifications', 'unread']),\n    showNotificationsBadge: state.getIn(['local_settings', 'notifications', 'tab_badge']),\n  };\n};\n\nconst mapDispatchToProps = (dispatch, { intl }) => ({\n  onSettingsClick (e) {\n    e.preventDefault();\n    e.stopPropagation();\n    dispatch(openModal('SETTINGS', {}));\n  },\n  onLogout () {\n    dispatch(openModal('CONFIRM', {\n      message: intl.formatMessage(messages.logoutMessage),\n      confirm: intl.formatMessage(messages.logoutConfirm),\n      closeWhenConfirm: false,\n      onConfirm: () => logOut(),\n    }));\n  },\n});\n\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(Header));\n","import React from 'react';\nimport ComposeFormContainer from './containers/compose_form_container';\nimport NavigationContainer from './containers/navigation_container';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\nimport { mountCompose, unmountCompose, cycleElefriendCompose } from 'flavours/glitch/actions/compose';\nimport { injectIntl, defineMessages } from 'react-intl';\nimport classNames from 'classnames';\nimport SearchContainer from './containers/search_container';\nimport Motion from '../ui/util/optional_motion';\nimport spring from 'react-motion/lib/spring';\nimport SearchResultsContainer from './containers/search_results_container';\nimport { me, mascot } from 'flavours/glitch/initial_state';\nimport HeaderContainer from './containers/header_container';\nimport Column from 'flavours/glitch/components/column';\nimport { Helmet } from 'react-helmet';\n\nconst messages = defineMessages({\n  compose: { id: 'navigation_bar.compose', defaultMessage: 'Compose new post' },\n});\n\nconst mapStateToProps = (state, ownProps) => ({\n  elefriend: state.getIn(['compose', 'elefriend']),\n  showSearch: ownProps.multiColumn ? state.getIn(['search', 'submitted']) && !state.getIn(['search', 'hidden']) : false,\n});\n\nconst mapDispatchToProps = (dispatch, { intl }) => ({\n  onClickElefriend () {\n    dispatch(cycleElefriendCompose());\n  },\n\n  onMount () {\n    dispatch(mountCompose());\n  },\n\n  onUnmount () {\n    dispatch(unmountCompose());\n  },\n});\n\nexport default @connect(mapStateToProps, mapDispatchToProps)\n@injectIntl\nclass Compose extends React.PureComponent {\n\n  static propTypes = {\n    multiColumn: PropTypes.bool,\n    showSearch: PropTypes.bool,\n    elefriend: PropTypes.number,\n    onClickElefriend: PropTypes.func,\n    onMount: PropTypes.func,\n    onUnmount: PropTypes.func,\n    intl: PropTypes.object.isRequired,\n  };\n\n  componentDidMount () {\n    this.props.onMount();\n  }\n\n  componentWillUnmount () {\n    this.props.onUnmount();\n  }\n\n  render () {\n    const {\n      elefriend,\n      intl,\n      multiColumn,\n      onClickElefriend,\n      showSearch,\n    } = this.props;\n    const computedClass = classNames('drawer', `mbstobon-${elefriend}`);\n\n    if (multiColumn) {\n      return (\n        <div className={computedClass} role='region' aria-label={intl.formatMessage(messages.compose)}>\n          <HeaderContainer />\n\n          {multiColumn && <SearchContainer />}\n\n          <div className='drawer__pager'>\n            <div className='drawer__inner'>\n              <NavigationContainer />\n\n              <ComposeFormContainer />\n\n              <div className='drawer__inner__mastodon'>\n                {mascot ? <img alt='' draggable='false' src={mascot} /> : <button className='mastodon' onClick={onClickElefriend} />}\n              </div>\n            </div>\n\n            <Motion defaultStyle={{ x: -100 }} style={{ x: spring(showSearch ? 0 : -100, { stiffness: 210, damping: 20 }) }}>\n              {({ x }) => (\n                <div className='drawer__inner darker' style={{ transform: `translateX(${x}%)`, visibility: x === -100 ? 'hidden' : 'visible' }}>\n                  <SearchResultsContainer />\n                </div>\n              )}\n            </Motion>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <Column>\n        <NavigationContainer />\n        <ComposeFormContainer />\n\n        <Helmet>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}