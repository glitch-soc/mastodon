{"version":3,"sources":["webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/list_editor/containers/account_container.js","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/list_editor/containers/search_container.js","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/list_editor/components/edit_list_form.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/list_editor/index.jsx"],"names":["injectIntl","connect","makeMapStateToProps","getAccount","makeGetAccount","mapStateToProps","state","_ref","accountId","added","account","getIn","includes","mapDispatchToProps","dispatch","_ref2","onRemove","removeFromListEditor","onAdd","addToListEditor","Account","value","onSubmit","fetchListSuggestions","onClear","clearListSuggestions","onChange","changeListSuggestions","Search","messages","defineMessages","title","ListForm","disabled","changeListEditorTitle","submitListEditor","_dec","_class","React","PureComponent","constructor","arguments","handleChange","e","this","props","target","handleSubmit","preventDefault","handleClick","render","intl","formatMessage","_jsx","className","IconButton","icon","onClick","ListEditor","accountIds","searchAccountIds","onInitialize","listId","setupListEditor","onReset","resetListEditor","_class2","ImmutablePureComponent","componentDidMount","componentWillUnmount","showSearch","size","EditListForm","SearchContainer","map","AccountContainer","role","tabIndex","Motion","defaultStyle","x","style","spring","stiffness","damping","transform","visibility","propTypes","PropTypes","string","isRequired","onClose","func","object","ImmutablePropTypes","list"],"mappings":"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","file":"js/flavours/glitch/async/list_editor-39024c4b97140730d702.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { makeGetAccount } from 'flavours/glitch/selectors';\nimport { injectIntl } from 'react-intl';\nimport { removeFromListEditor, addToListEditor } from 'flavours/glitch/actions/lists';\nimport Account from '../components/account';\n\nconst makeMapStateToProps = () => {\n  const getAccount = makeGetAccount();\n\n  const mapStateToProps = (state, { accountId, added }) => ({\n    account: getAccount(state, accountId),\n    added: typeof added === 'undefined' ? state.getIn(['listEditor', 'accounts', 'items']).includes(accountId) : added,\n  });\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = (dispatch, { accountId }) => ({\n  onRemove: () => dispatch(removeFromListEditor(accountId)),\n  onAdd: () => dispatch(addToListEditor(accountId)),\n});\n\nexport default injectIntl(connect(makeMapStateToProps, mapDispatchToProps)(Account));\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { fetchListSuggestions, clearListSuggestions, changeListSuggestions } from '../../../actions/lists';\nimport Search from '../components/search';\n\nconst mapStateToProps = state => ({\n  value: state.getIn(['listEditor', 'suggestions', 'value']),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: value => dispatch(fetchListSuggestions(value)),\n  onClear: () => dispatch(clearListSuggestions()),\n  onChange: value => dispatch(changeListSuggestions(value)),\n});\n\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(Search));\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { changeListEditorTitle, submitListEditor } from 'flavours/glitch/actions/lists';\nimport IconButton from 'flavours/glitch/components/icon_button';\nimport { defineMessages, injectIntl } from 'react-intl';\n\nconst messages = defineMessages({\n  title: { id: 'lists.edit.submit', defaultMessage: 'Change title' },\n});\n\nconst mapStateToProps = state => ({\n  value: state.getIn(['listEditor', 'title']),\n  disabled: !state.getIn(['listEditor', 'isChanged']) || !state.getIn(['listEditor', 'title']),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: value => dispatch(changeListEditorTitle(value)),\n  onSubmit: () => dispatch(submitListEditor(false)),\n});\n\nexport default @connect(mapStateToProps, mapDispatchToProps)\n@injectIntl\nclass ListForm extends React.PureComponent {\n\n  static propTypes = {\n    value: PropTypes.string.isRequired,\n    disabled: PropTypes.bool,\n    intl: PropTypes.object.isRequired,\n    onChange: PropTypes.func.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n  };\n\n  handleChange = e => {\n    this.props.onChange(e.target.value);\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.onSubmit();\n  };\n\n  handleClick = () => {\n    this.props.onSubmit();\n  };\n\n  render () {\n    const { value, disabled, intl } = this.props;\n\n    const title = intl.formatMessage(messages.title);\n\n    return (\n      <form className='column-inline-form' onSubmit={this.handleSubmit}>\n        <input\n          className='setting-text'\n          value={value}\n          onChange={this.handleChange}\n        />\n\n        <IconButton\n          disabled={disabled}\n          icon='check'\n          title={title}\n          onClick={this.handleClick}\n        />\n      </form>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { injectIntl } from 'react-intl';\nimport { setupListEditor, clearListSuggestions, resetListEditor } from 'flavours/glitch/actions/lists';\nimport AccountContainer from './containers/account_container';\nimport SearchContainer from './containers/search_container';\nimport EditListForm from './components/edit_list_form';\nimport Motion from '../ui/util/optional_motion';\nimport spring from 'react-motion/lib/spring';\n\nconst mapStateToProps = state => ({\n  accountIds: state.getIn(['listEditor', 'accounts', 'items']),\n  searchAccountIds: state.getIn(['listEditor', 'suggestions', 'items']),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onInitialize: listId => dispatch(setupListEditor(listId)),\n  onClear: () => dispatch(clearListSuggestions()),\n  onReset: () => dispatch(resetListEditor()),\n});\n\nexport default @connect(mapStateToProps, mapDispatchToProps)\n@injectIntl\nclass ListEditor extends ImmutablePureComponent {\n\n  static propTypes = {\n    listId: PropTypes.string.isRequired,\n    onClose: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    onInitialize: PropTypes.func.isRequired,\n    onClear: PropTypes.func.isRequired,\n    onReset: PropTypes.func.isRequired,\n    accountIds: ImmutablePropTypes.list.isRequired,\n    searchAccountIds: ImmutablePropTypes.list.isRequired,\n  };\n\n  componentDidMount () {\n    const { onInitialize, listId } = this.props;\n    onInitialize(listId);\n  }\n\n  componentWillUnmount () {\n    const { onReset } = this.props;\n    onReset();\n  }\n\n  render () {\n    const { accountIds, searchAccountIds, onClear } = this.props;\n    const showSearch = searchAccountIds.size > 0;\n\n    return (\n      <div className='modal-root__modal list-editor'>\n        <EditListForm />\n\n        <SearchContainer />\n\n        <div className='drawer__pager'>\n          <div className='drawer__inner list-editor__accounts'>\n            {accountIds.map(accountId => <AccountContainer key={accountId} accountId={accountId} added />)}\n          </div>\n\n          {showSearch && <div role='button' tabIndex='-1' className='drawer__backdrop' onClick={onClear} />}\n\n          <Motion defaultStyle={{ x: -100 }} style={{ x: spring(showSearch ? 0 : -100, { stiffness: 210, damping: 20 }) }}>\n            {({ x }) =>\n              (<div className='drawer__inner backdrop' style={{ transform: x === 0 ? null : `translateX(${x}%)`, visibility: x === -100 ? 'hidden' : 'visible' }}>\n                {searchAccountIds.map(accountId => <AccountContainer key={accountId} accountId={accountId} />)}\n              </div>)\n            }\n          </Motion>\n        </div>\n      </div>\n    );\n  }\n\n}\n"],"sourceRoot":""}