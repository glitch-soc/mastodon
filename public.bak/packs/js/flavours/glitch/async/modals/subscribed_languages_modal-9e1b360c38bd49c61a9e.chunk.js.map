{"version":3,"sources":["webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/subscribed_languages_modal/index.jsx"],"names":["messages","defineMessages","close","getAccountLanguages","createSelector","state","accountId","getIn","ImmutableList","get","statusIds","statuses","ImmutableSet","map","statusId","filter","status","SubscribedLanguagesModal","connect","mapStateToProps","_ref","acct","availableLanguages","selectedLanguages","mapDispatchToProps","dispatch","_ref2","onSubmit","languages","followAccount","_dec","_class","injectIntl","_class2","ImmutablePureComponent","constructor","arguments","this","props","handleLanguageToggle","value","checked","setState","add","delete","handleSubmit","toArray","onClose","renderItem","language","find","includes","_jsx","Option","name","label","onToggle","multiple","render","intl","className","IconButton","title","formatMessage","icon","onClick","size","FormattedMessage","id","defaultMessage","values","target","union","Button","disabled","is","propTypes","PropTypes","string","isRequired","ImmutablePropTypes","setOf","func","arrayOf","object","submit","defaultProps","preloadedLanguages"],"mappings":"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","file":"js/flavours/glitch/async/modals/subscribed_languages_modal-9e1b360c38bd49c61a9e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport { is, List as ImmutableList, Set as ImmutableSet } from 'immutable';\nimport { languages as preloadedLanguages } from 'flavours/glitch/initial_state';\nimport Option from 'flavours/glitch/features/report/components/option';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport IconButton from 'flavours/glitch/components/icon_button';\nimport Button from 'flavours/glitch/components/button';\nimport { followAccount } from 'flavours/glitch/actions/accounts';\n\nconst messages = defineMessages({\n  close: { id: 'lightbox.close', defaultMessage: 'Close' },\n});\n\nconst getAccountLanguages = createSelector([\n  (state, accountId) => state.getIn(['timelines', `account:${accountId}`, 'items'], ImmutableList()),\n  state => state.get('statuses'),\n], (statusIds, statuses) =>\n  new ImmutableSet(statusIds.map(statusId => statuses.get(statusId)).filter(status => !status.get('reblog')).map(status => status.get('language'))));\n\nconst mapStateToProps = (state, { accountId }) => ({\n  acct: state.getIn(['accounts', accountId, 'acct']),\n  availableLanguages: getAccountLanguages(state, accountId),\n  selectedLanguages: ImmutableSet(state.getIn(['relationships', accountId, 'languages']) || ImmutableList()),\n});\n\nconst mapDispatchToProps = (dispatch, { accountId }) => ({\n\n  onSubmit (languages) {\n    dispatch(followAccount(accountId, { languages }));\n  },\n\n});\n\nexport default @connect(mapStateToProps, mapDispatchToProps)\n@injectIntl\nclass SubscribedLanguagesModal extends ImmutablePureComponent {\n\n  static propTypes = {\n    accountId: PropTypes.string.isRequired,\n    acct: PropTypes.string.isRequired,\n    availableLanguages: ImmutablePropTypes.setOf(PropTypes.string),\n    selectedLanguages: ImmutablePropTypes.setOf(PropTypes.string),\n    onClose: PropTypes.func.isRequired,\n    languages: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string)),\n    intl: PropTypes.object.isRequired,\n    submit: PropTypes.func.isRequired,\n  };\n\n  static defaultProps = {\n    languages: preloadedLanguages,\n  };\n\n  state = {\n    selectedLanguages: this.props.selectedLanguages,\n  };\n\n  handleLanguageToggle = (value, checked) => {\n    const { selectedLanguages } = this.state;\n\n    if (checked) {\n      this.setState({ selectedLanguages: selectedLanguages.add(value) });\n    } else {\n      this.setState({ selectedLanguages: selectedLanguages.delete(value) });\n    }\n  };\n\n  handleSubmit = () => {\n    this.props.onSubmit(this.state.selectedLanguages.toArray());\n    this.props.onClose();\n  };\n\n  renderItem (value) {\n    const language = this.props.languages.find(language => language[0] === value);\n    const checked = this.state.selectedLanguages.includes(value);\n\n    if (!language) {\n      return null;\n    }\n\n    return (\n      <Option\n        key={value}\n        name='languages'\n        value={value}\n        label={language[1]}\n        checked={checked}\n        onToggle={this.handleLanguageToggle}\n        multiple\n      />\n    );\n  }\n\n  render () {\n    const { acct, availableLanguages, selectedLanguages, intl, onClose } = this.props;\n\n    return (\n      <div className='modal-root__modal report-dialog-modal'>\n        <div className='report-modal__target'>\n          <IconButton className='report-modal__close' title={intl.formatMessage(messages.close)} icon='times' onClick={onClose} size={20} />\n          <FormattedMessage id='subscribed_languages.target' defaultMessage='Change subscribed languages for {target}' values={{ target: <strong>{acct}</strong> }} />\n        </div>\n\n        <div className='report-dialog-modal__container'>\n          <p className='report-dialog-modal__lead'><FormattedMessage id='subscribed_languages.lead' defaultMessage='Only posts in selected languages will appear on your home and list timelines after the change. Select none to receive posts in all languages.' /></p>\n\n          <div>\n            {availableLanguages.union(selectedLanguages).delete(null).map(value => this.renderItem(value))}\n          </div>\n\n          <div className='flex-spacer' />\n\n          <div className='report-dialog-modal__actions'>\n            <Button disabled={is(this.state.selectedLanguages, this.props.selectedLanguages)} onClick={this.handleSubmit}><FormattedMessage id='subscribed_languages.save' defaultMessage='Save changes' /></Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n"],"sourceRoot":""}