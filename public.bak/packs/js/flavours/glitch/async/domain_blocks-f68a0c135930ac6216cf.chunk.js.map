{"version":3,"sources":["webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/components/domain.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/containers/domain_container.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/domain_blocks/index.jsx"],"names":["messages","defineMessages","unblockDomain","Account","injectIntl","_class2","ImmutablePureComponent","constructor","arguments","handleDomainUnblock","this","props","onUnblockDomain","domain","render","intl","_jsx","className","IconButton","active","icon","title","formatMessage","onClick","propTypes","PropTypes","string","func","isRequired","object","_class","blockDomainConfirm","connect","makeMapStateToProps","mapStateToProps","state","_ref","mapDispatchToProps","dispatch","_ref2","onBlockDomain","openModal","message","FormattedMessage","id","defaultMessage","values","confirm","onConfirm","blockDomain","Domain","heading","Blocks","domains","getIn","hasMore","_dec","handleLoadMore","_debounce","expandDomainBlocks","leading","componentWillMount","fetchDomainBlocks","multiColumn","Column","LoadingIndicator","emptyMessage","bindToDocument","ColumnBackButtonSlim","ScrollableList","scrollKey","onLoadMore","map","DomainContainer","Helmet","name","content","params","bool","ImmutablePropTypes","list"],"mappings":"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","file":"js/flavours/glitch/async/domain_blocks-f68a0c135930ac6216cf.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport IconButton from './icon_button';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\nconst messages = defineMessages({\n  unblockDomain: { id: 'account.unblock_domain', defaultMessage: 'Unblock domain {domain}' },\n});\n\nexport default @injectIntl\nclass Account extends ImmutablePureComponent {\n\n  static propTypes = {\n    domain: PropTypes.string,\n    onUnblockDomain: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  handleDomainUnblock = () => {\n    this.props.onUnblockDomain(this.props.domain);\n  };\n\n  render () {\n    const { domain, intl } = this.props;\n\n    return (\n      <div className='domain'>\n        <div className='domain__wrapper'>\n          <span className='domain__domain-name'>\n            <strong>{domain}</strong>\n          </span>\n\n          <div className='domain__buttons'>\n            <IconButton active icon='unlock' title={intl.formatMessage(messages.unblockDomain, { domain })} onClick={this.handleDomainUnblock} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { blockDomain, unblockDomain } from '../actions/domain_blocks';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport Domain from '../components/domain';\nimport { openModal } from '../actions/modal';\n\nconst messages = defineMessages({\n  blockDomainConfirm: { id: 'confirmations.domain_block.confirm', defaultMessage: 'Block entire domain' },\n});\n\nconst makeMapStateToProps = () => {\n  const mapStateToProps = (state, { }) => ({\n  });\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = (dispatch, { intl }) => ({\n  onBlockDomain (domain) {\n    dispatch(openModal('CONFIRM', {\n      message: <FormattedMessage id='confirmations.domain_block.message' defaultMessage='Are you really, really sure you want to block the entire {domain}? In most cases a few targeted blocks or mutes are sufficient and preferable.' values={{ domain: <strong>{domain}</strong> }} />,\n      confirm: intl.formatMessage(messages.blockDomainConfirm),\n      onConfirm: () => dispatch(blockDomain(domain)),\n    }));\n  },\n\n  onUnblockDomain (domain) {\n    dispatch(unblockDomain(domain));\n  },\n});\n\nexport default injectIntl(connect(makeMapStateToProps, mapDispatchToProps)(Domain));\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { debounce } from 'lodash';\nimport PropTypes from 'prop-types';\nimport LoadingIndicator from '../../components/loading_indicator';\nimport Column from '../ui/components/column';\nimport ColumnBackButtonSlim from '../../components/column_back_button_slim';\nimport DomainContainer from '../../containers/domain_container';\nimport { fetchDomainBlocks, expandDomainBlocks } from '../../actions/domain_blocks';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport ScrollableList from 'flavours/glitch/components/scrollable_list';\nimport { Helmet } from 'react-helmet';\n\nconst messages = defineMessages({\n  heading: { id: 'column.domain_blocks', defaultMessage: 'Blocked domains' },\n  unblockDomain: { id: 'account.unblock_domain', defaultMessage: 'Unblock domain {domain}' },\n});\n\nconst mapStateToProps = state => ({\n  domains: state.getIn(['domain_lists', 'blocks', 'items']),\n  hasMore: !!state.getIn(['domain_lists', 'blocks', 'next']),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass Blocks extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    hasMore: PropTypes.bool,\n    domains: ImmutablePropTypes.list,\n    intl: PropTypes.object.isRequired,\n    multiColumn: PropTypes.bool,\n  };\n\n  componentWillMount () {\n    this.props.dispatch(fetchDomainBlocks());\n  }\n\n  handleLoadMore = debounce(() => {\n    this.props.dispatch(expandDomainBlocks());\n  }, 300, { leading: true });\n\n  render () {\n    const { intl, domains, hasMore, multiColumn } = this.props;\n\n    if (!domains) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    const emptyMessage = <FormattedMessage id='empty_column.domain_blocks' defaultMessage='There are no blocked domains yet.' />;\n\n    return (\n      <Column bindToDocument={!multiColumn} icon='minus-circle' heading={intl.formatMessage(messages.heading)}>\n        <ColumnBackButtonSlim />\n\n        <ScrollableList\n          scrollKey='domain_blocks'\n          onLoadMore={this.handleLoadMore}\n          hasMore={hasMore}\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n        >\n          {domains.map(domain =>\n            <DomainContainer key={domain} domain={domain} />,\n          )}\n        </ScrollableList>\n\n        <Helmet>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}