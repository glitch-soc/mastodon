{"version":3,"sources":["webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/ui/components/compare_history_modal.jsx"],"names":["CompareHistoryModal","connect","mapStateToProps","state","_ref","statusId","language","getIn","versions","dispatch","onClose","closeModal","_dec","_class","React","PureComponent","render","index","this","props","currentVersion","get","emojiMap","reduce","obj","emoji","toJS","content","__html","emojify","spoilerContent","escapeTextContentForBrowser","formattedDate","_jsx","RelativeTimestamp","timestamp","short","formattedName","InlineAccount","accountId","label","FormattedMessage","id","defaultMessage","values","name","date","className","IconButton","icon","onClick","size","length","Fragment","dangerouslySetInnerHTML","lang","map","option","MediaAttachments","status"],"mappings":"+PAwBG,IAGGA,EADUC,mBAbQC,CAACC,EAAKC,KAAA,IAAE,SAAEC,GAAUD,EAAA,MAAM,CAChDE,SAAUH,EAAMI,MAAM,CAAC,WAAYF,EAAU,aAC7CG,SAAUL,EAAMI,MAAM,CAAC,UAAWF,EAAU,cAGnBI,IAAQ,CAEjCC,UACED,EAASE,mBAK+CC,CAAAC,EAA7C,cACmBC,IAAMC,cAUtCC,SACE,MAAM,MAAEC,EAAK,SAAET,EAAQ,SAAEF,EAAQ,QAAEI,GAAYQ,KAAKC,MAC9CC,EAAiBZ,EAASa,IAAIJ,GAE9BK,EAAWF,EAAeC,IAAI,UAAUE,QAAO,CAACC,EAAKC,KACzDD,EAAK,IAAGC,EAAMJ,IAAI,iBAAmBI,EAAMC,OACpCF,IACN,IAEGG,EAAU,CAAEC,OAAQC,kBAAQT,EAAeC,IAAI,WAAYC,IAC3DQ,EAAiB,CAAEF,OAAQC,kBAAQE,IAA4BX,EAAeC,IAAI,iBAAkBC,IAEpGU,EAAgBC,YAACC,UAAiB,CAACC,UAAWf,EAAeC,IAAI,cAAee,OAAO,IACvFC,EAAgBJ,YAACK,IAAa,CAACC,UAAWnB,EAAeC,IAAI,aAE7DmB,EAAQpB,EAAeC,IAAI,YAC/BY,YAACQ,IAAgB,CAACC,GAAG,yBAAyBC,eAAe,wBAAwBC,OAAQ,CAAEC,KAAMR,EAAeS,KAAMd,KAE1HC,YAACQ,IAAgB,CAACC,GAAG,wBAAwBC,eAAe,uBAAuBC,OAAQ,CAAEC,KAAMR,EAAeS,KAAMd,KAG1H,OACEC,YAAA,OAAKc,UAAU,gDAAyC,EACtDd,YAAA,OAAKc,UAAU,6BAAsB,EACnCd,YAACe,IAAU,CAACD,UAAU,sBAAsBE,KAAK,QAAQC,QAASxC,EAASyC,KAAM,KAChFX,GAGHP,YAAA,OAAKc,UAAU,yCAAkC,EAC/Cd,YAAA,OAAKc,UAAU,wBAAiB,EAC7B3B,EAAeC,IAAI,gBAAgB+B,OAAS,GAC3CnB,YAACnB,IAAMuC,SAAQ,UACbpB,YAAA,OAAKc,UAAU,YAAYO,wBAAyBxB,EAAgByB,KAAMjD,IAC1E2B,YAAA,UAIJA,YAAA,OAAKc,UAAU,iEAAiEO,wBAAyB3B,EAAS4B,KAAMjD,MAErHc,EAAeC,IAAI,SACpBY,YAAA,OAAKc,UAAU,aAAM,EACnBd,YAAA,eACGb,EAAeb,MAAM,CAAC,OAAQ,YAAYiD,KAAIC,GAC7CxB,YAAA,QAASwB,EAAOpC,IAAI,SAClBY,YAAA,QAAMc,UAAU,yBAEhBd,YAAA,QACEc,UAAU,+BACVO,wBAAyB,CAAE1B,OAAQC,kBAAQE,IAA4B0B,EAAOpC,IAAI,UAAWC,IAC7FiC,KAAMjD,SAQlB2B,YAACyB,IAAgB,CAACC,OAAQvC,EAAgBmC,KAAMjD,WAO3DO","file":"js/flavours/glitch/async/compare_history_modal-9f569711d1505f3ee832.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\nimport { FormattedMessage } from 'react-intl';\nimport { closeModal } from 'flavours/glitch/actions/modal';\nimport emojify from 'flavours/glitch/features/emoji/emoji';\nimport escapeTextContentForBrowser from 'escape-html';\nimport InlineAccount from 'flavours/glitch/components/inline_account';\nimport IconButton from 'flavours/glitch/components/icon_button';\nimport RelativeTimestamp from 'flavours/glitch/components/relative_timestamp';\nimport MediaAttachments from 'flavours/glitch/components/media_attachments';\n\nconst mapStateToProps = (state, { statusId }) => ({\n  language: state.getIn(['statuses', statusId, 'language']),\n  versions: state.getIn(['history', statusId, 'items']),\n});\n\nconst mapDispatchToProps = dispatch => ({\n\n  onClose() {\n    dispatch(closeModal());\n  },\n\n});\n\nexport default @connect(mapStateToProps, mapDispatchToProps)\nclass CompareHistoryModal extends React.PureComponent {\n\n  static propTypes = {\n    onClose: PropTypes.func.isRequired,\n    index: PropTypes.number.isRequired,\n    statusId: PropTypes.string.isRequired,\n    language: PropTypes.string.isRequired,\n    versions: ImmutablePropTypes.list.isRequired,\n  };\n\n  render () {\n    const { index, versions, language, onClose } = this.props;\n    const currentVersion = versions.get(index);\n\n    const emojiMap = currentVersion.get('emojis').reduce((obj, emoji) => {\n      obj[`:${emoji.get('shortcode')}:`] = emoji.toJS();\n      return obj;\n    }, {});\n\n    const content = { __html: emojify(currentVersion.get('content'), emojiMap) };\n    const spoilerContent = { __html: emojify(escapeTextContentForBrowser(currentVersion.get('spoiler_text')), emojiMap) };\n\n    const formattedDate = <RelativeTimestamp timestamp={currentVersion.get('created_at')} short={false} />;\n    const formattedName = <InlineAccount accountId={currentVersion.get('account')} />;\n\n    const label = currentVersion.get('original') ? (\n      <FormattedMessage id='status.history.created' defaultMessage='{name} created {date}' values={{ name: formattedName, date: formattedDate }} />\n    ) : (\n      <FormattedMessage id='status.history.edited' defaultMessage='{name} edited {date}' values={{ name: formattedName, date: formattedDate }} />\n    );\n\n    return (\n      <div className='modal-root__modal compare-history-modal'>\n        <div className='report-modal__target'>\n          <IconButton className='report-modal__close' icon='times' onClick={onClose} size={20} />\n          {label}\n        </div>\n\n        <div className='compare-history-modal__container'>\n          <div className='status__content'>\n            {currentVersion.get('spoiler_text').length > 0 && (\n              <React.Fragment>\n                <div className='translate' dangerouslySetInnerHTML={spoilerContent} lang={language} />\n                <hr />\n              </React.Fragment>\n            )}\n\n            <div className='status__content__text status__content__text--visible translate' dangerouslySetInnerHTML={content} lang={language} />\n\n            {!!currentVersion.get('poll') && (\n              <div className='poll'>\n                <ul>\n                  {currentVersion.getIn(['poll', 'options']).map(option => (\n                    <li key={option.get('title')}>\n                      <span className='poll__input disabled' />\n\n                      <span\n                        className='poll__option__text translate'\n                        dangerouslySetInnerHTML={{ __html: emojify(escapeTextContentForBrowser(option.get('title')), emojiMap) }}\n                        lang={language}\n                      />\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            )}\n\n            <MediaAttachments status={currentVersion} lang={language} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n"],"sourceRoot":""}