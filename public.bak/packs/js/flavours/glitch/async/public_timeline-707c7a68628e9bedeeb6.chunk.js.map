{"version":3,"sources":["webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/public_timeline/components/column_settings.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/public_timeline/containers/column_settings_container.js","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/public_timeline/index.jsx"],"names":["messages","defineMessages","filter_regex","ColumnSettings","injectIntl","_class","React","PureComponent","render","settings","onChange","intl","this","props","_jsx","className","SettingToggle","settingPath","label","FormattedMessage","id","defaultMessage","getIn","SettingText","formatMessage","connect","mapStateToProps","state","_ref","columnId","uuid","columns","index","findIndex","c","get","mapDispatchToProps","dispatch","_ref2","key","checked","changeColumnParams","changeSetting","title","PublicTimeline","_dec","onlyMedia","onlyRemote","allowLocalOnly","regex","timelineState","hasUnread","_class2","constructor","arguments","handlePin","removeColumn","addColumn","other","handleMove","dir","moveColumn","handleHeaderClick","column","scrollTop","setRef","handleLoadMore","maxId","expandPublicTimeline","componentDidMount","signedIn","context","identity","disconnect","connectPublicStream","componentDidUpdate","prevProps","componentWillUnmount","multiColumn","pinned","createElement","Column","bindToDocument","ref","name","ColumnHeader","icon","active","onPin","onMove","onClick","ColumnSettingsContainer","DismissableBanner","StatusListContainer","timelineId","onLoadMore","trackScroll","scrollKey","emptyMessage","Helmet","content","defaultProps","contextTypes","router","PropTypes","object"],"mappings":"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","file":"js/flavours/glitch/async/public_timeline-707c7a68628e9bedeeb6.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport SettingText from 'flavours/glitch/components/setting_text';\nimport SettingToggle from 'flavours/glitch/features/notifications/components/setting_toggle';\n\nconst messages = defineMessages({\n  filter_regex: { id: 'home.column_settings.filter_regex', defaultMessage: 'Filter out by regular expressions' },\n});\n\nexport default @injectIntl\nclass ColumnSettings extends React.PureComponent {\n\n  static propTypes = {\n    settings: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    columnId: PropTypes.string,\n  };\n\n  render () {\n    const { settings, onChange, intl } = this.props;\n\n    return (\n      <div>\n        <div className='column-settings__row'>\n          <SettingToggle settings={settings} settingPath={['other', 'onlyMedia']} onChange={onChange} label={<FormattedMessage id='community.column_settings.media_only' defaultMessage='Media only' />} />\n          <SettingToggle settings={settings} settingPath={['other', 'onlyRemote']} onChange={onChange} label={<FormattedMessage id='community.column_settings.remote_only' defaultMessage='Remote only' />} />\n          {!settings.getIn(['other', 'onlyRemote']) && <SettingToggle settings={settings} settingPath={['other', 'allowLocalOnly']} onChange={onChange} label={<FormattedMessage id='community.column_settings.allow_local_only' defaultMessage='Show local-only toots' />} />}\n        </div>\n\n        <span className='column-settings__section'><FormattedMessage id='home.column_settings.advanced' defaultMessage='Advanced' /></span>\n\n        <div className='column-settings__row'>\n          <SettingText settings={settings} settingPath={['regex', 'body']} onChange={onChange} label={intl.formatMessage(messages.filter_regex)} />\n        </div>\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport ColumnSettings from '../components/column_settings';\nimport { changeSetting } from 'flavours/glitch/actions/settings';\nimport { changeColumnParams } from 'flavours/glitch/actions/columns';\n\nconst mapStateToProps = (state, { columnId }) => {\n  const uuid = columnId;\n  const columns = state.getIn(['settings', 'columns']);\n  const index = columns.findIndex(c => c.get('uuid') === uuid);\n\n  return {\n    settings: (uuid && index >= 0) ? columns.get(index).get('params') : state.getIn(['settings', 'public']),\n  };\n};\n\nconst mapDispatchToProps = (dispatch, { columnId }) => {\n  return {\n    onChange (key, checked) {\n      if (columnId) {\n        dispatch(changeColumnParams(columnId, key, checked));\n      } else {\n        dispatch(changeSetting(['public', ...key], checked));\n      }\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ColumnSettings);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport StatusListContainer from 'flavours/glitch/features/ui/containers/status_list_container';\nimport Column from 'flavours/glitch/components/column';\nimport ColumnHeader from 'flavours/glitch/components/column_header';\nimport { expandPublicTimeline } from 'flavours/glitch/actions/timelines';\nimport { addColumn, removeColumn, moveColumn } from 'flavours/glitch/actions/columns';\nimport ColumnSettingsContainer from './containers/column_settings_container';\nimport { connectPublicStream } from 'flavours/glitch/actions/streaming';\nimport { Helmet } from 'react-helmet';\nimport DismissableBanner from 'flavours/glitch/components/dismissable_banner';\n\nconst messages = defineMessages({\n  title: { id: 'column.public', defaultMessage: 'Federated timeline' },\n});\n\nconst mapStateToProps = (state, { columnId }) => {\n  const uuid = columnId;\n  const columns = state.getIn(['settings', 'columns']);\n  const index = columns.findIndex(c => c.get('uuid') === uuid);\n  const onlyMedia = (columnId && index >= 0) ? columns.get(index).getIn(['params', 'other', 'onlyMedia']) : state.getIn(['settings', 'public', 'other', 'onlyMedia']);\n  const onlyRemote = (columnId && index >= 0) ? columns.get(index).getIn(['params', 'other', 'onlyRemote']) : state.getIn(['settings', 'public', 'other', 'onlyRemote']);\n  const allowLocalOnly = (columnId && index >= 0) ? columns.get(index).getIn(['params', 'other', 'allowLocalOnly']) : state.getIn(['settings', 'public', 'other', 'allowLocalOnly']);\n  const regex = (columnId && index >= 0) ? columns.get(index).getIn(['params', 'regex', 'body']) : state.getIn(['settings', 'public', 'regex', 'body']);\n  const timelineState = state.getIn(['timelines', `public${onlyMedia ? ':media' : ''}`]);\n\n  return {\n    hasUnread: !!timelineState && timelineState.get('unread') > 0,\n    onlyMedia,\n    onlyRemote,\n    allowLocalOnly,\n    regex,\n  };\n};\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass PublicTimeline extends React.PureComponent {\n\n  static defaultProps = {\n    onlyMedia: false,\n  };\n\n  static contextTypes = {\n    router: PropTypes.object,\n    identity: PropTypes.object,\n  };\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    columnId: PropTypes.string,\n    multiColumn: PropTypes.bool,\n    hasUnread: PropTypes.bool,\n    onlyMedia: PropTypes.bool,\n    onlyRemote: PropTypes.bool,\n    allowLocalOnly: PropTypes.bool,\n    regex: PropTypes.string,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch, onlyMedia, onlyRemote, allowLocalOnly } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn(onlyRemote ? 'REMOTE' : 'PUBLIC', { other: { onlyMedia, onlyRemote, allowLocalOnly } }));\n    }\n  };\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  };\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  };\n\n  componentDidMount () {\n    const { dispatch, onlyMedia, onlyRemote, allowLocalOnly } = this.props;\n    const { signedIn } = this.context.identity;\n\n    dispatch(expandPublicTimeline({ onlyMedia, onlyRemote, allowLocalOnly }));\n    if (signedIn) {\n      this.disconnect = dispatch(connectPublicStream({ onlyMedia, onlyRemote, allowLocalOnly }));\n    }\n  }\n\n  componentDidUpdate (prevProps) {\n    const { signedIn } = this.context.identity;\n\n    if (prevProps.onlyMedia !== this.props.onlyMedia || prevProps.onlyRemote !== this.props.onlyRemote || prevProps.allowLocalOnly !== this.props.allowLocalOnly) {\n      const { dispatch, onlyMedia, onlyRemote, allowLocalOnly } = this.props;\n\n      if (this.disconnect) {\n        this.disconnect();\n      }\n\n      dispatch(expandPublicTimeline({ onlyMedia, onlyRemote, allowLocalOnly }));\n\n      if (signedIn) {\n        this.disconnect = dispatch(connectPublicStream({ onlyMedia, onlyRemote, allowLocalOnly }));\n      }\n    }\n  }\n\n  componentWillUnmount () {\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  setRef = c => {\n    this.column = c;\n  };\n\n  handleLoadMore = maxId => {\n    const { dispatch, onlyMedia, onlyRemote, allowLocalOnly } = this.props;\n\n    dispatch(expandPublicTimeline({ maxId, onlyMedia, onlyRemote, allowLocalOnly }));\n  };\n\n  render () {\n    const { intl, columnId, hasUnread, multiColumn, onlyMedia, onlyRemote, allowLocalOnly } = this.props;\n    const pinned = !!columnId;\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} name='federated' label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='globe'\n          active={hasUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n        >\n          <ColumnSettingsContainer columnId={columnId} />\n        </ColumnHeader>\n\n        <DismissableBanner id='public_timeline'>\n          <FormattedMessage id='dismissable_banner.public_timeline' defaultMessage='These are the most recent public posts from people on this and other servers of the decentralized network that this server knows about.' />\n        </DismissableBanner>\n\n        <StatusListContainer\n          timelineId={`public${onlyRemote ? ':remote' : (allowLocalOnly ? ':allow_local_only' : '')}${onlyMedia ? ':media' : ''}`}\n          onLoadMore={this.handleLoadMore}\n          trackScroll={!pinned}\n          scrollKey={`public_timeline-${columnId}`}\n          emptyMessage={<FormattedMessage id='empty_column.public' defaultMessage='There is nothing here! Write something publicly, or manually follow users from other servers to fill it up' />}\n          bindToDocument={!multiColumn}\n          regex={this.props.regex}\n        />\n\n        <Helmet>\n          <title>{intl.formatMessage(messages.title)}</title>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}