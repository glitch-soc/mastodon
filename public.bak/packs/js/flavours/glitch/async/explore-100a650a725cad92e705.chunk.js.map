{"version":3,"sources":["webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/explore/components/story.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/explore/links.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/explore/tags.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/explore/statuses.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/explore/suggestions.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/explore/results.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/explore/index.jsx"],"names":["Story","React","PureComponent","constructor","arguments","state","thumbnailLoaded","handleImageLoad","this","setState","render","url","title","publisher","sharedTimes","thumbnail","blurhash","props","_jsx","className","href","target","rel","Skeleton","width","ShortNumber","value","renderer","accountsCountRenderer","Fragment","classNames","Blurhash","hash","src","onLoad","alt","role","Links","connect","links","getIn","isLoading","_dec","_class","componentDidMount","dispatch","fetchTrendingLinks","banner","DismissableBanner","id","FormattedMessage","defaultMessage","isEmpty","LoadingIndicator","map","link","get","Tags","hashtags","isLoadingHashtags","fetchTrendingHashtags","hashtag","Hashtag","Statuses","statusIds","hasMore","handleLoadMore","_debounce","expandTrendingStatuses","leading","fetchTrendingStatuses","multiColumn","emptyMessage","createElement","StatusList","trackScroll","scrollKey","onLoadMore","bindToDocument","withCounters","Suggestions","suggestions","handleDismiss","accountId","dismissSuggestion","fetchSuggestions","suggestion","AccountCard","onDismiss","messages","defineMessages","appendLoadMore","list","size","push","LoadMore","visible","onClick","renderAccounts","results","ImmutableList","item","Account","renderHashtags","renderStatuses","Status","Results","q","injectIntl","type","handleSelectAll","handleSelectAccounts","handleSelectHashtags","handleSelectStatuses","handleLoadMoreAccounts","loadMore","handleLoadMoreStatuses","handleLoadMoreHashtags","expandSearch","intl","filteredResults","concat","Helmet","formatMessage","searchResults","Explore","layout","isSearching","showTrends","_class2","handleHeaderClick","column","scrollTop","setRef","c","signedIn","context","identity","Column","ref","label","ColumnHeader","icon","Search","SearchResults","NavLink","exact","to","tagName","Switch","Route","path","component","componentParams","name","content","contextTypes","router","PropTypes","object"],"mappings":"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","file":"js/flavours/glitch/async/explore-100a650a725cad92e705.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Blurhash from 'flavours/glitch/components/blurhash';\nimport { accountsCountRenderer } from 'flavours/glitch/components/hashtag';\nimport ShortNumber from 'flavours/glitch/components/short_number';\nimport Skeleton from 'flavours/glitch/components/skeleton';\nimport classNames from 'classnames';\n\nexport default class Story extends React.PureComponent {\n\n  static propTypes = {\n    url: PropTypes.string,\n    title: PropTypes.string,\n    publisher: PropTypes.string,\n    sharedTimes: PropTypes.number,\n    thumbnail: PropTypes.string,\n    blurhash: PropTypes.string,\n  };\n\n  state = {\n    thumbnailLoaded: false,\n  };\n\n  handleImageLoad = () => this.setState({ thumbnailLoaded: true });\n\n  render () {\n    const { url, title, publisher, sharedTimes, thumbnail, blurhash } = this.props;\n\n    const { thumbnailLoaded } = this.state;\n\n    return (\n      <a className='story' href={url} target='blank' rel='noopener'>\n        <div className='story__details'>\n          <div className='story__details__publisher'>{publisher ? publisher : <Skeleton width={50} />}</div>\n          <div className='story__details__title'>{title ? title : <Skeleton />}</div>\n          <div className='story__details__shared'>{typeof sharedTimes === 'number' ? <ShortNumber value={sharedTimes} renderer={accountsCountRenderer} /> : <Skeleton width={100} />}</div>\n        </div>\n\n        <div className='story__thumbnail'>\n          {thumbnail ? (\n            <React.Fragment>\n              <div className={classNames('story__thumbnail__preview', { 'story__thumbnail__preview--hidden': thumbnailLoaded })}><Blurhash hash={blurhash} /></div>\n              <img src={thumbnail} onLoad={this.handleImageLoad} alt='' role='presentation' />\n            </React.Fragment>\n          ) : <Skeleton />}\n        </div>\n      </a>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport Story from './components/story';\nimport LoadingIndicator from 'flavours/glitch/components/loading_indicator';\nimport { connect } from 'react-redux';\nimport { fetchTrendingLinks } from 'flavours/glitch/actions/trends';\nimport { FormattedMessage } from 'react-intl';\nimport DismissableBanner from 'flavours/glitch/components/dismissable_banner';\n\nconst mapStateToProps = state => ({\n  links: state.getIn(['trends', 'links', 'items']),\n  isLoading: state.getIn(['trends', 'links', 'isLoading']),\n});\n\nexport default @connect(mapStateToProps)\nclass Links extends React.PureComponent {\n\n  static propTypes = {\n    links: ImmutablePropTypes.list,\n    isLoading: PropTypes.bool,\n    dispatch: PropTypes.func.isRequired,\n  };\n\n  componentDidMount () {\n    const { dispatch } = this.props;\n    dispatch(fetchTrendingLinks());\n  }\n\n  render () {\n    const { isLoading, links } = this.props;\n\n    const banner = (\n      <DismissableBanner id='explore/links'>\n        <FormattedMessage id='dismissable_banner.explore_links' defaultMessage='These news stories are being talked about by people on this and other servers of the decentralized network right now.' />\n      </DismissableBanner>\n    );\n\n    if (!isLoading && links.isEmpty()) {\n      return (\n        <div className='explore__links scrollable scrollable--flex'>\n          {banner}\n\n          <div className='empty-column-indicator'>\n            <FormattedMessage id='empty_column.explore_statuses' defaultMessage='Nothing is trending right now. Check back later!' />\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className='explore__links'>\n        {banner}\n\n        {isLoading ? (<LoadingIndicator />) : links.map(link => (\n          <Story\n            key={link.get('id')}\n            url={link.get('url')}\n            title={link.get('title')}\n            publisher={link.get('provider_name')}\n            sharedTimes={link.getIn(['history', 0, 'accounts']) * 1 + link.getIn(['history', 1, 'accounts']) * 1}\n            thumbnail={link.get('image')}\n            blurhash={link.get('blurhash')}\n          />\n        ))}\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { ImmutableHashtag as Hashtag } from 'flavours/glitch/components/hashtag';\nimport LoadingIndicator from 'flavours/glitch/components/loading_indicator';\nimport { connect } from 'react-redux';\nimport { fetchTrendingHashtags } from 'flavours/glitch/actions/trends';\nimport { FormattedMessage } from 'react-intl';\nimport DismissableBanner from 'flavours/glitch/components/dismissable_banner';\n\nconst mapStateToProps = state => ({\n  hashtags: state.getIn(['trends', 'tags', 'items']),\n  isLoadingHashtags: state.getIn(['trends', 'tags', 'isLoading']),\n});\n\nexport default @connect(mapStateToProps)\nclass Tags extends React.PureComponent {\n\n  static propTypes = {\n    hashtags: ImmutablePropTypes.list,\n    isLoading: PropTypes.bool,\n    dispatch: PropTypes.func.isRequired,\n  };\n\n  componentDidMount () {\n    const { dispatch } = this.props;\n    dispatch(fetchTrendingHashtags());\n  }\n\n  render () {\n    const { isLoading, hashtags } = this.props;\n\n    const banner = (\n      <DismissableBanner id='explore/tags'>\n        <FormattedMessage id='dismissable_banner.explore_tags' defaultMessage='These hashtags are gaining traction among people on this and other servers of the decentralized network right now.' />\n      </DismissableBanner>\n    );\n\n    if (!isLoading && hashtags.isEmpty()) {\n      return (\n        <div className='explore__links scrollable scrollable--flex'>\n          {banner}\n\n          <div className='empty-column-indicator'>\n            <FormattedMessage id='empty_column.explore_statuses' defaultMessage='Nothing is trending right now. Check back later!' />\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className='explore__links'>\n        {banner}\n\n        {isLoading ? (<LoadingIndicator />) : hashtags.map(hashtag => (\n          <Hashtag key={hashtag.get('name')} hashtag={hashtag} />\n        ))}\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport StatusList from 'flavours/glitch/components/status_list';\nimport { FormattedMessage } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { fetchTrendingStatuses, expandTrendingStatuses } from 'flavours/glitch/actions/trends';\nimport { debounce } from 'lodash';\nimport DismissableBanner from 'flavours/glitch/components/dismissable_banner';\n\nconst mapStateToProps = state => ({\n  statusIds: state.getIn(['status_lists', 'trending', 'items']),\n  isLoading: state.getIn(['status_lists', 'trending', 'isLoading'], true),\n  hasMore: !!state.getIn(['status_lists', 'trending', 'next']),\n});\n\nexport default @connect(mapStateToProps)\nclass Statuses extends React.PureComponent {\n\n  static propTypes = {\n    statusIds: ImmutablePropTypes.list,\n    isLoading: PropTypes.bool,\n    hasMore: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    dispatch: PropTypes.func.isRequired,\n  };\n\n  componentDidMount () {\n    const { dispatch } = this.props;\n    dispatch(fetchTrendingStatuses());\n  }\n\n  handleLoadMore = debounce(() => {\n    const { dispatch } = this.props;\n    dispatch(expandTrendingStatuses());\n  }, 300, { leading: true });\n\n  render () {\n    const { isLoading, hasMore, statusIds, multiColumn } = this.props;\n\n    const emptyMessage = <FormattedMessage id='empty_column.explore_statuses' defaultMessage='Nothing is trending right now. Check back later!' />;\n\n    return (\n      <>\n        <DismissableBanner id='explore/statuses'>\n          <FormattedMessage id='dismissable_banner.explore_statuses' defaultMessage='These posts from this and other servers in the decentralized network are gaining traction on this server right now.' />\n        </DismissableBanner>\n\n        <StatusList\n          trackScroll\n          statusIds={statusIds}\n          scrollKey='explore-statuses'\n          hasMore={hasMore}\n          isLoading={isLoading}\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n          withCounters\n        />\n      </>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport AccountCard from 'flavours/glitch/features/directory/components/account_card';\nimport LoadingIndicator from 'flavours/glitch/components/loading_indicator';\nimport { connect } from 'react-redux';\nimport { fetchSuggestions, dismissSuggestion } from 'flavours/glitch/actions/suggestions';\nimport { FormattedMessage } from 'react-intl';\n\nconst mapStateToProps = state => ({\n  suggestions: state.getIn(['suggestions', 'items']),\n  isLoading: state.getIn(['suggestions', 'isLoading']),\n});\n\nexport default @connect(mapStateToProps)\nclass Suggestions extends React.PureComponent {\n\n  static propTypes = {\n    isLoading: PropTypes.bool,\n    suggestions: ImmutablePropTypes.list,\n    dispatch: PropTypes.func.isRequired,\n  };\n\n  componentDidMount () {\n    const { dispatch } = this.props;\n    dispatch(fetchSuggestions(true));\n  }\n\n  handleDismiss = (accountId) => {\n    const { dispatch } = this.props;\n    dispatch(dismissSuggestion(accountId));\n  };\n\n  render () {\n    const { isLoading, suggestions } = this.props;\n\n    if (!isLoading && suggestions.isEmpty()) {\n      return (\n        <div className='explore__suggestions scrollable scrollable--flex'>\n          <div className='empty-column-indicator'>\n            <FormattedMessage id='empty_column.explore_statuses' defaultMessage='Nothing is trending right now. Check back later!' />\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className='explore__suggestions'>\n        {isLoading ? <LoadingIndicator /> : suggestions.map(suggestion => (\n          <AccountCard key={suggestion.get('account')} id={suggestion.get('account')} onDismiss={suggestion.get('source') === 'past_interactions' ? this.handleDismiss : null} />\n        ))}\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { injectIntl, defineMessages, FormattedMessage } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { expandSearch } from 'flavours/glitch/actions/search';\nimport Account from 'flavours/glitch/containers/account_container';\nimport Status from 'flavours/glitch/containers/status_container';\nimport { ImmutableHashtag as Hashtag } from 'flavours/glitch/components/hashtag';\nimport { List as ImmutableList } from 'immutable';\nimport LoadMore from 'flavours/glitch/components/load_more';\nimport LoadingIndicator from 'flavours/glitch/components/loading_indicator';\nimport { Helmet } from 'react-helmet';\n\nconst messages = defineMessages({\n  title: { id: 'search_results.title', defaultMessage: 'Search for {q}' },\n});\n\nconst mapStateToProps = state => ({\n  isLoading: state.getIn(['search', 'isLoading']),\n  results: state.getIn(['search', 'results']),\n  q: state.getIn(['search', 'searchTerm']),\n});\n\nconst appendLoadMore = (id, list, onLoadMore) => {\n  if (list.size >= 5) {\n    return list.push(<LoadMore key={`${id}-load-more`} visible onClick={onLoadMore} />);\n  } else {\n    return list;\n  }\n};\n\nconst renderAccounts = (results, onLoadMore) => appendLoadMore('accounts', results.get('accounts', ImmutableList()).map(item => (\n  <Account key={`account-${item}`} id={item} />\n)), onLoadMore);\n\nconst renderHashtags = (results, onLoadMore) => appendLoadMore('hashtags', results.get('hashtags', ImmutableList()).map(item => (\n  <Hashtag key={`tag-${item.get('name')}`} hashtag={item} />\n)), onLoadMore);\n\nconst renderStatuses = (results, onLoadMore) => appendLoadMore('statuses', results.get('statuses', ImmutableList()).map(item => (\n  <Status key={`status-${item}`} id={item} />\n)), onLoadMore);\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass Results extends React.PureComponent {\n\n  static propTypes = {\n    results: ImmutablePropTypes.map,\n    isLoading: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    dispatch: PropTypes.func.isRequired,\n    q: PropTypes.string,\n    intl: PropTypes.object,\n  };\n\n  state = {\n    type: 'all',\n  };\n\n  handleSelectAll = () => this.setState({ type: 'all' });\n  handleSelectAccounts = () => this.setState({ type: 'accounts' });\n  handleSelectHashtags = () => this.setState({ type: 'hashtags' });\n  handleSelectStatuses = () => this.setState({ type: 'statuses' });\n  handleLoadMoreAccounts = () => this.loadMore('accounts');\n  handleLoadMoreStatuses = () => this.loadMore('statuses');\n  handleLoadMoreHashtags = () => this.loadMore('hashtags');\n\n  loadMore (type) {\n    const { dispatch } = this.props;\n    dispatch(expandSearch(type));\n  }\n\n  render () {\n    const { intl, isLoading, q, results } = this.props;\n    const { type } = this.state;\n\n    let filteredResults = ImmutableList();\n\n    if (!isLoading) {\n      switch(type) {\n      case 'all':\n        filteredResults = filteredResults.concat(renderAccounts(results, this.handleLoadMoreAccounts), renderHashtags(results, this.handleLoadMoreHashtags), renderStatuses(results, this.handleLoadMoreStatuses));\n        break;\n      case 'accounts':\n        filteredResults = filteredResults.concat(renderAccounts(results, this.handleLoadMoreAccounts));\n        break;\n      case 'hashtags':\n        filteredResults = filteredResults.concat(renderHashtags(results, this.handleLoadMoreHashtags));\n        break;\n      case 'statuses':\n        filteredResults = filteredResults.concat(renderStatuses(results, this.handleLoadMoreStatuses));\n        break;\n      }\n\n      if (filteredResults.size === 0) {\n        filteredResults = (\n          <div className='empty-column-indicator'>\n            <FormattedMessage id='search_results.nothing_found' defaultMessage='Could not find anything for these search terms' />\n          </div>\n        );\n      }\n    }\n\n    return (\n      <React.Fragment>\n        <div className='account__section-headline'>\n          <button onClick={this.handleSelectAll} className={type === 'all' && 'active'}><FormattedMessage id='search_results.all' defaultMessage='All' /></button>\n          <button onClick={this.handleSelectAccounts} className={type === 'accounts' && 'active'}><FormattedMessage id='search_results.accounts' defaultMessage='People' /></button>\n          <button onClick={this.handleSelectHashtags} className={type === 'hashtags' && 'active'}><FormattedMessage id='search_results.hashtags' defaultMessage='Hashtags' /></button>\n          <button onClick={this.handleSelectStatuses} className={type === 'statuses' && 'active'}><FormattedMessage id='search_results.statuses' defaultMessage='Toots' /></button>\n        </div>\n\n        <div className='explore__search-results'>\n          {isLoading ? <LoadingIndicator /> : filteredResults}\n        </div>\n\n        <Helmet>\n          <title>{intl.formatMessage(messages.title, { q })}</title>\n        </Helmet>\n      </React.Fragment>\n    );\n  }\n\n}\n","import React from 'react';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Column from 'flavours/glitch/components/column';\nimport ColumnHeader from 'flavours/glitch/components/column_header';\nimport { NavLink, Switch, Route } from 'react-router-dom';\nimport Links from './links';\nimport Tags from './tags';\nimport Statuses from './statuses';\nimport Suggestions from './suggestions';\nimport Search from 'flavours/glitch/features/compose/containers/search_container';\nimport SearchResults from './results';\nimport { showTrends } from 'flavours/glitch/initial_state';\nimport { Helmet } from 'react-helmet';\n\nconst messages = defineMessages({\n  title: { id: 'explore.title', defaultMessage: 'Explore' },\n  searchResults: { id: 'explore.search_results', defaultMessage: 'Search results' },\n});\n\nconst mapStateToProps = state => ({\n  layout: state.getIn(['meta', 'layout']),\n  isSearching: state.getIn(['search', 'submitted']) || !showTrends,\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass Explore extends React.PureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n    identity: PropTypes.object,\n  };\n\n  static propTypes = {\n    intl: PropTypes.object.isRequired,\n    multiColumn: PropTypes.bool,\n    isSearching: PropTypes.bool,\n  };\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  };\n\n  setRef = c => {\n    this.column = c;\n  };\n\n  render() {\n    const { intl, multiColumn, isSearching } = this.props;\n    const { signedIn } = this.context.identity;\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon={isSearching ? 'search' : 'hashtag'}\n          title={intl.formatMessage(isSearching ? messages.searchResults : messages.title)}\n          onClick={this.handleHeaderClick}\n          multiColumn={multiColumn}\n        />\n\n        <div className='explore__search-header'>\n          <Search />\n        </div>\n\n        <div className='scrollable scrollable--flex'>\n          {isSearching ? (\n            <SearchResults />\n          ) : (\n            <>\n              <div className='account__section-headline'>\n                <NavLink exact to='/explore'>\n                  <FormattedMessage tagName='div' id='explore.trending_statuses' defaultMessage='Posts' />\n                </NavLink>\n                <NavLink exact to='/explore/tags'>\n                  <FormattedMessage tagName='div' id='explore.trending_tags' defaultMessage='Hashtags' />\n                </NavLink>\n                <NavLink exact to='/explore/links'>\n                  <FormattedMessage tagName='div' id='explore.trending_links' defaultMessage='News' />\n                </NavLink>\n                {signedIn && (\n                  <NavLink exact to='/explore/suggestions'>\n                    <FormattedMessage tagName='div' id='explore.suggested_follows' defaultMessage='For you' />\n                  </NavLink>\n                )}\n              </div>\n\n              <Switch>\n                <Route path='/explore/tags' component={Tags} />\n                <Route path='/explore/links' component={Links} />\n                <Route path='/explore/suggestions' component={Suggestions} />\n                <Route exact path={['/explore', '/explore/posts', '/search']} component={Statuses} componentParams={{ multiColumn }} />\n              </Switch>\n\n              <Helmet>\n                <title>{intl.formatMessage(messages.title)}</title>\n                <meta name='robots' content={isSearching ? 'noindex' : 'all'} />\n              </Helmet>\n            </>\n          )}\n        </div>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}