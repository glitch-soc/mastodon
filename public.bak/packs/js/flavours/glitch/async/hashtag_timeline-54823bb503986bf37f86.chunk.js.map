{"version":3,"sources":["webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/hashtag_timeline/components/column_settings.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/hashtag_timeline/containers/column_settings_container.js","webpack:///app/javascript/home/mastodon/live/app/javascript/flavours/glitch/features/hashtag_timeline/index.jsx"],"names":["messages","defineMessages","placeholder","noOptions","ColumnSettings","injectIntl","_class","React","PureComponent","constructor","arguments","state","open","this","hasTags","onSelect","mode","value","oldValue","tags","length","props","onChange","onToggle","setState","noOptionsMessage","intl","formatMessage","map","includes","settings","getIn","toJS","modeSelect","_jsx","className","modeLabel","NonceProvider","nonce","document","querySelector","content","cacheKey","AsyncSelect","isMulti","autoFocus","loadOptions","onLoad","classNamePrefix","name","FormattedMessage","id","defaultMessage","render","Toggle","checked","SettingToggle","settingPath","label","connect","mapStateToProps","_ref","columnId","columns","index","findIndex","c","get","api","params","q","type","then","response","data","hashtags","tag","mapDispatchToProps","dispatch","_ref2","key","changeColumnParams","followHashtag","unfollowHashtag","HashtagTimeline","hasUnread","local","_dec","_class2","disconnects","handlePin","removeColumn","addColumn","title","additionalFor","push","values","additional","join","handleMove","dir","moveColumn","handleHeaderClick","column","scrollTop","setRef","handleLoadMore","maxId","expandHashtagTimeline","handleFollow","signedIn","context","identity","_subscribe","any","all","none","connectHashtagStream","status","filter","_unsubscribe","disconnect","_unload","clearTimeline","_load","fetchHashtag","componentDidMount","componentDidUpdate","prevProps","_isEqual","componentWillUnmount","multiColumn","pinned","followButton","following","classNames","onClick","disabled","active","Icon","fixedWidth","createElement","Column","bindToDocument","ref","ColumnHeader","icon","onPin","onMove","extraButton","showBackButton","ColumnSettingsContainer","StatusListContainer","trackScroll","scrollKey","timelineId","onLoadMore","emptyMessage","Helmet","contextTypes","PropTypes","object"],"mappings":"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","file":"js/flavours/glitch/async/hashtag_timeline-54823bb503986bf37f86.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport Toggle from 'react-toggle';\nimport AsyncSelect from 'react-select/async';\nimport { NonceProvider } from 'react-select';\nimport SettingToggle from '../../notifications/components/setting_toggle';\n\nconst messages = defineMessages({\n  placeholder: { id: 'hashtag.column_settings.select.placeholder', defaultMessage: 'Enter hashtagsâ€¦' },\n  noOptions: { id: 'hashtag.column_settings.select.no_options_message', defaultMessage: 'No suggestions found' },\n});\n\nexport default @injectIntl\nclass ColumnSettings extends React.PureComponent {\n\n  static propTypes = {\n    settings: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    onLoad: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  state = {\n    open: this.hasTags(),\n  };\n\n  hasTags () {\n    return ['all', 'any', 'none'].map(mode => this.tags(mode).length > 0).includes(true);\n  }\n\n  tags (mode) {\n    let tags = this.props.settings.getIn(['tags', mode]) || [];\n\n    if (tags.toJS) {\n      return tags.toJS();\n    } else {\n      return tags;\n    }\n  }\n\n  onSelect = mode => value => {\n    const oldValue = this.tags(mode);\n\n    // Prevent changes that add more than 4 tags, but allow removing\n    // tags that were already added before\n    if ((value.length > 4) && !(value < oldValue)) {\n      return;\n    }\n\n    this.props.onChange(['tags', mode], value);\n  };\n\n  onToggle = () => {\n    if (this.state.open && this.hasTags()) {\n      this.props.onChange('tags', {});\n    }\n\n    this.setState({ open: !this.state.open });\n  };\n\n  noOptionsMessage = () => this.props.intl.formatMessage(messages.noOptions);\n\n  modeSelect (mode) {\n    return (\n      <div className='column-settings__row'>\n        <span className='column-settings__section'>\n          {this.modeLabel(mode)}\n        </span>\n\n        <NonceProvider nonce={document.querySelector('meta[name=style-nonce]').content} cacheKey='tags'>\n          <AsyncSelect\n            isMulti\n            autoFocus\n            value={this.tags(mode)}\n            onChange={this.onSelect(mode)}\n            loadOptions={this.props.onLoad}\n            className='column-select__container'\n            classNamePrefix='column-select'\n            name='tags'\n            placeholder={this.props.intl.formatMessage(messages.placeholder)}\n            noOptionsMessage={this.noOptionsMessage}\n          />\n        </NonceProvider>\n      </div>\n    );\n  }\n\n  modeLabel (mode) {\n    switch(mode) {\n    case 'any':\n      return <FormattedMessage id='hashtag.column_settings.tag_mode.any' defaultMessage='Any of these' />;\n    case 'all':\n      return <FormattedMessage id='hashtag.column_settings.tag_mode.all' defaultMessage='All of these' />;\n    case 'none':\n      return <FormattedMessage id='hashtag.column_settings.tag_mode.none' defaultMessage='None of these' />;\n    default:\n      return '';\n    }\n  }\n\n  render () {\n    const { settings, onChange } = this.props;\n\n    return (\n      <div>\n        <div className='column-settings__row'>\n          <div className='setting-toggle'>\n            <Toggle id='hashtag.column_settings.tag_toggle' onChange={this.onToggle} checked={this.state.open} />\n\n            <span className='setting-toggle__label'>\n              <FormattedMessage id='hashtag.column_settings.tag_toggle' defaultMessage='Include additional tags in this column' />\n            </span>\n          </div>\n        </div>\n\n        {this.state.open && (\n          <div className='column-settings__hashtags'>\n            {this.modeSelect('any')}\n            {this.modeSelect('all')}\n            {this.modeSelect('none')}\n          </div>\n        )}\n\n        <div className='column-settings__row'>\n          <SettingToggle settings={settings} settingPath={['local']} onChange={onChange} label={<FormattedMessage id='community.column_settings.local_only' defaultMessage='Local only' />} />\n        </div>\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport ColumnSettings from '../components/column_settings';\nimport { changeColumnParams } from 'flavours/glitch/actions/columns';\nimport api from 'flavours/glitch/api';\n\nconst mapStateToProps = (state, { columnId }) => {\n  const columns = state.getIn(['settings', 'columns']);\n  const index   = columns.findIndex(c => c.get('uuid') === columnId);\n\n  if (!(columnId && index >= 0)) {\n    return {};\n  }\n\n  return {\n    settings: columns.get(index).get('params'),\n    onLoad (value) {\n      return api(() => state).get('/api/v2/search', { params: { q: value, type: 'hashtags' } }).then(response => {\n        return (response.data.hashtags || []).map((tag) => {\n          return { value: tag.name, label: `#${tag.name}` };\n        });\n      });\n    },\n  };\n};\n\nconst mapDispatchToProps = (dispatch, { columnId }) => ({\n  onChange (key, value) {\n    dispatch(changeColumnParams(columnId, key, value));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ColumnSettings);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport StatusListContainer from 'flavours/glitch/features/ui/containers/status_list_container';\nimport Column from 'flavours/glitch/components/column';\nimport ColumnHeader from 'flavours/glitch/components/column_header';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ColumnSettingsContainer from './containers/column_settings_container';\nimport { expandHashtagTimeline, clearTimeline } from 'flavours/glitch/actions/timelines';\nimport { addColumn, removeColumn, moveColumn } from 'flavours/glitch/actions/columns';\nimport { connectHashtagStream } from 'flavours/glitch/actions/streaming';\nimport { injectIntl, FormattedMessage, defineMessages } from 'react-intl';\nimport { isEqual } from 'lodash';\nimport { fetchHashtag, followHashtag, unfollowHashtag } from 'flavours/glitch/actions/tags';\nimport Icon from 'flavours/glitch/components/icon';\nimport classNames from 'classnames';\nimport { Helmet } from 'react-helmet';\n\nconst messages = defineMessages({\n  followHashtag: { id: 'hashtag.follow', defaultMessage: 'Follow hashtag' },\n  unfollowHashtag: { id: 'hashtag.unfollow', defaultMessage: 'Unfollow hashtag' },\n});\n\nconst mapStateToProps = (state, props) => ({\n  hasUnread: state.getIn(['timelines', `hashtag:${props.params.id}${props.params.local ? ':local' : ''}`, 'unread']) > 0,\n  tag: state.getIn(['tags', props.params.id]),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass HashtagTimeline extends React.PureComponent {\n\n  disconnects = [];\n\n  static contextTypes = {\n    identity: PropTypes.object,\n  };\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    columnId: PropTypes.string,\n    dispatch: PropTypes.func.isRequired,\n    hasUnread: PropTypes.bool,\n    tag: ImmutablePropTypes.map,\n    multiColumn: PropTypes.bool,\n    intl: PropTypes.object,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('HASHTAG', { id: this.props.params.id }));\n    }\n  };\n\n  title = () => {\n    const { id } = this.props.params;\n    const title  = [id];\n\n    if (this.additionalFor('any')) {\n      title.push(' ', <FormattedMessage key='any' id='hashtag.column_header.tag_mode.any'  values={{ additional: this.additionalFor('any') }} defaultMessage='or {additional}' />);\n    }\n\n    if (this.additionalFor('all')) {\n      title.push(' ', <FormattedMessage key='all' id='hashtag.column_header.tag_mode.all'  values={{ additional: this.additionalFor('all') }} defaultMessage='and {additional}' />);\n    }\n\n    if (this.additionalFor('none')) {\n      title.push(' ', <FormattedMessage key='none' id='hashtag.column_header.tag_mode.none' values={{ additional: this.additionalFor('none') }} defaultMessage='without {additional}' />);\n    }\n\n    return title;\n  };\n\n  additionalFor = (mode) => {\n    const { tags } = this.props.params;\n\n    if (tags && (tags[mode] || []).length > 0) {\n      return tags[mode].map(tag => tag.value).join('/');\n    } else {\n      return '';\n    }\n  };\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  };\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  };\n\n  _subscribe (dispatch, id, tags = {}, local) {\n    const { signedIn } = this.context.identity;\n\n    if (!signedIn) {\n      return;\n    }\n\n    let any  = (tags.any || []).map(tag => tag.value);\n    let all  = (tags.all || []).map(tag => tag.value);\n    let none = (tags.none || []).map(tag => tag.value);\n\n    [id, ...any].map(tag => {\n      this.disconnects.push(dispatch(connectHashtagStream(id, tag, local, status => {\n        let tags = status.tags.map(tag => tag.name);\n\n        return all.filter(tag => tags.includes(tag)).length === all.length &&\n               none.filter(tag => tags.includes(tag)).length === 0;\n      })));\n    });\n  }\n\n  _unsubscribe () {\n    this.disconnects.map(disconnect => disconnect());\n    this.disconnects = [];\n  }\n\n  _unload () {\n    const { dispatch } = this.props;\n    const { id, local } = this.props.params;\n\n    this._unsubscribe();\n    dispatch(clearTimeline(`hashtag:${id}${local ? ':local' : ''}`));\n  }\n\n  _load() {\n    const { dispatch } = this.props;\n    const { id, tags, local } = this.props.params;\n\n    this._subscribe(dispatch, id, tags, local);\n    dispatch(expandHashtagTimeline(id, { tags, local }));\n    dispatch(fetchHashtag(id));\n  }\n\n  componentDidMount () {\n    this._load();\n  }\n\n  componentDidUpdate (prevProps) {\n    const { params } = this.props;\n    const { id, tags, local } = prevProps.params;\n\n    if (id !== params.id || !isEqual(tags, params.tags) || !isEqual(local, params.local)) {\n      this._unload();\n      this._load();\n    }\n  }\n\n  componentWillUnmount () {\n    this._unsubscribe();\n  }\n\n  setRef = c => {\n    this.column = c;\n  };\n\n  handleLoadMore = maxId => {\n    const { dispatch, params } = this.props;\n    const { id, tags, local }  = params;\n\n    dispatch(expandHashtagTimeline(id, { maxId, tags, local }));\n  };\n\n  handleFollow = () => {\n    const { dispatch, params, tag } = this.props;\n    const { id } = params;\n    const { signedIn } = this.context.identity;\n\n    if (!signedIn) {\n      return;\n    }\n\n    if (tag.get('following')) {\n      dispatch(unfollowHashtag(id));\n    } else {\n      dispatch(followHashtag(id));\n    }\n  };\n\n  render () {\n    const { hasUnread, columnId, multiColumn, tag, intl } = this.props;\n    const { id, local } = this.props.params;\n    const pinned = !!columnId;\n    const { signedIn } = this.context.identity;\n\n    let followButton;\n\n    if (tag) {\n      const following = tag.get('following');\n\n      followButton = (\n        <button className={classNames('column-header__button')} onClick={this.handleFollow} disabled={!signedIn} active={following} title={intl.formatMessage(following ? messages.unfollowHashtag : messages.followHashtag)} aria-label={intl.formatMessage(following ? messages.unfollowHashtag : messages.followHashtag)}>\n          <Icon id={following ? 'user-times' : 'user-plus'} fixedWidth className='column-header__icon' />\n        </button>\n      );\n    }\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={`#${id}`}>\n        <ColumnHeader\n          icon='hashtag'\n          active={hasUnread}\n          title={this.title()}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n          extraButton={followButton}\n          showBackButton\n        >\n          {columnId && <ColumnSettingsContainer columnId={columnId} />}\n        </ColumnHeader>\n\n        <StatusListContainer\n          trackScroll={!pinned}\n          scrollKey={`hashtag_timeline-${columnId}`}\n          timelineId={`hashtag:${id}${local ? ':local' : ''}`}\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={<FormattedMessage id='empty_column.hashtag' defaultMessage='There is nothing in this hashtag yet.' />}\n          bindToDocument={!multiColumn}\n        />\n\n        <Helmet>\n          <title>#{id}</title>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}