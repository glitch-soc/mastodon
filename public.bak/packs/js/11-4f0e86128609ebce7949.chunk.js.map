{"version":3,"sources":["webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/components/admin/Retention.js"],"names":["Retention","React","PureComponent","state","loading","data","componentDidMount","start_at","end_at","frequency","this","props","api","post","then","res","setState","catch","err","console","error","render","content","id","defaultMessage","className","slice","map","retention","i","date","value","reduce","sum","cohort","maximumFractionDigits","average","k","rate","classNames","roundTo10","style","period","month","day","year","dateForCohort","title"],"mappings":"6MAgBe,MAAMA,UAAkBC,IAAMC,cAAe,cAAD,yBAQzDC,MAAQ,CACNC,SAAS,EACTC,KAAM,MAGRC,oBACE,MAAM,SAAEC,EAAQ,OAAEC,EAAM,UAAEC,GAAcC,KAAKC,MAE7CC,cAAMC,KAAK,0BAA2B,CAAEN,WAAUC,SAAQC,cAAaK,MAAKC,IAC1EL,KAAKM,SAAS,CACZZ,SAAS,EACTC,KAAMU,EAAIV,UAEXY,OAAMC,IACPC,QAAQC,MAAMF,MAIlBG,SACE,MAAM,QAAEjB,EAAO,KAAEC,GAASK,KAAKP,OACzB,UAAEM,GAAcC,KAAKC,MAE3B,IAAIW,EAGFA,EADElB,EACQ,YAAC,IAAgB,CAACmB,GAAG,0BAA0BC,eAAe,eAGtE,qBAAOC,UAAU,yBAAkB,EACjC,8BACE,2BACE,2BACE,mBAAKA,UAAU,uDAAgD,EAC7D,YAAC,IAAgB,CAACF,GAAG,mCAAmCC,eAAe,oBAI3E,2BACE,mBAAKC,UAAU,yDAAkD,EAC/D,YAAC,IAAgB,CAACF,GAAG,wCAAwCC,eAAe,gBAI/EnB,EAAK,GAAGA,KAAKqB,MAAM,GAAGC,KAAI,CAACC,EAAWC,IACrC,oBAASD,EAAUE,KACjB,mBAAKL,UAAU,yDAAkD,EAC9DI,EAAI,OAMb,2BACE,2BACE,mBAAKJ,UAAU,yDAAkD,EAC/D,YAAC,IAAgB,CAACF,GAAG,oCAAoCC,eAAe,cAI5E,2BACE,mBAAKC,UAAU,+BAAwB,EACrC,YAAC,IAAe,CAACM,MAAO1B,EAAK2B,QAAO,CAACC,EAAKC,EAAQL,IAAMI,GAA+B,EAAvBC,EAAO7B,KAAK,GAAG0B,MAAaE,IAAQJ,EAAI,IAAI,GAAIM,sBAAuB,MAI1I9B,EAAK,GAAGA,KAAKqB,MAAM,GAAGC,KAAI,CAACC,EAAWC,KACrC,MAAMO,EAAU/B,EAAK2B,QAAO,CAACC,EAAKC,EAAQG,IAAMH,EAAO7B,KAAKwB,EAAI,GAAKI,GAAOC,EAAO7B,KAAKwB,EAAI,GAAGS,KAAOL,IAAMI,EAAI,GAAKJ,GAAK,GAE1H,OACE,oBAASL,EAAUE,KACjB,mBAAKL,UAAWc,IAAW,wBAAyB,4BAA8B,0BAAyBC,YAAoB,IAAVJ,YAAkB,EACrI,YAAC,IAAe,CAACL,MAAOK,EAASK,MAAM,mBAQnD,8BACGpC,EAAKqB,MAAM,GAAI,GAAGC,KAAIO,GACrB,oBAASA,EAAOQ,OACd,2BACE,mBAAKjB,UAAU,+BAAwB,EApGnCS,IAEf,QADEA,EAAOzB,UAEL,YAAC,IAAa,CAACsB,MAAOG,EAAOQ,OAAQC,MAAM,OAAOC,IAAI,YAEtD,YAAC,IAAa,CAACb,MAAOG,EAAOQ,OAAQC,MAAM,OAAOE,KAAK,YAgG7CC,CAAcZ,KAInB,2BACE,mBAAKT,UAAU,+BAAwB,EACrC,YAAC,IAAe,CAACM,MAAOG,EAAO7B,KAAK,GAAG0B,UAI1CG,EAAO7B,KAAKqB,MAAM,GAAGC,KAAIC,GACxB,oBAASA,EAAUE,KACjB,mBAAKL,UAAWc,IAAW,wBAA0B,0BAAyBC,YAA2B,IAAjBZ,EAAUU,eAAe,EAC/G,YAAC,IAAe,CAACP,MAAOH,EAAUU,KAAMG,MAAM,qBAWhE,IAAIM,EAAQ,KACZ,GACK,QADEtC,EAELsC,EAAQ,YAAC,IAAgB,CAACxB,GAAG,kCAAkCC,eAAe,kDAG9EuB,EAAQ,YAAC,IAAgB,CAACxB,GAAG,oCAAoCC,eAAe,+CAGlF,OACE,mBAAKC,UAAU,kBAAW,EACxB,2BAAKsB,GAEJzB","file":"js/11-4f0e86128609ebce7949.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport api from 'mastodon/api';\nimport { FormattedMessage, FormattedNumber, FormattedDate } from 'react-intl';\nimport classNames from 'classnames';\nimport { roundTo10 } from 'mastodon/utils/numbers';\n\nconst dateForCohort = cohort => {\n  switch(cohort.frequency) {\n  case 'day':\n    return <FormattedDate value={cohort.period} month='long' day='2-digit' />;\n  default:\n    return <FormattedDate value={cohort.period} month='long' year='numeric' />;\n  }\n};\n\nexport default class Retention extends React.PureComponent {\n\n  static propTypes = {\n    start_at: PropTypes.string,\n    end_at: PropTypes.string,\n    frequency: PropTypes.string,\n  };\n\n  state = {\n    loading: true,\n    data: null,\n  };\n\n  componentDidMount () {\n    const { start_at, end_at, frequency } = this.props;\n\n    api().post('/api/v1/admin/retention', { start_at, end_at, frequency }).then(res => {\n      this.setState({\n        loading: false,\n        data: res.data,\n      });\n    }).catch(err => {\n      console.error(err);\n    });\n  }\n\n  render () {\n    const { loading, data } = this.state;\n    const { frequency } = this.props;\n\n    let content;\n\n    if (loading) {\n      content = <FormattedMessage id='loading_indicator.label' defaultMessage='Loading...' />;\n    } else {\n      content = (\n        <table className='retention__table'>\n          <thead>\n            <tr>\n              <th>\n                <div className='retention__table__date retention__table__label'>\n                  <FormattedMessage id='admin.dashboard.retention.cohort' defaultMessage='Sign-up month' />\n                </div>\n              </th>\n\n              <th>\n                <div className='retention__table__number retention__table__label'>\n                  <FormattedMessage id='admin.dashboard.retention.cohort_size' defaultMessage='New users' />\n                </div>\n              </th>\n\n              {data[0].data.slice(1).map((retention, i) => (\n                <th key={retention.date}>\n                  <div className='retention__table__number retention__table__label'>\n                    {i + 1}\n                  </div>\n                </th>\n              ))}\n            </tr>\n\n            <tr>\n              <td>\n                <div className='retention__table__date retention__table__average'>\n                  <FormattedMessage id='admin.dashboard.retention.average' defaultMessage='Average' />\n                </div>\n              </td>\n\n              <td>\n                <div className='retention__table__size'>\n                  <FormattedNumber value={data.reduce((sum, cohort, i) => sum + ((cohort.data[0].value * 1) - sum) / (i + 1), 0)} maximumFractionDigits={0} />\n                </div>\n              </td>\n\n              {data[0].data.slice(1).map((retention, i) => {\n                const average = data.reduce((sum, cohort, k) => cohort.data[i + 1] ? sum + (cohort.data[i + 1].rate - sum)/(k + 1) : sum, 0);\n\n                return (\n                  <td key={retention.date}>\n                    <div className={classNames('retention__table__box', 'retention__table__average', `retention__table__box--${roundTo10(average * 100)}`)}>\n                      <FormattedNumber value={average} style='percent' />\n                    </div>\n                  </td>\n                );\n              })}\n            </tr>\n          </thead>\n\n          <tbody>\n            {data.slice(0, -1).map(cohort => (\n              <tr key={cohort.period}>\n                <td>\n                  <div className='retention__table__date'>\n                    {dateForCohort(cohort)}\n                  </div>\n                </td>\n\n                <td>\n                  <div className='retention__table__size'>\n                    <FormattedNumber value={cohort.data[0].value} />\n                  </div>\n                </td>\n\n                {cohort.data.slice(1).map(retention => (\n                  <td key={retention.date}>\n                    <div className={classNames('retention__table__box', `retention__table__box--${roundTo10(retention.rate * 100)}`)}>\n                      <FormattedNumber value={retention.rate} style='percent' />\n                    </div>\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      );\n    }\n\n    let title = null;\n    switch(frequency) {\n    case 'day':\n      title = <FormattedMessage id='admin.dashboard.daily_retention' defaultMessage='User retention rate by day after sign-up' />;\n      break;\n    default:\n      title = <FormattedMessage id='admin.dashboard.monthly_retention' defaultMessage='User retention rate by month after sign-up' />;\n    }\n\n    return (\n      <div className='retention'>\n        <h4>{title}</h4>\n\n        {content}\n      </div>\n    );\n  }\n\n}\n"],"sourceRoot":""}