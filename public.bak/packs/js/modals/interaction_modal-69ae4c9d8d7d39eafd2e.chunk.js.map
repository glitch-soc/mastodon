{"version":3,"sources":["webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/interaction_modal/index.jsx"],"names":["Copypaste","React","PureComponent","constructor","arguments","state","copied","setRef","c","this","input","handleInputClick","setState","focus","select","setSelectionRange","value","length","handleButtonClick","props","navigator","clipboard","writeText","blur","timeout","setTimeout","componentWillUnmount","clearTimeout","render","_jsx","className","classNames","createElement","type","ref","readOnly","onClick","FormattedMessage","id","defaultMessage","InteractionModal","connect","mapStateToProps","_ref","accountId","displayNameHtml","getIn","dispatch","onSignupClick","closeModal","openModal","_dec","_class","handleSignupClick","url","name","dangerouslySetInnerHTML","__html","title","actionDescription","icon","signupButton","Icon","values","registrationsOpen","href"],"mappings":"iOAoBA,MAAMA,UAAkBC,IAAMC,cAAcC,cAAA,SAAAC,WAAA,KAM1CC,MAAQ,CACNC,QAAQ,GACR,KAEFC,OAASC,IACPC,KAAKC,MAAQF,GACb,KAEFG,iBAAmB,KACjBF,KAAKG,SAAS,CAAEN,QAAQ,IACxBG,KAAKC,MAAMG,QACXJ,KAAKC,MAAMI,SACXL,KAAKC,MAAMK,kBAAkB,EAAGN,KAAKC,MAAMM,MAAMC,SACjD,KAEFC,kBAAoB,KAClB,MAAM,MAAEF,GAAUP,KAAKU,MACvBC,UAAUC,UAAUC,UAAUN,GAC9BP,KAAKC,MAAMa,OACXd,KAAKG,SAAS,CAAEN,QAAQ,IACxBG,KAAKe,QAAUC,YAAW,IAAMhB,KAAKG,SAAS,CAAEN,QAAQ,KAAU,MAGpEoB,uBACMjB,KAAKe,SAASG,aAAalB,KAAKe,SAGtCI,SACE,MAAM,MAAEZ,GAAUP,KAAKU,OACjB,OAAEb,GAAWG,KAAKJ,MAExB,OACEwB,YAAA,OAAKC,UAAWC,IAAW,YAAa,CAAEzB,iBAAU,EAClDL,IAAA+B,cAAA,SACEC,KAAK,OACLC,IAAKzB,KAAKF,OACVS,MAAOA,EACPmB,UAAQ,EACRC,QAAS3B,KAAKE,mBAGhBkB,YAAA,UAAQC,UAAU,SAASM,QAAS3B,KAAKS,wBAAkB,EACxDZ,EAASuB,YAACQ,IAAgB,CAACC,GAAG,mBAAmBC,eAAe,WAAcV,YAACQ,IAAgB,CAACC,GAAG,iBAAiBC,eAAe,YAM7I,IAGKC,EADUC,mBAnEQC,CAACrC,EAAKsC,KAAA,IAAE,UAAEC,GAAWD,EAAA,MAAM,CACjDE,gBAAiBxC,EAAMyC,MAAM,CAAC,WAAYF,EAAW,0BAG3BG,IAAQ,CAClCC,gBACED,EAASE,eACTF,EAASG,YAAU,6BA4DqCC,CAAAC,EAA7C,cACgBnD,IAAMC,cAAcC,cAAA,SAAAC,WAAA,KASjDiD,kBAAoB,KAClB5C,KAAKU,MAAM6B,iBAGbpB,SACE,MAAM,IAAE0B,EAAG,KAAErB,EAAI,gBAAEY,GAAoBpC,KAAKU,MAEtCoC,EAAO1B,YAAA,OAAK2B,wBAAyB,CAAEC,OAAQZ,KAErD,IAAIa,EAAOC,EAAmBC,EAyB1BC,EAvBJ,OAAO5B,GACP,IAAK,QACH2B,EAAO/B,YAACiC,IAAI,CAACxB,GAAG,UAChBoB,EAAQ7B,YAACQ,IAAgB,CAACC,GAAG,gCAAgCC,eAAe,yBAAyBwB,OAAQ,CAAER,UAC/GI,EAAoB9B,YAACQ,IAAgB,CAACC,GAAG,sCAAsCC,eAAe,+DAC9F,MACF,IAAK,SACHqB,EAAO/B,YAACiC,IAAI,CAACxB,GAAG,YAChBoB,EAAQ7B,YAACQ,IAAgB,CAACC,GAAG,iCAAiCC,eAAe,sBAAsBwB,OAAQ,CAAER,UAC7GI,EAAoB9B,YAACQ,IAAgB,CAACC,GAAG,uCAAuCC,eAAe,8FAC/F,MACF,IAAK,YACHqB,EAAO/B,YAACiC,IAAI,CAACxB,GAAG,SAChBoB,EAAQ7B,YAACQ,IAAgB,CAACC,GAAG,oCAAoCC,eAAe,0BAA0BwB,OAAQ,CAAER,UACpHI,EAAoB9B,YAACQ,IAAgB,CAACC,GAAG,0CAA0CC,eAAe,6HAClG,MACF,IAAK,SACHqB,EAAO/B,YAACiC,IAAI,CAACxB,GAAG,cAChBoB,EAAQ7B,YAACQ,IAAgB,CAACC,GAAG,iCAAiCC,eAAe,gBAAgBwB,OAAQ,CAAER,UACvGI,EAAoB9B,YAACQ,IAAgB,CAACC,GAAG,uCAAuCC,eAAe,+FAA+FwB,OAAQ,CAAER,UAoB1M,OAbEM,EADEG,IAEAnC,YAAA,KAAGoC,KAAK,gBAAgBnC,UAAU,6CAAsC,EACtED,YAACQ,IAAgB,CAACC,GAAG,gCAAgCC,eAAe,oBAKtEV,YAAA,UAAQC,UAAU,uCAAuCM,QAAS3B,KAAK4C,wBAAkB,EACvFxB,YAACQ,IAAgB,CAACC,GAAG,gCAAgCC,eAAe,oBAMxEV,YAAA,OAAKC,UAAU,4CAAqC,EAClDD,YAAA,OAAKC,UAAU,gCAAyB,EACtCD,YAAA,eAAIA,YAAA,QAAMC,UAAU,gCAAyB,EAAE8B,GAAY,IAAEF,GAC7D7B,YAAA,cAAI8B,EAAkB,IAAC9B,YAACQ,IAAgB,CAACC,GAAG,6BAA6BC,eAAe,4KAG1FV,YAAA,OAAKC,UAAU,mCAA4B,EACzCD,YAAA,OAAKC,UAAU,2CAAoC,EACjDD,YAAA,eAAIA,YAACQ,IAAgB,CAACC,GAAG,mCAAmCC,eAAe,oBAC3EV,YAAA,KAAGoC,KAAK,gBAAgBnC,UAAU,6BAAsB,EAACD,YAACQ,IAAgB,CAACC,GAAG,yBAAyBC,eAAe,aACrHsB,GAGHhC,YAAA,OAAKC,UAAU,2CAAoC,EACjDD,YAAA,eAAIA,YAACQ,IAAgB,CAACC,GAAG,sCAAsCC,eAAe,2BAC9EV,YAAA,cAAGA,YAACQ,IAAgB,CAACC,GAAG,8CAA8CC,eAAe,gIACrFV,YAAC7B,EAAS,CAACgB,MAAOsC,WAO7BF","file":"js/modals/interaction_modal-69ae4c9d8d7d39eafd2e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport { registrationsOpen } from 'mastodon/initial_state';\nimport { connect } from 'react-redux';\nimport Icon from 'mastodon/components/icon';\nimport classNames from 'classnames';\nimport { openModal, closeModal } from 'mastodon/actions/modal';\n\nconst mapStateToProps = (state, { accountId }) => ({\n  displayNameHtml: state.getIn(['accounts', accountId, 'display_name_html']),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onSignupClick() {\n    dispatch(closeModal());\n    dispatch(openModal('CLOSED_REGISTRATIONS'));\n  },\n});\n\nclass Copypaste extends React.PureComponent {\n\n  static propTypes = {\n    value: PropTypes.string,\n  };\n\n  state = {\n    copied: false,\n  };\n\n  setRef = c => {\n    this.input = c;\n  };\n\n  handleInputClick = () => {\n    this.setState({ copied: false });\n    this.input.focus();\n    this.input.select();\n    this.input.setSelectionRange(0, this.input.value.length);\n  };\n\n  handleButtonClick = () => {\n    const { value } = this.props;\n    navigator.clipboard.writeText(value);\n    this.input.blur();\n    this.setState({ copied: true });\n    this.timeout = setTimeout(() => this.setState({ copied: false }), 700);\n  };\n\n  componentWillUnmount () {\n    if (this.timeout) clearTimeout(this.timeout);\n  }\n\n  render () {\n    const { value } = this.props;\n    const { copied } = this.state;\n\n    return (\n      <div className={classNames('copypaste', { copied })}>\n        <input\n          type='text'\n          ref={this.setRef}\n          value={value}\n          readOnly\n          onClick={this.handleInputClick}\n        />\n\n        <button className='button' onClick={this.handleButtonClick}>\n          {copied ? <FormattedMessage id='copypaste.copied' defaultMessage='Copied' /> : <FormattedMessage id='copypaste.copy' defaultMessage='Copy' />}\n        </button>\n      </div>\n    );\n  }\n\n}\n\nexport default @connect(mapStateToProps, mapDispatchToProps)\nclass InteractionModal extends React.PureComponent {\n\n  static propTypes = {\n    displayNameHtml: PropTypes.string,\n    url: PropTypes.string,\n    type: PropTypes.oneOf(['reply', 'reblog', 'favourite', 'follow']),\n    onSignupClick: PropTypes.func.isRequired,\n  };\n\n  handleSignupClick = () => {\n    this.props.onSignupClick();\n  };\n\n  render () {\n    const { url, type, displayNameHtml } = this.props;\n\n    const name = <bdi dangerouslySetInnerHTML={{ __html: displayNameHtml }} />;\n\n    let title, actionDescription, icon;\n\n    switch(type) {\n    case 'reply':\n      icon = <Icon id='reply' />;\n      title = <FormattedMessage id='interaction_modal.title.reply' defaultMessage=\"Reply to {name}'s post\" values={{ name }} />;\n      actionDescription = <FormattedMessage id='interaction_modal.description.reply' defaultMessage='With an account on Mastodon, you can respond to this post.' />;\n      break;\n    case 'reblog':\n      icon = <Icon id='retweet' />;\n      title = <FormattedMessage id='interaction_modal.title.reblog' defaultMessage=\"Boost {name}'s post\" values={{ name }} />;\n      actionDescription = <FormattedMessage id='interaction_modal.description.reblog' defaultMessage='With an account on Mastodon, you can boost this post to share it with your own followers.' />;\n      break;\n    case 'favourite':\n      icon = <Icon id='star' />;\n      title = <FormattedMessage id='interaction_modal.title.favourite' defaultMessage=\"Favourite {name}'s post\" values={{ name }} />;\n      actionDescription = <FormattedMessage id='interaction_modal.description.favourite' defaultMessage='With an account on Mastodon, you can favourite this post to let the author know you appreciate it and save it for later.' />;\n      break;\n    case 'follow':\n      icon = <Icon id='user-plus' />;\n      title = <FormattedMessage id='interaction_modal.title.follow' defaultMessage='Follow {name}' values={{ name }} />;\n      actionDescription = <FormattedMessage id='interaction_modal.description.follow' defaultMessage='With an account on Mastodon, you can follow {name} to receive their posts in your home feed.' values={{ name }} />;\n      break;\n    }\n\n    let signupButton;\n\n    if (registrationsOpen) {\n      signupButton = (\n        <a href='/auth/sign_up' className='button button--block button-tertiary'>\n          <FormattedMessage id='sign_in_banner.create_account' defaultMessage='Create account' />\n        </a>\n      );\n    } else {\n      signupButton = (\n        <button className='button button--block button-tertiary' onClick={this.handleSignupClick}>\n          <FormattedMessage id='sign_in_banner.create_account' defaultMessage='Create account' />\n        </button>\n      );\n    }\n\n    return (\n      <div className='modal-root__modal interaction-modal'>\n        <div className='interaction-modal__lead'>\n          <h3><span className='interaction-modal__icon'>{icon}</span> {title}</h3>\n          <p>{actionDescription} <FormattedMessage id='interaction_modal.preamble' defaultMessage=\"Since Mastodon is decentralized, you can use your existing account hosted by another Mastodon server or compatible platform if you don't have an account on this one.\" /></p>\n        </div>\n\n        <div className='interaction-modal__choices'>\n          <div className='interaction-modal__choices__choice'>\n            <h3><FormattedMessage id='interaction_modal.on_this_server' defaultMessage='On this server' /></h3>\n            <a href='/auth/sign_in' className='button button--block'><FormattedMessage id='sign_in_banner.sign_in' defaultMessage='Sign in' /></a>\n            {signupButton}\n          </div>\n\n          <div className='interaction-modal__choices__choice'>\n            <h3><FormattedMessage id='interaction_modal.on_another_server' defaultMessage='On a different server' /></h3>\n            <p><FormattedMessage id='interaction_modal.other_server_instructions' defaultMessage='Copy and paste this URL into the search field of your favourite Mastodon app or the web interface of your Mastodon server.' /></p>\n            <Copypaste value={url} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n"],"sourceRoot":""}