{"version":3,"sources":["webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/report/category.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/report/components/status_check_box.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/report/containers/status_check_box_container.js","webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/report/statuses.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/report/rules.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/report/comment.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/report/thanks.jsx","webpack:///app/javascript/home/mastodon/live/app/javascript/mastodon/features/ui/components/report_modal.jsx"],"names":["messages","defineMessages","dislike","dislike_description","spam","spam_description","violation","violation_description","other","other_description","status","account","Category","connect","state","rules","getIn","ImmutableList","_dec","_class","injectIntl","React","PureComponent","constructor","arguments","handleNextClick","onNextStep","category","this","props","handleCategoryToggle","value","checked","onChangeCategory","render","startedFrom","intl","options","size","_jsx","Fragment","className","FormattedMessage","id","defaultMessage","values","type","formatMessage","map","item","Option","name","onToggle","label","description","Button","onClick","disabled","public_short","unlisted_short","private_short","direct_short","StatusCheckBox","handleStatusesToggle","get","visibilityIcon","icon","text","labelComponent","Avatar","DisplayName","Icon","title","RelativeTimestamp","timestamp","StatusContent","MediaAttachments","multiple","makeMapStateToProps","getStatus","makeGetStatus","mapStateToProps","_ref","Statuses","accountId","availableStatusIds","OrderedSet","isLoading","selectedStatusIds","LoadingIndicator","union","statusId","includes","Rules","handleRulesToggle","selectedRuleIds","placeholder","Comment","handleClick","onSubmit","handleChange","e","onChangeComment","target","handleKeyDown","keyCode","ctrlKey","metaKey","handleForwardChange","onChangeForward","comment","isRemote","forward","domain","isSubmitting","onChange","onKeyDown","Toggle","Thanks","handleCloseClick","onClose","handleUnfollowClick","dispatch","unfollowAccount","handleMuteClick","muteAccount","handleBlockClick","blockAccount","submitted","secondary","close","ReportModal","getAccount","makeGetAccount","_class2","ImmutablePureComponent","step","isSubmitted","handleSubmit","setState","submitReport","account_id","status_ids","toArray","rule_ids","handleSuccess","handleFail","handleStatusToggle","add","remove","handleRuleToggle","ruleId","handleChangeCategory","handleChangeComment","handleChangeForward","handleNextStep","componentDidMount","expandAccountTimeline","withReplies","fetchServer","split","stepComponent","IconButton","propTypes","PropTypes","string","isRequired","func","object","ImmutablePropTypes"],"mappings":"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","file":"js/modals/report_modal-c64bf230a7947f173bc8.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport Button from 'mastodon/components/button';\nimport Option from './components/option';\nimport { List as ImmutableList } from 'immutable';\n\nconst messages = defineMessages({\n  dislike: { id: 'report.reasons.dislike', defaultMessage: 'I don\\'t like it' },\n  dislike_description: { id: 'report.reasons.dislike_description', defaultMessage: 'It is not something you want to see' },\n  spam: { id: 'report.reasons.spam', defaultMessage: 'It\\'s spam' },\n  spam_description: { id: 'report.reasons.spam_description', defaultMessage: 'Malicious links, fake engagement, or repetitive replies' },\n  violation: { id: 'report.reasons.violation', defaultMessage: 'It violates server rules' },\n  violation_description: { id: 'report.reasons.violation_description', defaultMessage: 'You are aware that it breaks specific rules' },\n  other: { id: 'report.reasons.other', defaultMessage: 'It\\'s something else' },\n  other_description: { id: 'report.reasons.other_description', defaultMessage: 'The issue does not fit into other categories' },\n  status: { id: 'report.category.title_status', defaultMessage: 'post' },\n  account: { id: 'report.category.title_account', defaultMessage: 'profile' },\n});\n\nconst mapStateToProps = state => ({\n  rules: state.getIn(['server', 'server', 'rules'], ImmutableList()),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass Category extends React.PureComponent {\n\n  static propTypes = {\n    onNextStep: PropTypes.func.isRequired,\n    rules: ImmutablePropTypes.list,\n    category: PropTypes.string,\n    onChangeCategory: PropTypes.func.isRequired,\n    startedFrom: PropTypes.oneOf(['status', 'account']),\n    intl: PropTypes.object.isRequired,\n  };\n\n  handleNextClick = () => {\n    const { onNextStep, category } = this.props;\n\n    switch(category) {\n    case 'dislike':\n      onNextStep('thanks');\n      break;\n    case 'violation':\n      onNextStep('rules');\n      break;\n    default:\n      onNextStep('statuses');\n      break;\n    }\n  };\n\n  handleCategoryToggle = (value, checked) => {\n    const { onChangeCategory } = this.props;\n\n    if (checked) {\n      onChangeCategory(value);\n    }\n  };\n\n  render () {\n    const { category, startedFrom, rules, intl } = this.props;\n\n    const options = rules.size > 0 ? [\n      'dislike',\n      'spam',\n      'violation',\n      'other',\n    ] : [\n      'dislike',\n      'spam',\n      'other',\n    ];\n\n    return (\n      <React.Fragment>\n        <h3 className='report-dialog-modal__title'><FormattedMessage id='report.category.title' defaultMessage=\"Tell us what's going on with this {type}\" values={{ type: intl.formatMessage(messages[startedFrom]) }} /></h3>\n        <p className='report-dialog-modal__lead'><FormattedMessage id='report.category.subtitle' defaultMessage='Choose the best match' /></p>\n\n        <div>\n          {options.map(item => (\n            <Option\n              key={item}\n              name='category'\n              value={item}\n              checked={category === item}\n              onToggle={this.handleCategoryToggle}\n              label={intl.formatMessage(messages[item])}\n              description={intl.formatMessage(messages[`${item}_description`])}\n            />\n          ))}\n        </div>\n\n        <div className='flex-spacer' />\n\n        <div className='report-dialog-modal__actions'>\n          <Button onClick={this.handleNextClick} disabled={category === null}><FormattedMessage id='report.next' defaultMessage='Next' /></Button>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport StatusContent from 'mastodon/components/status_content';\nimport Avatar from 'mastodon/components/avatar';\nimport DisplayName from 'mastodon/components/display_name';\nimport RelativeTimestamp from 'mastodon/components/relative_timestamp';\nimport Option from './option';\nimport MediaAttachments from 'mastodon/components/media_attachments';\nimport { injectIntl, defineMessages } from 'react-intl';\nimport Icon from 'mastodon/components/icon';\n\nconst messages = defineMessages({\n  public_short: { id: 'privacy.public.short', defaultMessage: 'Public' },\n  unlisted_short: { id: 'privacy.unlisted.short', defaultMessage: 'Unlisted' },\n  private_short: { id: 'privacy.private.short', defaultMessage: 'Followers-only' },\n  direct_short: { id: 'privacy.direct.short', defaultMessage: 'Mentioned people only' },\n});\n\nexport default @injectIntl\nclass StatusCheckBox extends React.PureComponent {\n\n  static propTypes = {\n    id: PropTypes.string.isRequired,\n    status: ImmutablePropTypes.map.isRequired,\n    checked: PropTypes.bool,\n    onToggle: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  handleStatusesToggle = (value, checked) => {\n    const { onToggle } = this.props;\n    onToggle(value, checked);\n  };\n\n  render () {\n    const { status, checked, intl } = this.props;\n\n    if (status.get('reblog')) {\n      return null;\n    }\n\n    const visibilityIconInfo = {\n      'public': { icon: 'globe', text: intl.formatMessage(messages.public_short) },\n      'unlisted': { icon: 'unlock', text: intl.formatMessage(messages.unlisted_short) },\n      'private': { icon: 'lock', text: intl.formatMessage(messages.private_short) },\n      'direct': { icon: 'at', text: intl.formatMessage(messages.direct_short) },\n    };\n\n    const visibilityIcon = visibilityIconInfo[status.get('visibility')];\n\n    const labelComponent = (\n      <div className='status-check-box__status poll__option__text'>\n        <div className='detailed-status__display-name'>\n          <div className='detailed-status__display-avatar'>\n            <Avatar account={status.get('account')} size={46} />\n          </div>\n\n          <div>\n            <DisplayName account={status.get('account')} /> · <span className='status__visibility-icon'><Icon id={visibilityIcon.icon} title={visibilityIcon.text} /></span> <RelativeTimestamp timestamp={status.get('created_at')} />\n          </div>\n        </div>\n\n        <StatusContent status={status} />\n        <MediaAttachments status={status} />\n      </div>\n    );\n\n    return (\n      <Option\n        name='status_ids'\n        value={status.get('id')}\n        checked={checked}\n        onToggle={this.handleStatusesToggle}\n        label={status.get('search_index')}\n        labelComponent={labelComponent}\n        multiple\n      />\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport StatusCheckBox from '../components/status_check_box';\nimport { makeGetStatus } from 'mastodon/selectors';\n\nconst makeMapStateToProps = () => {\n  const getStatus = makeGetStatus();\n\n  const mapStateToProps = (state, { id }) => ({\n    status: getStatus(state, { id }),\n  });\n\n  return mapStateToProps;\n};\n\nexport default connect(makeMapStateToProps)(StatusCheckBox);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\nimport StatusCheckBox from 'mastodon/features/report/containers/status_check_box_container';\nimport { OrderedSet } from 'immutable';\nimport { FormattedMessage } from 'react-intl';\nimport Button from 'mastodon/components/button';\nimport LoadingIndicator from 'mastodon/components/loading_indicator';\n\nconst mapStateToProps = (state, { accountId }) => ({\n  availableStatusIds: OrderedSet(state.getIn(['timelines', `account:${accountId}:with_replies`, 'items'])),\n  isLoading: state.getIn(['timelines', `account:${accountId}:with_replies`, 'isLoading']),\n});\n\nexport default @connect(mapStateToProps)\nclass Statuses extends React.PureComponent {\n\n  static propTypes = {\n    onNextStep: PropTypes.func.isRequired,\n    accountId: PropTypes.string.isRequired,\n    availableStatusIds: ImmutablePropTypes.set.isRequired,\n    selectedStatusIds: ImmutablePropTypes.set.isRequired,\n    isLoading: PropTypes.bool,\n    onToggle: PropTypes.func.isRequired,\n  };\n\n  handleNextClick = () => {\n    const { onNextStep } = this.props;\n    onNextStep('comment');\n  };\n\n  render () {\n    const { availableStatusIds, selectedStatusIds, onToggle, isLoading } = this.props;\n\n    return (\n      <React.Fragment>\n        <h3 className='report-dialog-modal__title'><FormattedMessage id='report.statuses.title' defaultMessage='Are there any posts that back up this report?' /></h3>\n        <p className='report-dialog-modal__lead'><FormattedMessage id='report.statuses.subtitle' defaultMessage='Select all that apply' /></p>\n\n        <div className='report-dialog-modal__statuses'>\n          {isLoading ? <LoadingIndicator /> : availableStatusIds.union(selectedStatusIds).map(statusId => (\n            <StatusCheckBox\n              id={statusId}\n              key={statusId}\n              checked={selectedStatusIds.includes(statusId)}\n              onToggle={onToggle}\n            />\n          ))}\n        </div>\n\n        <div className='flex-spacer' />\n\n        <div className='report-dialog-modal__actions'>\n          <Button onClick={this.handleNextClick}><FormattedMessage id='report.next' defaultMessage='Next' /></Button>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\nimport { FormattedMessage } from 'react-intl';\nimport Button from 'mastodon/components/button';\nimport Option from './components/option';\n\nconst mapStateToProps = state => ({\n  rules: state.getIn(['server', 'server', 'rules']),\n});\n\nexport default @connect(mapStateToProps)\nclass Rules extends React.PureComponent {\n\n  static propTypes = {\n    onNextStep: PropTypes.func.isRequired,\n    rules: ImmutablePropTypes.list,\n    selectedRuleIds: ImmutablePropTypes.set.isRequired,\n    onToggle: PropTypes.func.isRequired,\n  };\n\n  handleNextClick = () => {\n    const { onNextStep } = this.props;\n    onNextStep('statuses');\n  };\n\n  handleRulesToggle = (value, checked) => {\n    const { onToggle } = this.props;\n    onToggle(value, checked);\n  };\n\n  render () {\n    const { rules, selectedRuleIds } = this.props;\n\n    return (\n      <React.Fragment>\n        <h3 className='report-dialog-modal__title'><FormattedMessage id='report.rules.title' defaultMessage='Which rules are being violated?' /></h3>\n        <p className='report-dialog-modal__lead'><FormattedMessage id='report.rules.subtitle' defaultMessage='Select all that apply' /></p>\n\n        <div>\n          {rules.map(item => (\n            <Option\n              key={item.get('id')}\n              name='rule_ids'\n              value={item.get('id')}\n              checked={selectedRuleIds.includes(item.get('id'))}\n              onToggle={this.handleRulesToggle}\n              label={item.get('text')}\n              multiple\n            />\n          ))}\n        </div>\n\n        <div className='flex-spacer' />\n\n        <div className='report-dialog-modal__actions'>\n          <Button onClick={this.handleNextClick} disabled={selectedRuleIds.size < 1}><FormattedMessage id='report.next' defaultMessage='Next' /></Button>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl, defineMessages, FormattedMessage } from 'react-intl';\nimport Button from 'mastodon/components/button';\nimport Toggle from 'react-toggle';\n\nconst messages = defineMessages({\n  placeholder: { id: 'report.placeholder', defaultMessage: 'Type or paste additional comments' },\n});\n\nexport default @injectIntl\nclass Comment extends React.PureComponent {\n\n  static propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n    comment: PropTypes.string.isRequired,\n    onChangeComment: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    isSubmitting: PropTypes.bool,\n    forward: PropTypes.bool,\n    isRemote: PropTypes.bool,\n    domain: PropTypes.string,\n    onChangeForward: PropTypes.func.isRequired,\n  };\n\n  handleClick = () => {\n    const { onSubmit } = this.props;\n    onSubmit();\n  };\n\n  handleChange = e => {\n    const { onChangeComment } = this.props;\n    onChangeComment(e.target.value);\n  };\n\n  handleKeyDown = e => {\n    if (e.keyCode === 13 && (e.ctrlKey || e.metaKey)) {\n      this.handleClick();\n    }\n  };\n\n  handleForwardChange = e => {\n    const { onChangeForward } = this.props;\n    onChangeForward(e.target.checked);\n  };\n\n  render () {\n    const { comment, isRemote, forward, domain, isSubmitting, intl } = this.props;\n\n    return (\n      <React.Fragment>\n        <h3 className='report-dialog-modal__title'><FormattedMessage id='report.comment.title' defaultMessage='Is there anything else you think we should know?' /></h3>\n\n        <textarea\n          className='report-dialog-modal__textarea'\n          placeholder={intl.formatMessage(messages.placeholder)}\n          value={comment}\n          onChange={this.handleChange}\n          onKeyDown={this.handleKeyDown}\n          disabled={isSubmitting}\n        />\n\n        {isRemote && (\n          <React.Fragment>\n            <p className='report-dialog-modal__lead'><FormattedMessage id='report.forward_hint' defaultMessage='The account is from another server. Send an anonymized copy of the report there as well?' /></p>\n\n            <label className='report-dialog-modal__toggle'>\n              <Toggle checked={forward} disabled={isSubmitting} onChange={this.handleForwardChange} />\n              <FormattedMessage id='report.forward' defaultMessage='Forward to {target}' values={{ target: domain }} />\n            </label>\n          </React.Fragment>\n        )}\n\n        <div className='flex-spacer' />\n\n        <div className='report-dialog-modal__actions'>\n          <Button onClick={this.handleClick} disabled={isSubmitting}><FormattedMessage id='report.submit' defaultMessage='Submit report' /></Button>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { FormattedMessage } from 'react-intl';\nimport Button from 'mastodon/components/button';\nimport { connect } from 'react-redux';\nimport {\n  unfollowAccount,\n  muteAccount,\n  blockAccount,\n} from 'mastodon/actions/accounts';\n\nconst mapStateToProps = () => ({});\n\nexport default @connect(mapStateToProps)\nclass Thanks extends React.PureComponent {\n\n  static propTypes = {\n    submitted: PropTypes.bool,\n    onClose: PropTypes.func.isRequired,\n    account: ImmutablePropTypes.map.isRequired,\n    dispatch: PropTypes.func.isRequired,\n  };\n\n  handleCloseClick = () => {\n    const { onClose } = this.props;\n    onClose();\n  };\n\n  handleUnfollowClick = () => {\n    const { dispatch, account, onClose } = this.props;\n    dispatch(unfollowAccount(account.get('id')));\n    onClose();\n  };\n\n  handleMuteClick = () => {\n    const { dispatch, account, onClose } = this.props;\n    dispatch(muteAccount(account.get('id')));\n    onClose();\n  };\n\n  handleBlockClick = () => {\n    const { dispatch, account, onClose } = this.props;\n    dispatch(blockAccount(account.get('id')));\n    onClose();\n  };\n\n  render () {\n    const { account, submitted } = this.props;\n\n    return (\n      <React.Fragment>\n        <h3 className='report-dialog-modal__title'>{submitted ? <FormattedMessage id='report.thanks.title_actionable' defaultMessage=\"Thanks for reporting, we'll look into this.\" /> : <FormattedMessage id='report.thanks.title' defaultMessage=\"Don't want to see this?\" />}</h3>\n        <p className='report-dialog-modal__lead'>{submitted ? <FormattedMessage id='report.thanks.take_action_actionable' defaultMessage='While we review this, you can take action against @{name}:' values={{ name: account.get('username') }} /> : <FormattedMessage id='report.thanks.take_action' defaultMessage='Here are your options for controlling what you see on Mastodon:' />}</p>\n\n        {account.getIn(['relationship', 'following']) && (\n          <React.Fragment>\n            <h4 className='report-dialog-modal__subtitle'><FormattedMessage id='report.unfollow' defaultMessage='Unfollow @{name}' values={{ name: account.get('username') }} /></h4>\n            <p className='report-dialog-modal__lead'><FormattedMessage id='report.unfollow_explanation' defaultMessage='You are following this account. To not see their posts in your home feed anymore, unfollow them.' /></p>\n            <Button secondary onClick={this.handleUnfollowClick}><FormattedMessage id='account.unfollow' defaultMessage='Unfollow' /></Button>\n            <hr />\n          </React.Fragment>\n        )}\n\n        <h4 className='report-dialog-modal__subtitle'><FormattedMessage id='account.mute' defaultMessage='Mute @{name}' values={{ name: account.get('username') }} /></h4>\n        <p className='report-dialog-modal__lead'><FormattedMessage id='report.mute_explanation' defaultMessage='You will not see their posts. They can still follow you and see your posts and will not know that they are muted.' /></p>\n        <Button secondary onClick={this.handleMuteClick}>{!account.getIn(['relationship', 'muting']) ? <FormattedMessage id='report.mute' defaultMessage='Mute' /> : <FormattedMessage id='account.muted' defaultMessage='Muted' />}</Button>\n\n        <hr />\n\n        <h4 className='report-dialog-modal__subtitle'><FormattedMessage id='account.block' defaultMessage='Block @{name}' values={{ name: account.get('username') }} /></h4>\n        <p className='report-dialog-modal__lead'><FormattedMessage id='report.block_explanation' defaultMessage='You will not see their posts. They will not be able to see your posts or follow you. They will be able to tell that they are blocked.' /></p>\n        <Button secondary onClick={this.handleBlockClick}>{!account.getIn(['relationship', 'blocking']) ? <FormattedMessage id='report.block' defaultMessage='Block' /> : <FormattedMessage id='account.blocked' defaultMessage='Blocked' />}</Button>\n\n        <div className='flex-spacer' />\n\n        <div className='report-dialog-modal__actions'>\n          <Button onClick={this.handleCloseClick}><FormattedMessage id='report.close' defaultMessage='Done' /></Button>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { submitReport } from 'mastodon/actions/reports';\nimport { expandAccountTimeline } from 'mastodon/actions/timelines';\nimport { fetchServer } from 'mastodon/actions/server';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { makeGetAccount } from 'mastodon/selectors';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport { OrderedSet } from 'immutable';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport IconButton from 'mastodon/components/icon_button';\nimport Category from 'mastodon/features/report/category';\nimport Statuses from 'mastodon/features/report/statuses';\nimport Rules from 'mastodon/features/report/rules';\nimport Comment from 'mastodon/features/report/comment';\nimport Thanks from 'mastodon/features/report/thanks';\n\nconst messages = defineMessages({\n  close: { id: 'lightbox.close', defaultMessage: 'Close' },\n});\n\nconst makeMapStateToProps = () => {\n  const getAccount = makeGetAccount();\n\n  const mapStateToProps = (state, { accountId }) => ({\n    account: getAccount(state, accountId),\n  });\n\n  return mapStateToProps;\n};\n\nexport default @connect(makeMapStateToProps)\n@injectIntl\nclass ReportModal extends ImmutablePureComponent {\n\n  static propTypes = {\n    accountId: PropTypes.string.isRequired,\n    statusId: PropTypes.string,\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    account: ImmutablePropTypes.map.isRequired,\n  };\n\n  state = {\n    step: 'category',\n    selectedStatusIds: OrderedSet(this.props.statusId ? [this.props.statusId] : []),\n    comment: '',\n    category: null,\n    selectedRuleIds: OrderedSet(),\n    forward: true,\n    isSubmitting: false,\n    isSubmitted: false,\n  };\n\n  handleSubmit = () => {\n    const { dispatch, accountId } = this.props;\n    const { selectedStatusIds, comment, category, selectedRuleIds, forward } = this.state;\n\n    this.setState({ isSubmitting: true });\n\n    dispatch(submitReport({\n      account_id: accountId,\n      status_ids: selectedStatusIds.toArray(),\n      comment,\n      forward,\n      category,\n      rule_ids: selectedRuleIds.toArray(),\n    }, this.handleSuccess, this.handleFail));\n  };\n\n  handleSuccess = () => {\n    this.setState({ isSubmitting: false, isSubmitted: true, step: 'thanks' });\n  };\n\n  handleFail = () => {\n    this.setState({ isSubmitting: false });\n  };\n\n  handleStatusToggle = (statusId, checked) => {\n    const { selectedStatusIds } = this.state;\n\n    if (checked) {\n      this.setState({ selectedStatusIds: selectedStatusIds.add(statusId) });\n    } else {\n      this.setState({ selectedStatusIds: selectedStatusIds.remove(statusId) });\n    }\n  };\n\n  handleRuleToggle = (ruleId, checked) => {\n    const { selectedRuleIds } = this.state;\n\n    if (checked) {\n      this.setState({ selectedRuleIds: selectedRuleIds.add(ruleId) });\n    } else {\n      this.setState({ selectedRuleIds: selectedRuleIds.remove(ruleId) });\n    }\n  };\n\n  handleChangeCategory = category => {\n    this.setState({ category });\n  };\n\n  handleChangeComment = comment => {\n    this.setState({ comment });\n  };\n\n  handleChangeForward = forward => {\n    this.setState({ forward });\n  };\n\n  handleNextStep = step => {\n    this.setState({ step });\n  };\n\n  componentDidMount () {\n    const { dispatch, accountId } = this.props;\n\n    dispatch(expandAccountTimeline(accountId, { withReplies: true }));\n    dispatch(fetchServer());\n  }\n\n  render () {\n    const {\n      accountId,\n      account,\n      intl,\n      onClose,\n    } = this.props;\n\n    if (!account) {\n      return null;\n    }\n\n    const {\n      step,\n      selectedStatusIds,\n      selectedRuleIds,\n      comment,\n      forward,\n      category,\n      isSubmitting,\n      isSubmitted,\n    } = this.state;\n\n    const domain   = account.get('acct').split('@')[1];\n    const isRemote = !!domain;\n\n    let stepComponent;\n\n    switch(step) {\n    case 'category':\n      stepComponent = (\n        <Category\n          onNextStep={this.handleNextStep}\n          startedFrom={this.props.statusId ? 'status' : 'account'}\n          category={category}\n          onChangeCategory={this.handleChangeCategory}\n        />\n      );\n      break;\n    case 'rules':\n      stepComponent = (\n        <Rules\n          onNextStep={this.handleNextStep}\n          selectedRuleIds={selectedRuleIds}\n          onToggle={this.handleRuleToggle}\n        />\n      );\n      break;\n    case 'statuses':\n      stepComponent = (\n        <Statuses\n          onNextStep={this.handleNextStep}\n          accountId={accountId}\n          selectedStatusIds={selectedStatusIds}\n          onToggle={this.handleStatusToggle}\n        />\n      );\n      break;\n    case 'comment':\n      stepComponent = (\n        <Comment\n          onSubmit={this.handleSubmit}\n          isSubmitting={isSubmitting}\n          isRemote={isRemote}\n          comment={comment}\n          forward={forward}\n          domain={domain}\n          onChangeComment={this.handleChangeComment}\n          onChangeForward={this.handleChangeForward}\n        />\n      );\n      break;\n    case 'thanks':\n      stepComponent = (\n        <Thanks\n          submitted={isSubmitted}\n          account={account}\n          onClose={onClose}\n        />\n      );\n    }\n\n    return (\n      <div className='modal-root__modal report-dialog-modal'>\n        <div className='report-modal__target'>\n          <IconButton className='report-modal__close' title={intl.formatMessage(messages.close)} icon='times' onClick={onClose} size={20} />\n          <FormattedMessage id='report.target' defaultMessage='Report {target}' values={{ target: <strong>{account.get('acct')}</strong> }} />\n        </div>\n\n        <div className='report-dialog-modal__container'>\n          {stepComponent}\n        </div>\n      </div>\n    );\n  }\n\n}\n"],"sourceRoot":""}